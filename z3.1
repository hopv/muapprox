(set-logic HORN)
(declare-fun Entry_ (Int Int Int Int) Bool)
(declare-fun Sentry_sub53 (Int Int Int Int) Bool)
(declare-fun Sentry_sub55 (Int Int Int Int) Bool)
(declare-fun B2 (Int Int Int) Bool)
(declare-fun A2 (Int Int Int) Bool)
(declare-fun F (Int Int Int) Bool)
(declare-fun B (Int Int Int Int) Bool)
(declare-fun A (Int Int Int Int) Bool)
(declare-fun F2 (Int Int Int) Bool)
(declare-fun P!!1 (Int Int Int) Bool)
(declare-fun P!!0 (Int Int Int) Bool)
(assert (forall ((A Int) (B Int) (C Int) (D Int))
  (=> (and (Sentry_sub53 C D C D) (<= D 0)) (Entry_ A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))
  (=> (and (Sentry_sub55 C D C D) (> D 0)) (Entry_ A B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))
  (=> (and (B2 B A D) (= A (- C D))) (B2 B C D))))
(assert (forall ((A Int) (B Int) (C Int)) (=> (<= B 0) (B2 A B C))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))
  (=> (and (A2 B A D) (= A (+ C D))) (A2 B C D))))
(assert (forall ((A Int) (B Int) (C Int)) (=> (> B 0) (A2 A B C))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))
  (=> (and (F B A D) (= A (- C D)) (> C 0)) (F B C D))))
(assert (forall ((A Int) (B Int) (C Int) (D Int))
  (=> (and (F B A D) (= A (+ C D)) (<= C 0)) (F B C D))))
(assert (forall ((A Int) (C Int) (D Int) (E Int))
  (let ((a!1 (>= E (+ (* 1 D) (+ (* (- 1) C) 10))))
        (a!2 (>= E (+ (* (- 1) D) (+ (* 1 C) 10))))
        (a!3 (>= E (+ (* (- 1) D) (+ (* (- 1) C) 10))))
        (a!4 (>= E (+ (* 1 D) (+ (* 1 C) 10)))))
    (=> (and (B A E C D) a!1 a!2 a!3 a!4) (F A C D)))))
(assert (forall ((B Int) (C Int) (D Int) (E Int))
  (let ((a!1 (>= E (+ (* 1 D) (+ (* (- 1) C) 10))))
        (a!2 (>= E (+ (* (- 1) D) (+ (* 1 C) 10))))
        (a!3 (>= E (+ (* (- 1) D) (+ (* (- 1) C) 10))))
        (a!4 (>= E (+ (* 1 D) (+ (* 1 C) 10)))))
    (=> (and (A B E C D) a!1 a!2 a!3 a!4) (F B C D)))))
(assert (forall ((B Int) (C Int) (D Int) (E Int) (F Int) (G Int))
  (=> (and (A D C B G) (= B (+ F G)) (= C (- E 1)) (<= F 0)) (A D E F G))))
(assert (forall ((B Int) (C Int) (D Int) (E Int)) (=> (< C 0) (A B C D E))))
(assert (forall ((A Int) (C Int) (D Int) (E Int) (F Int) (G Int))
  (=> (and (B D C A G) (= A (- F G)) (= C (- E 1)) (> F 0)) (B D E F G))))
(assert (forall ((A Int) (C Int) (D Int) (E Int)) (=> (< C 0) (B A C D E))))
(assert (forall ((A Int) (B Int) (C Int))
  (=> (and (A2 A B C) (P!!0 C B A) (P!!1 C B A) (B2 A B C)) (F2 A B C))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (=> (and (F2 B A E) (= A (+ D E)) (= B (- C 1))) (P!!1 E D C))))
(assert (forall ((A Int) (B Int) (C Int)) (=> (> B 0) (P!!1 C B A))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (=> (and (F2 B A E) (= A (- D E)) (= B (- C 1))) (P!!0 E D C))))
(assert (forall ((A Int) (B Int) (C Int)) (=> (<= B 0) (P!!0 C B A))))
(assert (forall ((A Int) (B Int) (C Int)) (=> (< A 0) (F2 A B C))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (let ((a!1 (>= E (+ (* 1 A) (+ (* 1 B) 10))))
        (a!2 (>= E (+ (* 1 A) (+ (* (- 1) B) 10))))
        (a!3 (>= E (+ (* (- 1) A) (+ (* 1 B) 10))))
        (a!4 (>= E (+ (* (- 1) A) (+ (* (- 1) B) 10)))))
    (=> (and (F2 E C D) a!1 a!2 a!3 a!4) (Sentry_sub53 A B C D)))))
(assert (forall ((A Int) (B Int) (C Int) (D Int) (E Int))
  (let ((a!1 (>= E (+ (* 1 A) (+ (* 1 B) 10))))
        (a!2 (>= E (+ (* 1 A) (+ (* (- 1) B) 10))))
        (a!3 (>= E (+ (* (- 1) A) (+ (* 1 B) 10))))
        (a!4 (>= E (+ (* (- 1) A) (+ (* (- 1) B) 10)))))
    (=> (and (F E C D) a!1 a!2 a!3 a!4) (Sentry_sub55 A B C D)))))

(check-sat)
(exit)