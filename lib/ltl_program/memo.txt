

unify ({}, cond) = [] (残りのcondの左辺はunit)
unify ({ s=s } :: C, cond) = unify(C, cond)
unify ({ s->t=s'->t' } :: C, cond) = unify({ s=s', t=t' } :: C, cond)
unify ({ α=t } :: C, cond) =
  if t <> α_2 (
    (* 新たにαがunitではないと分かった *)
    let C', cond' = extract(α, cond) in
    unify((C @ C')[α:=t], cond'[α:=t]) \circ [α:=t]
  ) else (
    (* TODO: 型変数は？ *)
    unify(C[α:=α_2], 型変数を統合し、式の右の制約をマージする(cond[α:=α_2])) \circ [α:=α_2]
  )
unify ({ t=α } :: C, cond) =
  (* t /= α *)
  unify ({ α=t } :: C, cond)



## LTL -> parity automataの変換
1. gen_cond.py "xx,yy" で 同時にちょうど一つの命題のみがTrueという条件式を生成し、元の条件式に && で追加
2. http://www.lsv.fr/~gastin/ltl2ba/index.php でbuchi automataに変換
3. 入力形式に書く。終了条件は、accept stateが2で、それ以外は1

spot (Spot is a C++14 library for LTL, ω-automata manipulation and model checking) の ltl2tgba で（上記より最適化は足りないようだが、）変換することができる
