/* Valid in 5.5 sec (--solve-dual=non-dual) */
%HES
S =v
  ∀n.
    App ( n+1) (Eq n) n \/
    App (-n+1) (Eq n) n \/
    App ( n-1) (Eq n) n \/
    App (-n-1) (Eq n) n \/
    App ( n)   (Eq n) n \/
    App (-n)   (Eq n) n \/
    App (   1) (Eq n) n \/
    App (  -1) (Eq n) n \/
    App (   0) (Eq n) n.

App e f x =v f x.

Eq m n =v m = n.

/*
INPUT FILE: benchmark/research/nu_param/intro/03_separate_bounded_exists_3.in
[Main:App:z3 path]
  /usr/bin/z3
[Main:App:Input]
  S : bool =ν
    ∀n3:int.
     App (n3 + 1) (Eq n3) n3
     || App (-n3 + 1) (Eq n3) n3
        || App (n3 - 1) (Eq n3) n3
           || App (-n3 - 1) (Eq n3) n3
              || App n3 (Eq n3) n3
                 || App (-n3) (Eq n3) n3
                    || App 1 (Eq n3) n3 || App (-1) (Eq n3) n3 || App 0 (Eq n3) n3
  App : int -> (int -> bool) -> int -> bool =ν λe4:int.λf5:(int -> bool).λx6:int.f5 x6
  Eq : int -> int -> bool =ν λm7:int.λn8:int.m7 = n8
[Main:App:Simplified]
  S : bool =ν
    ∀n3:int.
     App (n3 + 1) (Eq n3) n3
     || App (-n3 + 1) (Eq n3) n3
        || App (n3 - 1) (Eq n3) n3
           || App (-n3 - 1) (Eq n3) n3
              || App n3 (Eq n3) n3
                 || App (-n3) (Eq n3) n3
                    || App 1 (Eq n3) n3 || App (-1) (Eq n3) n3 || App 0 (Eq n3) n3
  App : int -> (int -> bool) -> int -> bool =ν λe4:int.λf5:(int -> bool).λx6:int.f5 x6
  Eq : int -> int -> bool =ν λm7:int.λn8:int.m7 = n8
S : bool[X7()].
App : e63:int -> (t64:int -> bool[X2(t64,e63)]) -> x66:int -> bool[X3(x66,e63)].
Eq : m69:int -> n70:int -> bool[X1(n70,m69)].


infering new formula: S = (∀n3:int.((((App n3 + 1) (Eq n3)) n3) || ((((App -n3 + 1) (Eq n3)) n3) || ((((App n3 - 1) (Eq n3)) n3) || ((((App -n3 - 1) (Eq n3)) n3) || ((((App n3) (Eq n3)) n3) || ((((App -n3) (Eq n3)) n3) || ((((App 1) (Eq n3)) n3) || ((((App -1) (Eq n3)) n3) || (((App 0) (Eq n3)) n3))))))))))
[Result]
X7() => X8(n3)
X8(n3) => X88(n3,n3)
\/ X89(n3,n3)
   \/ X90(n3,n3)
      \/ X91(n3,n3) \/ X92(n3,n3) \/ X93(n3,n3) \/ X94(n3,n3) \/ X95(n3,n3) \/ X96(n3,n3)
X96(x88,n3) => X3(x88,0)
X96(x66,n3) /\ X2(x87,0) => X1(x87,n3)
X95(x86,n3) => X3(x86,-1)
X95(x66,n3) /\ X2(x85,-1) => X1(x85,n3)
X94(x84,n3) => X3(x84,1)
X94(x66,n3) /\ X2(x83,1) => X1(x83,n3)
X93(x82,n3) => X3(x82,-n3)
X93(x66,n3) /\ X2(x81,-n3) => X1(x81,n3)
X92(x80,n3) => X3(x80,n3)
X92(x66,n3) /\ X2(x79,n3) => X1(x79,n3)
X91(x78,n3) => X3(x78,-n3 - 1)
X91(x66,n3) /\ X2(x77,-n3 - 1) => X1(x77,n3)
X90(x76,n3) => X3(x76,n3 - 1)
X90(x66,n3) /\ X2(x75,n3 - 1) => X1(x75,n3)
X89(x74,n3) => X3(x74,-n3 + 1)
X89(x66,n3) /\ X2(x73,-n3 + 1) => X1(x73,n3)
X88(x72,n3) => X3(x72,n3 + 1)
X88(x66,n3) /\ X2(x71,n3 + 1) => X1(x71,n3)
true => X7()


infering new formula: App = (\e4:int.(\t68:int -> bool[X4(t68,e4)].(\x6:int.(f5 x6))))
[Result]
X3(x91,x89) => X4(x91,x89)
X3(x66,x89) /\ X4(x90,x89) => X2(x90,x89)
X7() => X8(n3)
X8(n3) => X88(n3,n3)
\/ X89(n3,n3)
   \/ X90(n3,n3)
      \/ X91(n3,n3) \/ X92(n3,n3) \/ X93(n3,n3) \/ X94(n3,n3) \/ X95(n3,n3) \/ X96(n3,n3)
X96(x88,n3) => X3(x88,0)
X96(x66,n3) /\ X2(x87,0) => X1(x87,n3)
X95(x86,n3) => X3(x86,-1)
X95(x66,n3) /\ X2(x85,-1) => X1(x85,n3)
X94(x84,n3) => X3(x84,1)
X94(x66,n3) /\ X2(x83,1) => X1(x83,n3)
X93(x82,n3) => X3(x82,-n3)
X93(x66,n3) /\ X2(x81,-n3) => X1(x81,n3)
X92(x80,n3) => X3(x80,n3)
X92(x66,n3) /\ X2(x79,n3) => X1(x79,n3)
X91(x78,n3) => X3(x78,-n3 - 1)
X91(x66,n3) /\ X2(x77,-n3 - 1) => X1(x77,n3)
X90(x76,n3) => X3(x76,n3 - 1)
X90(x66,n3) /\ X2(x75,n3 - 1) => X1(x75,n3)
X89(x74,n3) => X3(x74,-n3 + 1)
X89(x66,n3) /\ X2(x73,-n3 + 1) => X1(x73,n3)
X88(x72,n3) => X3(x72,n3 + 1)
X88(x66,n3) /\ X2(x71,n3 + 1) => X1(x71,n3)
true => X7()


infering new formula: Eq = (\m7:int.(\n8:int.m7=n8))
[Result]
X1(x93,x92) => x92 = x93
X3(x91,x89) => X4(x91,x89)
X3(x66,x89) /\ X4(x90,x89) => X2(x90,x89)
X7() => X8(n3)
X8(n3) => X88(n3,n3)
\/ X89(n3,n3)
   \/ X90(n3,n3)
      \/ X91(n3,n3) \/ X92(n3,n3) \/ X93(n3,n3) \/ X94(n3,n3) \/ X95(n3,n3) \/ X96(n3,n3)
X96(x88,n3) => X3(x88,0)
X96(x66,n3) /\ X2(x87,0) => X1(x87,n3)
X95(x86,n3) => X3(x86,-1)
X95(x66,n3) /\ X2(x85,-1) => X1(x85,n3)
X94(x84,n3) => X3(x84,1)
X94(x66,n3) /\ X2(x83,1) => X1(x83,n3)
X93(x82,n3) => X3(x82,-n3)
X93(x66,n3) /\ X2(x81,-n3) => X1(x81,n3)
X92(x80,n3) => X3(x80,n3)
X92(x66,n3) /\ X2(x79,n3) => X1(x79,n3)
X91(x78,n3) => X3(x78,-n3 - 1)
X91(x66,n3) /\ X2(x77,-n3 - 1) => X1(x77,n3)
X90(x76,n3) => X3(x76,n3 - 1)
X90(x66,n3) /\ X2(x75,n3 - 1) => X1(x75,n3)
X89(x74,n3) => X3(x74,-n3 + 1)
X89(x66,n3) /\ X2(x73,-n3 + 1) => X1(x73,n3)
X88(x72,n3) => X3(x72,n3 + 1)
X88(x66,n3) /\ X2(x71,n3 + 1) => X1(x71,n3)
true => X7()
[Size] 9
Currently, the tractable-check-only and stop-if-intractable options don't work when solve-options is not "auto"
non-dual
[Warning]Some definite clause has or-head
RUNNING COMMAND: "bash /tmp/fptprove_launch_script.sh /tmp/fptprove-149372952.smt2 /opt/home2/git/fptprove 100005 solver/dbg_pcsat_tb.json"
RAN COMMAND: "bash /tmp/fptprove_launch_script.sh /tmp/fptprove-149372952.smt2 /opt/home2/git/fptprove 100005 solver/dbg_pcsat_tb.json"
Process result:
out: OK!!!
/tmp/fptprove-149372952.smt2,sat,46.016164600,61

status: WEXITED(0)
err: ************* preprocessing ***************
number of predicate variables: 15, number of constraints: 24
0: X7;
10: not ((X8 n3)) \/ -n3 + tmp102 != 0 \/ -n3 + tmp101 != 0 \/ -n3 + tmp100 != 0 \/ -n3 + tmp99 != 0 \/ -n3 + tmp98 != 0 \/ -n3 + tmp97 != 0 \/ -n3 + tmp96 != 0 \/ -n3 + tmp95 != 0 \/ -n3 + tmp94 != 0 \/ (X88 n3 tmp102) \/ (X89 n3 tmp101) \/ (X90 n3 tmp100) \/ (X91 n3 tmp99) \/ (X92 n3 tmp98) \/ (X93 n3 tmp97) \/ (X94 n3 tmp96) \/ (X95 n3 tmp95) \/ (X96 n3 tmp94);
1: not X7 \/ (X8 n3);
2: not ((X3 x91 x89)) \/ (X4 x91 x89);
2: not ((X92 x80 n3)) \/ (X3 x80 n3);
2: x92 + -x93 = 0 \/ not ((X1 x93 x92));
3: not ((X2 x71 (1 + n3))) \/ not ((X88 x66 n3)) \/ (X1 x71 n3);
3: not ((X2 x73 (1 + -n3))) \/ not ((X89 x66 n3)) \/ (X1 x73 n3);
3: not ((X2 x75 (-1 + n3))) \/ not ((X90 x66 n3)) \/ (X1 x75 n3);
3: not ((X2 x77 (-1 + -n3))) \/ not ((X91 x66 n3)) \/ (X1 x77 n3);
3: not ((X2 x79 n3)) \/ not ((X92 x66 n3)) \/ (X1 x79 n3);
3: not ((X2 x81 (-n3))) \/ not ((X93 x66 n3)) \/ (X1 x81 n3);
3: not ((X2 x83 1)) \/ not ((X94 x66 n3)) \/ (X1 x83 n3);
3: not ((X2 x85 (-1))) \/ not ((X95 x66 n3)) \/ (X1 x85 n3);
3: not ((X2 x87 0)) \/ not ((X96 x66 n3)) \/ (X1 x87 n3);
3: not ((X4 x90 x89)) \/ not ((X3 x66 x89)) \/ (X2 x90 x89);
3: not ((X88 x72 n3)) \/ -1 + -n3 + tmp110 != 0 \/ (X3 x72 tmp110);
3: not ((X89 x74 n3)) \/ -1 + n3 + tmp109 != 0 \/ (X3 x74 tmp109);
3: not ((X90 x76 n3)) \/ 1 + -n3 + tmp108 != 0 \/ (X3 x76 tmp108);
3: not ((X91 x78 n3)) \/ 1 + n3 + tmp107 != 0 \/ (X3 x78 tmp107);
3: not ((X93 x82 n3)) \/ n3 + tmp106 != 0 \/ (X3 x82 tmp106);
3: not ((X94 x84 n3)) \/ -1 + tmp105 != 0 \/ (X3 x84 tmp105);
3: not ((X95 x86 n3)) \/ 1 + tmp104 != 0 \/ (X3 x86 tmp104);
3: not ((X96 x88 n3)) \/ tmp103 != 0 \/ (X3 x88 tmp103)
sort env: X1: int -> int -> bool, X2: int -> int -> bool, X3: int -> int -> bool, X4: int -> int -> bool, X7: bool, X8: int -> bool, X88: int -> int -> bool, X89: int -> int -> bool, X90: int -> int -> bool, X91: int -> int -> bool, X92: int -> int -> bool, X93: int -> int -> bool, X94: int -> int -> bool, X95: int -> int -> bool, X96: int -> int -> bool
wfpvs: 
fnpvs: 
after simplify
number of predicate variables: 15, number of constraints: 24
0: X7;
1: (X8 n3) \/ not X7;
1: not ((X8 n3)) \/ (X96 n3 n3) \/ (X95 n3 n3) \/ (X94 n3 n3) \/ (X93 n3 n3) \/ (X92 n3 n3) \/ (X91 n3 (-(-n3))) \/ (X90 n3 n3) \/ (X89 n3 n3) \/ (X88 n3 n3) \/ -n3 + n3 != 0 \/ -n3 + n3 != 0 \/ -n3 + n3 != 0 \/ -n3 + n3 != 0 \/ -n3 + n3 != 0 \/ -n3 + n3 != 0 \/ -n3 + n3 != 0 \/ -n3 + n3 != 0 \/ -n3 + -(-n3) != 0;
2: not ((X1 x93 x92)) \/ x92 + -x93 = 0;
2: not ((X3 x91 x89)) \/ (X4 x91 x89);
2: not ((X88 x72 n3)) \/ (X3 x72 (1 - -n3)) \/ -n3 + 1 - -n3 != 1;
2: not ((X89 x74 (1 - tmp109))) \/ 1 - tmp109 + tmp109 != 1 \/ (X3 x74 tmp109);
2: not ((X90 x76 n3)) \/ (X3 x76 (-1 - -n3)) \/ -n3 + -1 - -n3 != -1;
2: not ((X91 x78 (-1 - tmp107))) \/ -1 - tmp107 + tmp107 != -1 \/ (X3 x78 tmp107);
2: not ((X92 x80 n3)) \/ (X3 x80 n3);
2: not ((X93 x82 (-tmp106))) \/ -tmp106 + tmp106 != 0 \/ (X3 x82 tmp106);
2: not ((X94 x84 n3)) \/ (X3 x84 1);
2: not ((X95 x86 n3)) \/ (X3 x86 (-1));
2: not ((X96 x88 n3)) \/ (X3 x88 0);
3: not ((X4 x90 x89)) \/ not ((X3 x66 x89)) \/ (X2 x90 x89);
3: not ((X88 x66 n3)) \/ not ((X2 x71 (1 + n3))) \/ (X1 x71 n3);
3: not ((X89 x66 n3)) \/ (X1 x73 n3) \/ not ((X2 x73 (1 + -n3)));
3: not ((X90 x66 n3)) \/ not ((X2 x75 (-1 + n3))) \/ (X1 x75 n3);
3: not ((X91 x66 n3)) \/ (X1 x77 n3) \/ not ((X2 x77 (-1 + -n3)));
3: not ((X92 x66 n3)) \/ not ((X2 x79 n3)) \/ (X1 x79 n3);
3: not ((X93 x66 n3)) \/ (X1 x81 n3) \/ not ((X2 x81 (-n3)));
3: not ((X94 x66 n3)) \/ not ((X2 x83 1)) \/ (X1 x83 n3);
3: not ((X95 x66 n3)) \/ not ((X2 x85 (-1))) \/ (X1 x85 n3);
3: not ((X96 x66 n3)) \/ not ((X2 x87 0)) \/ (X1 x87 n3)
sort env: X1: int -> int -> bool, X2: int -> int -> bool, X3: int -> int -> bool, X4: int -> int -> bool, X7: bool, X8: int -> bool, X88: int -> int -> bool, X89: int -> int -> bool, X90: int -> int -> bool, X91: int -> int -> bool, X92: int -> int -> bool, X93: int -> int -> bool, X94: int -> int -> bool, X95: int -> int -> bool, X96: int -> int -> bool
wfpvs: 
fnpvs: 
[elim_pvs] senv: #tvar1: int, #tvar10: int, #tvar11: int, #tvar12: int, #tvar13: int, #tvar14: int, #tvar15: int, #tvar16: int, #tvar17: int, #tvar18: int, #tvar19: int, #tvar2: int, #tvar20: int, #tvar21: int, #tvar22: int, #tvar23: int, #tvar24: int, #tvar25: int, #tvar26: int, #tvar27: int, #tvar28: int, #tvar29: int, #tvar3: int, #tvar30: int, #tvar31: int, #tvar32: int, #tvar33: int, #tvar34: int, #tvar35: int, #tvar36: int, #tvar37: int, #tvar38: int, #tvar39: int, #tvar4: int, #tvar40: int, #tvar41: int, #tvar42: int, #tvar43: int, #tvar44: int, #tvar45: int, #tvar46: int, #tvar47: int, #tvar48: int, #tvar49: int, #tvar5: int, #tvar50: int, #tvar51: int, #tvar52: int, #tvar53: int, #tvar54: int, #tvar6: int, #tvar7: int, #tvar8: int, #tvar9: int
[lbs_ubs_of] #tvar53 + -#tvar54 = 0
UB of X1(#tvar55: int, #tvar56: int): #tvar56 + -#tvar55 = 0
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] -#tvar3 + 1 - -#tvar3 != 1
[lbs_ubs_of] -#tvar42 + #tvar42 != 0
[lbs_ubs_of] -1 - #tvar44 + #tvar44 != -1
[lbs_ubs_of] 1 - #tvar46 + #tvar46 != 1
[lbs_ubs_of] -#tvar5 + -1 - -#tvar5 != -1
[lbs_ubs_of] false
[lbs_ubs_of] false
[lbs_ubs_of] false
LB of X7(): not false
[lbs_ubs_of] false
[lbs_ubs_of] -#tvar2 + #tvar2 != 0 \/ -#tvar2 + -(-#tvar2) != 0
X7 is assigned true because LB is true
X4 occurs 1 times positively and 1 times negatively
eliminating X4
X8 occurs 1 times positively and 1 times negatively
eliminating X8
X88 occurs 1 times positively and 2 times negatively
eliminating X88
X89 occurs 2 times positively and 2 times negatively
eliminating X89
**************** elim args start ****************
[clause] <- (X1 #tvar54 #tvar53), #tvar53 + -#tvar54 = 0
[times of the clause]
{#tvar53: 2;  #tvar54: 2}
[clause](X1 #tvar23 #tvar21) <- (X2 #tvar23 (-1 + #tvar21)), (X90 #tvar22 #tvar21), false
[times of the clause]
{#tvar23: 1;  #tvar22: 1;  #tvar21: 2}
[clause](X1 #tvar26 #tvar24) <- (X2 #tvar26 (-1 + -#tvar24)), (X91 #tvar25 #tvar24), false
[times of the clause]
{#tvar25: 1;  #tvar24: 2;  #tvar26: 1}
[clause](X1 #tvar29 #tvar27) <- (X2 #tvar29 #tvar27), (X92 #tvar28 #tvar27), false
[times of the clause]
{#tvar29: 1;  #tvar28: 1;  #tvar27: 2}
[clause](X1 #tvar32 #tvar30) <- (X2 #tvar32 (-#tvar30)), (X93 #tvar31 #tvar30), false
[times of the clause]
{#tvar32: 1;  #tvar31: 1;  #tvar30: 2}
[clause](X1 #tvar35 #tvar33) <- (X2 #tvar35 1), (X94 #tvar34 #tvar33), false
[times of the clause]
{#tvar34: 1;  #tvar33: 1;  #tvar35: 1}
[clause](X1 #tvar38 #tvar36) <- (X2 #tvar38 (-1)), (X95 #tvar37 #tvar36), false
[times of the clause]
{#tvar36: 1;  #tvar37: 1;  #tvar38: 1}
[clause](X1 #tvar41 #tvar39) <- (X2 #tvar41 0), (X96 #tvar40 #tvar39), false
[times of the clause]
{#tvar41: 1;  #tvar40: 1;  #tvar39: 1}
[clause](X2 #tvar52 #tvar51) <- (X3 #tvar52 #tvar51), (X3 #tvar57 #tvar51), false
[times of the clause]
{#tvar51: 2;  #tvar57: 1;  #tvar52: 1}
[clause](X3 #tvar10 1) <- (X94 #tvar10 #tvar9), false
[times of the clause]
{#tvar10: 1;  #tvar9: 1}
[clause](X3 #tvar12 (-1)) <- (X95 #tvar12 #tvar11), false
[times of the clause]
{#tvar12: 1;  #tvar11: 1}
[clause](X3 #tvar14 0) <- (X96 #tvar14 #tvar13), false
[times of the clause]
{#tvar14: 1;  #tvar13: 1}
[clause](X3 #tvar43 #tvar42) <- (X93 #tvar43 (-#tvar42)), -#tvar42 + #tvar42 != 0
[times of the clause]
{#tvar43: 1;  #tvar42: 3}
[clause](X3 #tvar45 #tvar44) <- (X91 #tvar45 (-1 - #tvar44)), -1 - #tvar44 + #tvar44 != -1
[times of the clause]
{#tvar45: 1;  #tvar44: 3}
[clause](X3 #tvar6 (-1 - -#tvar5)) <- (X90 #tvar6 #tvar5), -#tvar5 + -1 - -#tvar5 != -1
[times of the clause]
{#tvar6: 1;  #tvar5: 3}
[clause](X3 #tvar8 #tvar7) <- (X92 #tvar8 #tvar7), false
[times of the clause]
{#tvar8: 1;  #tvar7: 1}
[clause](X1 #tvar63 #tvar1), (X1 #tvar73 #tvar1), (X90 #tvar1 #tvar1), (X91 #tvar1 #tvar1), (X92 #tvar1 #tvar1), (X93 #tvar1 #tvar1), (X94 #tvar1 #tvar1), (X95 #tvar1 #tvar1), (X96 #tvar1 #tvar1) <- (X2 #tvar63 (1 + #tvar1)), (X2 #tvar73 (1 + -#tvar1)), -#tvar1 + #tvar1 != 0
[times of the clause]
{#tvar73: 1;  #tvar63: 1;  #tvar1: 4}
[clause](X1 #tvar63 (1 - #tvar74)), (X3 (1 - #tvar74) #tvar74), (X90 (1 - #tvar74) (1 - #tvar74)), (X91 (1 - #tvar74) (1 - #tvar74)), (X92 (1 - #tvar74) (1 - #tvar74)), (X93 (1 - #tvar74) (1 - #tvar74)), (X94 (1 - #tvar74) (1 - #tvar74)), (X95 (1 - #tvar74) (1 - #tvar74)), (X96 (1 - #tvar74) (1 - #tvar74)) <- (X2 #tvar63 (1 + 1 - #tvar74)), 1 - #tvar74 + #tvar74 != 1 \/ -(1 - #tvar74) + 1 - #tvar74 != 0
[times of the clause]
{#tvar74: 5;  #tvar63: 1}
[clause](X1 #tvar68 #tvar1), (X3 #tvar1 (1 - -#tvar1)), (X90 #tvar1 #tvar1), (X91 #tvar1 #tvar1), (X92 #tvar1 #tvar1), (X93 #tvar1 #tvar1), (X94 #tvar1 #tvar1), (X95 #tvar1 #tvar1), (X96 #tvar1 #tvar1) <- (X2 #tvar68 (1 + -#tvar1)), -#tvar1 + #tvar1 != 0 \/ -#tvar1 + 1 - -#tvar1 != 1
[times of the clause]
{#tvar68: 1;  #tvar1: 5}
[clause](X3 (1 - #tvar69) #tvar69), (X3 (1 - #tvar69) (1 - -(1 - #tvar69))), (X90 (1 - #tvar69) (1 - #tvar69)), (X91 (1 - #tvar69) (1 - #tvar69)), (X92 (1 - #tvar69) (1 - #tvar69)), (X93 (1 - #tvar69) (1 - #tvar69)), (X94 (1 - #tvar69) (1 - #tvar69)), (X95 (1 - #tvar69) (1 - #tvar69)), (X96 (1 - #tvar69) (1 - #tvar69)) <- , 1 - #tvar69 + #tvar69 != 1 \/ -(1 - #tvar69) + 1 - #tvar69 != 0 \/ -(1 - #tvar69) + 1 - -(1 - #tvar69) != 1
[times of the clause]
{#tvar69: 6}
[elim arg] start raf
[raf] erause (20) (27us)
[raf] erause (12) (234us)
[raf] erause (8) (40us)
[raf] erause (7) (32us)
[raf] erause (0) (27us)
[elim arg] raf end
[elim arg] new raf erasure (0): 

[elim arg] start far
[far] erause (20) (26us)
[far] erause (4) (151us)
[far] erause (2) (52us)
[far] erause (1) (44us)
[far] erause (0) (9.7us)
[elim arg] far end
[elim arg] new far erasure (0): 

*** there is no new erasure, args elimed clauses:
 <- (X1 #tvar54 #tvar53), #tvar53 + -#tvar54 = 0
(X1 #tvar23 #tvar21) <- (X2 #tvar23 (-1 + #tvar21)), (X90 #tvar22 #tvar21), false
(X1 #tvar26 #tvar24) <- (X2 #tvar26 (-1 + -#tvar24)), (X91 #tvar25 #tvar24), false
(X1 #tvar29 #tvar27) <- (X2 #tvar29 #tvar27), (X92 #tvar28 #tvar27), false
(X1 #tvar32 #tvar30) <- (X2 #tvar32 (-#tvar30)), (X93 #tvar31 #tvar30), false
(X1 #tvar35 #tvar33) <- (X2 #tvar35 1), (X94 #tvar34 #tvar33), false
(X1 #tvar38 #tvar36) <- (X2 #tvar38 (-1)), (X95 #tvar37 #tvar36), false
(X1 #tvar41 #tvar39) <- (X2 #tvar41 0), (X96 #tvar40 #tvar39), false
(X2 #tvar52 #tvar51) <- (X3 #tvar52 #tvar51), (X3 #tvar57 #tvar51), false
(X3 #tvar10 1) <- (X94 #tvar10 #tvar9), false
(X3 #tvar12 (-1)) <- (X95 #tvar12 #tvar11), false
(X3 #tvar14 0) <- (X96 #tvar14 #tvar13), false
(X3 #tvar43 #tvar42) <- (X93 #tvar43 (-#tvar42)), -#tvar42 + #tvar42 != 0
(X3 #tvar45 #tvar44) <- (X91 #tvar45 (-1 - #tvar44)), -1 - #tvar44 + #tvar44 != -1
(X3 #tvar6 (-1 - -#tvar5)) <- (X90 #tvar6 #tvar5), -#tvar5 + -1 - -#tvar5 != -1
(X3 #tvar8 #tvar7) <- (X92 #tvar8 #tvar7), false
(X1 #tvar63 #tvar1), (X1 #tvar73 #tvar1), (X90 #tvar1 #tvar1), (X91 #tvar1 #tvar1), (X92 #tvar1 #tvar1), (X93 #tvar1 #tvar1), (X94 #tvar1 #tvar1), (X95 #tvar1 #tvar1), (X96 #tvar1 #tvar1) <- (X2 #tvar63 (1 + #tvar1)), (X2 #tvar73 (1 + -#tvar1)), -#tvar1 + #tvar1 != 0
(X1 #tvar63 (1 - #tvar74)), (X3 (1 - #tvar74) #tvar74), (X90 (1 - #tvar74) (1 - #tvar74)), (X91 (1 - #tvar74) (1 - #tvar74)), (X92 (1 - #tvar74) (1 - #tvar74)), (X93 (1 - #tvar74) (1 - #tvar74)), (X94 (1 - #tvar74) (1 - #tvar74)), (X95 (1 - #tvar74) (1 - #tvar74)), (X96 (1 - #tvar74) (1 - #tvar74)) <- (X2 #tvar63 (1 + 1 - #tvar74)), 1 - #tvar74 + #tvar74 != 1 \/ -(1 - #tvar74) + 1 - #tvar74 != 0
(X1 #tvar68 #tvar1), (X3 #tvar1 (1 - -#tvar1)), (X90 #tvar1 #tvar1), (X91 #tvar1 #tvar1), (X92 #tvar1 #tvar1), (X93 #tvar1 #tvar1), (X94 #tvar1 #tvar1), (X95 #tvar1 #tvar1), (X96 #tvar1 #tvar1) <- (X2 #tvar68 (1 + -#tvar1)), -#tvar1 + #tvar1 != 0 \/ -#tvar1 + 1 - -#tvar1 != 1
(X3 (1 - #tvar69) #tvar69), (X3 (1 - #tvar69) (1 - -(1 - #tvar69))), (X90 (1 - #tvar69) (1 - #tvar69)), (X91 (1 - #tvar69) (1 - #tvar69)), (X92 (1 - #tvar69) (1 - #tvar69)), (X93 (1 - #tvar69) (1 - #tvar69)), (X94 (1 - #tvar69) (1 - #tvar69)), (X95 (1 - #tvar69) (1 - #tvar69)), (X96 (1 - #tvar69) (1 - #tvar69)) <- , 1 - #tvar69 + #tvar69 != 1 \/ -(1 - #tvar69) + 1 - #tvar69 != 0 \/ -(1 - #tvar69) + 1 - -(1 - #tvar69) != 1
**************** elim args end   ****************
number of predicate variables: 15, number of constraints: 20
1: 1 - #tvar69 + #tvar69 != 1 \/ -(1 - #tvar69) + 1 - #tvar69 != 0 \/ -(1 - #tvar69) + 1 - -(1 - #tvar69) != 1 \/ (X3 (1 - #tvar69) #tvar69) \/ (X3 (1 - #tvar69) (1 - -(1 - #tvar69))) \/ (X90 (1 - #tvar69) (1 - #tvar69)) \/ (X91 (1 - #tvar69) (1 - #tvar69)) \/ (X92 (1 - #tvar69) (1 - #tvar69)) \/ (X93 (1 - #tvar69) (1 - #tvar69)) \/ (X94 (1 - #tvar69) (1 - #tvar69)) \/ (X95 (1 - #tvar69) (1 - #tvar69)) \/ (X96 (1 - #tvar69) (1 - #tvar69));
2: #tvar53 + -#tvar54 = 0 \/ not ((X1 #tvar54 #tvar53));
2: -#tvar1 + #tvar1 != 0 \/ -#tvar1 + 1 - -#tvar1 != 1 \/ (X1 #tvar68 #tvar1) \/ (X3 #tvar1 (1 - -#tvar1)) \/ (X90 #tvar1 #tvar1) \/ (X91 #tvar1 #tvar1) \/ (X92 #tvar1 #tvar1) \/ (X93 #tvar1 #tvar1) \/ (X94 #tvar1 #tvar1) \/ (X95 #tvar1 #tvar1) \/ (X96 #tvar1 #tvar1) \/ not ((X2 #tvar68 (1 + -#tvar1)));
2: -#tvar42 + #tvar42 != 0 \/ (X3 #tvar43 #tvar42) \/ not ((X93 #tvar43 (-#tvar42)));
2: -#tvar5 + -1 - -#tvar5 != -1 \/ (X3 #tvar6 (-1 - -#tvar5)) \/ not ((X90 #tvar6 #tvar5));
2: -1 - #tvar44 + #tvar44 != -1 \/ (X3 #tvar45 #tvar44) \/ not ((X91 #tvar45 (-1 - #tvar44)));
2: 1 - #tvar74 + #tvar74 != 1 \/ -(1 - #tvar74) + 1 - #tvar74 != 0 \/ (X1 #tvar63 (1 - #tvar74)) \/ (X3 (1 - #tvar74) #tvar74) \/ (X90 (1 - #tvar74) (1 - #tvar74)) \/ (X91 (1 - #tvar74) (1 - #tvar74)) \/ (X92 (1 - #tvar74) (1 - #tvar74)) \/ (X93 (1 - #tvar74) (1 - #tvar74)) \/ (X94 (1 - #tvar74) (1 - #tvar74)) \/ (X95 (1 - #tvar74) (1 - #tvar74)) \/ (X96 (1 - #tvar74) (1 - #tvar74)) \/ not ((X2 #tvar63 (1 + 1 - #tvar74)));
2: false \/ (X3 #tvar10 1) \/ not ((X94 #tvar10 #tvar9));
2: false \/ (X3 #tvar12 (-1)) \/ not ((X95 #tvar12 #tvar11));
2: false \/ (X3 #tvar14 0) \/ not ((X96 #tvar14 #tvar13));
2: false \/ (X3 #tvar8 #tvar7) \/ not ((X92 #tvar8 #tvar7));
3: -#tvar1 + #tvar1 != 0 \/ (X1 #tvar63 #tvar1) \/ (X1 #tvar73 #tvar1) \/ (X90 #tvar1 #tvar1) \/ (X91 #tvar1 #tvar1) \/ (X92 #tvar1 #tvar1) \/ (X93 #tvar1 #tvar1) \/ (X94 #tvar1 #tvar1) \/ (X95 #tvar1 #tvar1) \/ (X96 #tvar1 #tvar1) \/ not ((X2 #tvar63 (1 + #tvar1))) \/ not ((X2 #tvar73 (1 + -#tvar1)));
3: false \/ (X1 #tvar23 #tvar21) \/ not ((X2 #tvar23 (-1 + #tvar21))) \/ not ((X90 #tvar22 #tvar21));
3: false \/ (X1 #tvar26 #tvar24) \/ not ((X2 #tvar26 (-1 + -#tvar24))) \/ not ((X91 #tvar25 #tvar24));
3: false \/ (X1 #tvar29 #tvar27) \/ not ((X2 #tvar29 #tvar27)) \/ not ((X92 #tvar28 #tvar27));
3: false \/ (X1 #tvar32 #tvar30) \/ not ((X2 #tvar32 (-#tvar30))) \/ not ((X93 #tvar31 #tvar30));
3: false \/ (X1 #tvar35 #tvar33) \/ not ((X2 #tvar35 1)) \/ not ((X94 #tvar34 #tvar33));
3: false \/ (X1 #tvar38 #tvar36) \/ not ((X2 #tvar38 (-1))) \/ not ((X95 #tvar37 #tvar36));
3: false \/ (X1 #tvar41 #tvar39) \/ not ((X2 #tvar41 0)) \/ not ((X96 #tvar40 #tvar39));
3: false \/ (X2 #tvar52 #tvar51) \/ not ((X3 #tvar52 #tvar51)) \/ not ((X3 #tvar57 #tvar51))
sort env: X1: int -> int -> bool, X2: int -> int -> bool, X3: int -> int -> bool, X4: int -> int -> bool, X7: bool, X8: int -> bool, X88: int -> int -> bool, X89: int -> int -> bool, X90: int -> int -> bool, X91: int -> int -> bool, X92: int -> int -> bool, X93: int -> int -> bool, X94: int -> int -> bool, X95: int -> int -> bool, X96: int -> int -> bool
wfpvs: 
fnpvs: 
number of predicate variables: 10, number of constraints: 20
1: (X3 (1 + -#tvar69) #tvar69) \/ (X3 (1 + -#tvar69) (2 + -#tvar69)) \/ (X90 (1 + -#tvar69) (1 + -#tvar69)) \/ (X91 (1 + -#tvar69) (1 + -#tvar69)) \/ (X92 (1 + -#tvar69) (1 + -#tvar69)) \/ (X93 (1 + -#tvar69) (1 + -#tvar69)) \/ (X94 (1 + -#tvar69) (1 + -#tvar69)) \/ (X95 (1 + -#tvar69) (1 + -#tvar69)) \/ (X96 (1 + -#tvar69) (1 + -#tvar69));
2: (X1 #tvar63 (1 + -#tvar74)) \/ (X3 (1 + -#tvar74) #tvar74) \/ (X90 (1 + -#tvar74) (1 + -#tvar74)) \/ (X91 (1 + -#tvar74) (1 + -#tvar74)) \/ (X92 (1 + -#tvar74) (1 + -#tvar74)) \/ (X93 (1 + -#tvar74) (1 + -#tvar74)) \/ (X94 (1 + -#tvar74) (1 + -#tvar74)) \/ (X95 (1 + -#tvar74) (1 + -#tvar74)) \/ (X96 (1 + -#tvar74) (1 + -#tvar74)) \/ not ((X2 #tvar63 (2 + -#tvar74)));
2: (X3 #tvar43 #tvar42) \/ not ((X93 #tvar43 (-#tvar42)));
2: (X3 #tvar45 #tvar44) \/ not ((X91 #tvar45 (-1 + -#tvar44)));
2: (X96 #tvar1 #tvar1) \/ (X95 #tvar1 #tvar1) \/ (X94 #tvar1 #tvar1) \/ (X93 #tvar1 #tvar1) \/ (X92 #tvar1 #tvar1) \/ (X91 #tvar1 #tvar1) \/ (X90 #tvar1 #tvar1) \/ (X3 #tvar1 (1 + #tvar1)) \/ (X1 #tvar68 #tvar1) \/ not ((X2 #tvar68 (1 + -#tvar1)));
2: not ((X1 #tvar54 #tvar53)) \/ #tvar53 + -#tvar54 = 0;
2: not ((X90 #tvar6 #tvar5)) \/ (X3 #tvar6 (-1 + #tvar5));
2: not ((X92 #tvar8 #tvar7)) \/ (X3 #tvar8 #tvar7);
2: not ((X94 #tvar10 #tvar9)) \/ (X3 #tvar10 1);
2: not ((X95 #tvar12 #tvar11)) \/ (X3 #tvar12 (-1));
2: not ((X96 #tvar14 #tvar13)) \/ (X3 #tvar14 0);
3: not ((X2 #tvar63 (1 + #tvar1))) \/ (X96 #tvar1 #tvar1) \/ (X95 #tvar1 #tvar1) \/ (X94 #tvar1 #tvar1) \/ (X93 #tvar1 #tvar1) \/ (X92 #tvar1 #tvar1) \/ (X91 #tvar1 #tvar1) \/ (X90 #tvar1 #tvar1) \/ (X1 #tvar73 #tvar1) \/ (X1 #tvar63 #tvar1) \/ not ((X2 #tvar73 (1 + -#tvar1)));
3: not ((X3 #tvar57 #tvar51)) \/ not ((X3 #tvar52 #tvar51)) \/ (X2 #tvar52 #tvar51);
3: not ((X90 #tvar22 #tvar21)) \/ not ((X2 #tvar23 (-1 + #tvar21))) \/ (X1 #tvar23 #tvar21);
3: not ((X91 #tvar25 #tvar24)) \/ (X1 #tvar26 #tvar24) \/ not ((X2 #tvar26 (-1 + -#tvar24)));
3: not ((X92 #tvar28 #tvar27)) \/ not ((X2 #tvar29 #tvar27)) \/ (X1 #tvar29 #tvar27);
3: not ((X93 #tvar31 #tvar30)) \/ (X1 #tvar32 #tvar30) \/ not ((X2 #tvar32 (-#tvar30)));
3: not ((X94 #tvar34 #tvar33)) \/ not ((X2 #tvar35 1)) \/ (X1 #tvar35 #tvar33);
3: not ((X95 #tvar37 #tvar36)) \/ not ((X2 #tvar38 (-1))) \/ (X1 #tvar38 #tvar36);
3: not ((X96 #tvar40 #tvar39)) \/ not ((X2 #tvar41 0)) \/ (X1 #tvar41 #tvar39)
sort env: X1: int -> int -> bool, X2: int -> int -> bool, X3: int -> int -> bool, X90: int -> int -> bool, X91: int -> int -> bool, X92: int -> int -> bool, X93: int -> int -> bool, X94: int -> int -> bool, X95: int -> int -> bool, X96: int -> int -> bool
wfpvs: 
fnpvs: 
number of predicate variables: 10, number of constraints: 20
1: false \/ (X3 (1 + -#tvar69) #tvar69) \/ (X3 (1 + -#tvar69) (2 + -#tvar69)) \/ (X90 (1 + -#tvar69) (1 + -#tvar69)) \/ (X91 (1 + -#tvar69) (1 + -#tvar69)) \/ (X92 (1 + -#tvar69) (1 + -#tvar69)) \/ (X93 (1 + -#tvar69) (1 + -#tvar69)) \/ (X94 (1 + -#tvar69) (1 + -#tvar69)) \/ (X95 (1 + -#tvar69) (1 + -#tvar69)) \/ (X96 (1 + -#tvar69) (1 + -#tvar69));
2: #tvar53 + -#tvar54 = 0 \/ not ((X1 #tvar54 #tvar53));
2: false \/ not ((X2 #tvar63 (2 + -#tvar74))) \/ (X1 #tvar63 (1 + -#tvar74)) \/ (X3 (1 + -#tvar74) #tvar74) \/ (X90 (1 + -#tvar74) (1 + -#tvar74)) \/ (X91 (1 + -#tvar74) (1 + -#tvar74)) \/ (X92 (1 + -#tvar74) (1 + -#tvar74)) \/ (X93 (1 + -#tvar74) (1 + -#tvar74)) \/ (X94 (1 + -#tvar74) (1 + -#tvar74)) \/ (X95 (1 + -#tvar74) (1 + -#tvar74)) \/ (X96 (1 + -#tvar74) (1 + -#tvar74));
2: false \/ not ((X2 #tvar68 (1 + -#tvar1))) \/ (X1 #tvar68 #tvar1) \/ (X3 #tvar1 (1 + #tvar1)) \/ (X90 #tvar1 #tvar1) \/ (X91 #tvar1 #tvar1) \/ (X92 #tvar1 #tvar1) \/ (X93 #tvar1 #tvar1) \/ (X94 #tvar1 #tvar1) \/ (X95 #tvar1 #tvar1) \/ (X96 #tvar1 #tvar1);
2: false \/ not ((X90 #tvar6 #tvar5)) \/ (X3 #tvar6 (-1 + #tvar5));
2: false \/ not ((X91 #tvar45 (-1 + -#tvar44))) \/ (X3 #tvar45 #tvar44);
2: false \/ not ((X92 #tvar8 #tvar7)) \/ (X3 #tvar8 #tvar7);
2: false \/ not ((X93 #tvar43 (-#tvar42))) \/ (X3 #tvar43 #tvar42);
2: false \/ not ((X94 #tvar10 #tvar9)) \/ (X3 #tvar10 1);
2: false \/ not ((X95 #tvar12 #tvar11)) \/ (X3 #tvar12 (-1));
2: false \/ not ((X96 #tvar14 #tvar13)) \/ (X3 #tvar14 0);
3: false \/ not ((X2 #tvar23 (-1 + #tvar21))) \/ not ((X90 #tvar22 #tvar21)) \/ (X1 #tvar23 #tvar21);
3: false \/ not ((X2 #tvar26 (-1 + -#tvar24))) \/ not ((X91 #tvar25 #tvar24)) \/ (X1 #tvar26 #tvar24);
3: false \/ not ((X2 #tvar29 #tvar27)) \/ not ((X92 #tvar28 #tvar27)) \/ (X1 #tvar29 #tvar27);
3: false \/ not ((X2 #tvar32 (-#tvar30))) \/ not ((X93 #tvar31 #tvar30)) \/ (X1 #tvar32 #tvar30);
3: false \/ not ((X2 #tvar35 1)) \/ not ((X94 #tvar34 #tvar33)) \/ (X1 #tvar35 #tvar33);
3: false \/ not ((X2 #tvar38 (-1))) \/ not ((X95 #tvar37 #tvar36)) \/ (X1 #tvar38 #tvar36);
3: false \/ not ((X2 #tvar41 0)) \/ not ((X96 #tvar40 #tvar39)) \/ (X1 #tvar41 #tvar39);
3: false \/ not ((X2 #tvar63 (1 + #tvar1))) \/ not ((X2 #tvar73 (1 + -#tvar1))) \/ (X1 #tvar63 #tvar1) \/ (X1 #tvar73 #tvar1) \/ (X90 #tvar1 #tvar1) \/ (X91 #tvar1 #tvar1) \/ (X92 #tvar1 #tvar1) \/ (X93 #tvar1 #tvar1) \/ (X94 #tvar1 #tvar1) \/ (X95 #tvar1 #tvar1) \/ (X96 #tvar1 #tvar1);
3: false \/ not ((X3 #tvar52 #tvar51)) \/ not ((X3 #tvar57 #tvar51)) \/ (X2 #tvar52 #tvar51)
sort env: X1: int -> int -> bool, X2: int -> int -> bool, X3: int -> int -> bool, X90: int -> int -> bool, X91: int -> int -> bool, X92: int -> int -> bool, X93: int -> int -> bool, X94: int -> int -> bool, X95: int -> int -> bool, X96: int -> int -> bool
wfpvs: 
fnpvs: 
datatype env:
*******************************************
************* initializing X1 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************* initializing X2 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************* initializing X3 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************* initializing X90 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************* initializing X91 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************* initializing X92 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************* initializing X93 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************* initializing X94 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************* initializing X95 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************* initializing X96 ***************
number of disjuncts : 1
number of conjuncts : 1
depth : 0
upper bound of the sum of the abs of coefficients : 1
upper bound of the sum of the abs of constant : 0
seeds : 0
************** current phase of 0th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************
[X1](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X2](x1: int, x2: int)
depth: 0, #quals: 3, #terms: 0
[X3](x1: int, x2: int)
depth: 0, #quals: 5, #terms: 0
[X90](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X91](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X92](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X93](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X94](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X95](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X96](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
templates generated
solver initialized

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (0):

table:



===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (0):

table:

reduced qualifiers (1):
0 (0, 1, 3): x2 = 0


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (0):

table:

reduced qualifiers (1):
0 (0, 1, 3): x2 != 0

bounds constr: [#S_1] true
bounds constr: [#S_2] true
bounds constr: [#S_3] true
bounds constr: [#S_4] true
bounds constr: [#S_5] true
bounds constr: [#S_6] true
bounds constr: [#S_7] true
bounds constr: [#S_8] true
bounds constr: [#S_9] true
bounds constr: [#S_10] true
bounds constr: [#S_11] true
bounds constr: [#S_12] true
bounds constr: [#S_13] true
bounds constr: [#S_14] true
bounds constr: [#S_15] true
bounds constr: [#S_16] true
bounds constr: [#S_17] true
bounds constr: [#S_18] true
bounds constr: [#S_19] true
bounds constr: [#S_20] true
bounds constr: [#S_21] true
bounds constr: [#S_22] true
bounds constr: [#S_23] true
bounds constr: [#S_24] true
bounds constr: [#S_25] true
bounds constr: [#S_26] true
bounds constr: [#S_27] true
bounds constr: [#S_28] true
bounds constr: [#S_29] true
bounds constr: [#S_30] true
constraints generated
sat
************** current phase of 0th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  true
X2(x1: int, x2: int) :=
  true
X3(x1: int, x2: int) :=
  true
X90(x1: int, x2: int) :=
  true
X91(x1: int, x2: int) :=
  true
X92(x1: int, x2: int) :=
  true
X93(x1: int, x2: int) :=
  true
X94(x1: int, x2: int) :=
  true
X95(x1: int, x2: int) :=
  true
X96(x1: int, x2: int) :=
  true

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X1(0, 1) => )

************** current phase of 0th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (1): [
(X1(0, 1) => )]
*** undecided (0): [
]

*** labeling with SAT solving
************** current phase of 0th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
proving (X1 0 1)
*** Example Instances obtained by Resolution:


************** current phase of 0th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (1): [
(X1(0, 1) => )]
*** undecided (0): [
]

*** labeling with SAT solving
************** current phase of 1st iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (1):
0 (0): X1(0, 1)
table:
F


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (0):

table:

reduced qualifiers (1):
0 (0, 1, 3): x2 = 0


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (0):

table:



===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (0):

table:

reduced qualifiers (1):
0 (0, 1, 3): x2 != 0

gen constr of example:(X1(0, 1) => )
constr: [#S_31] #paramvar4 > 0 \/ #paramvar1 + #paramvar3 < 0
bounds constr: [#S_32] true
bounds constr: [#S_33] true
bounds constr: [#S_34] true
bounds constr: [#S_35] true
bounds constr: [#S_36] true
bounds constr: [#S_37] true
bounds constr: [#S_38] true
bounds constr: [#S_39] true
bounds constr: [#S_40] true
bounds constr: [#S_41] true
bounds constr: [#S_42] true
bounds constr: [#S_43] true
bounds constr: [#S_44] true
bounds constr: [#S_45] true
bounds constr: [#S_46] true
bounds constr: [#S_47] true
bounds constr: [#S_48] true
bounds constr: [#S_49] true
bounds constr: [#S_50] true
bounds constr: [#S_51] true
bounds constr: [#S_52] true
bounds constr: [#S_53] true
bounds constr: [#S_54] true
bounds constr: [#S_55] true
bounds constr: [#S_56] true
bounds constr: [#S_57] true
bounds constr: [#S_58] true
bounds constr: [#S_59] (if (#paramvar1 >= 0) then #paramvar1 else -#paramvar1) <= 0
bounds constr: [#S_60] (if (#paramvar3 >= 0) then #paramvar3 else -#paramvar3) <= 1
bounds constr: [#S_61] true
constraints generated
sat
************** current phase of 1st iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  true
X3(x1: int, x2: int) :=
  true
X90(x1: int, x2: int) :=
  true
X91(x1: int, x2: int) :=
  true
X92(x1: int, x2: int) :=
  true
X93(x1: int, x2: int) :=
  true
X94(x1: int, x2: int) :=
  true
X95(x1: int, x2: int) :=
  true
X96(x1: int, x2: int) :=
  true

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(0, -1) /\ X93($1, 1) => X1(0, 1));
(X2(0, -1) /\ X95($1, 1) => X1(0, 1));
(X2(0, -2) /\ X91($1, 1) => X1(0, 1));
(X2(0, 0) /\ X90($1, 1) => X1(0, 1));
(X2(0, 0) /\ X96($1, 1) => X1(0, 1));
(X2(0, 1) /\ X92($1, 1) => X1(0, 1));
(X2(0, 1) /\ X94($1, 1) => X1(0, 1))

************** current phase of 1st iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (1): [
(X1(0, 1) => )]
*** undecided (7): [
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X94($1, 1) => )]

*** labeling with SAT solving
************** current phase of 1st iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
refuting (X90 $1 1)
refuting (X91 $1 1)
refuting (X92 $1 1)
refuting (X93 $1 1)
refuting (X94 $1 1)
refuting (X95 $1 1)
refuting (X96 $1 1)
proving (X90 $1 1)
proving (X91 $1 1)
proving (X92 $1 1)
proving (X93 $1 1)
proving (X94 $1 1)
proving (X95 $1 1)
proving (X96 $1 1)
refuting (X2 0 (-2))
refuting (X2 0 (-1))
refuting (X2 0 0)
refuting (X2 0 1)
proving (X2 0 (-2))
proving (X2 0 (-1))
proving (X2 0 0)
proving (X2 0 1)
*** Example Instances obtained by Resolution:


************** current phase of 1st iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (1): [
(X1(0, 1) => )]
*** undecided (7): [
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X94($1, 1) => )]

*** labeling with SAT solving
************** current phase of 2nd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (1):
0 (0): X94(0, 1)
table:
F


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (1):
0 (0): X96(0, 1)
table:
F


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (1):
0 (0): X1(0, 1)
table:
F


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (1):
0 (0): X92(0, 1)
table:
F


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (1):
0 (0): X93(0, 1)
table:
F


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (1):
0 (0): X90(0, 1)
table:
F


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (1):
0 (0): X91(0, 1)
table:
F


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (0):

table:

reduced qualifiers (1):
0 (0, 1, 3): x2 = 0


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (1):
0 (0): X95(0, 1)
table:
F


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (4):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
table:
TTFT
TTTF
TFTT

gen constr of example:(X2(0, -2) /\ X91($1, 1) => )
constr: [#S_62] #paramvar8 < 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar7 * -2 < 0 \/ #paramvar26 > 0 \/ #paramvar23 + #paramvar25 < 0
gen constr of example:(X2(0, -1) /\ X93($1, 1) => )
constr: [#S_63] #paramvar8 < 0 \/ #paramvar9 < 0 \/ #paramvar10 > 0 \/ #paramvar5 + -#paramvar7 < 0 \/ #paramvar34 > 0 \/ #paramvar31 + #paramvar33 < 0
gen constr of example:(X2(0, -1) /\ X95($1, 1) => )
constr: [#S_64] #paramvar8 < 0 \/ #paramvar9 < 0 \/ #paramvar10 > 0 \/ #paramvar5 + -#paramvar7 < 0 \/ #paramvar42 > 0 \/ #paramvar39 + #paramvar41 < 0
gen constr of example:(X2(0, 0) /\ X90($1, 1) => )
constr: [#S_65] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 < 0 \/ #paramvar22 > 0 \/ #paramvar19 + #paramvar21 < 0
gen constr of example:(X2(0, 0) /\ X96($1, 1) => )
constr: [#S_66] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 < 0 \/ #paramvar46 > 0 \/ #paramvar43 + #paramvar45 < 0
gen constr of example:(X2(0, 1) /\ X92($1, 1) => )
constr: [#S_67] #paramvar8 < 0 \/ #paramvar9 > 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar7 < 0 \/ #paramvar30 > 0 \/ #paramvar27 + #paramvar29 < 0
gen constr of example:(X2(0, 1) /\ X94($1, 1) => )
constr: [#S_68] #paramvar8 < 0 \/ #paramvar9 > 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar7 < 0 \/ #paramvar38 > 0 \/ #paramvar35 + #paramvar37 < 0
bounds constr: [#S_69] (if (#paramvar43 >= 0) then #paramvar43 else -#paramvar43) <= 0
bounds constr: [#S_70] (if (#paramvar45 >= 0) then #paramvar45 else -#paramvar45) <= 1
bounds constr: [#S_71] true
bounds constr: [#S_72] (if (#paramvar39 >= 0) then #paramvar39 else -#paramvar39) <= 0
bounds constr: [#S_73] (if (#paramvar41 >= 0) then #paramvar41 else -#paramvar41) <= 1
bounds constr: [#S_74] true
bounds constr: [#S_75] (if (#paramvar35 >= 0) then #paramvar35 else -#paramvar35) <= 0
bounds constr: [#S_76] (if (#paramvar37 >= 0) then #paramvar37 else -#paramvar37) <= 1
bounds constr: [#S_77] true
bounds constr: [#S_78] (if (#paramvar31 >= 0) then #paramvar31 else -#paramvar31) <= 0
bounds constr: [#S_79] (if (#paramvar33 >= 0) then #paramvar33 else -#paramvar33) <= 1
bounds constr: [#S_80] true
bounds constr: [#S_81] (if (#paramvar27 >= 0) then #paramvar27 else -#paramvar27) <= 0
bounds constr: [#S_82] (if (#paramvar29 >= 0) then #paramvar29 else -#paramvar29) <= 1
bounds constr: [#S_83] true
bounds constr: [#S_84] (if (#paramvar23 >= 0) then #paramvar23 else -#paramvar23) <= 0
bounds constr: [#S_85] (if (#paramvar25 >= 0) then #paramvar25 else -#paramvar25) <= 1
bounds constr: [#S_86] true
bounds constr: [#S_87] (if (#paramvar19 >= 0) then #paramvar19 else -#paramvar19) <= 0
bounds constr: [#S_88] (if (#paramvar21 >= 0) then #paramvar21 else -#paramvar21) <= 1
bounds constr: [#S_89] true
bounds constr: [#S_90] true
bounds constr: [#S_91] true
bounds constr: [#S_92] true
bounds constr: [#S_93] (if (#paramvar5 >= 0) then #paramvar5 else -#paramvar5) <= 0
bounds constr: [#S_94] (if (#paramvar7 >= 0) then #paramvar7 else -#paramvar7) <= 1
bounds constr: [#S_95] true
bounds constr: [#S_96] true
bounds constr: [#S_97] true
bounds constr: [#S_98] true
constraints generated
sat
************** current phase of 2nd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  true
X3(x1: int, x2: int) :=
  true
X90(x1: int, x2: int) :=
  x1 + -x2 = 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(0, -1) /\ X93(1, 1) => X1(0, 1));
(X2(0, -1) /\ X95(1, 1) => X1(0, 1));
(X2(0, -2) /\ X91(1, 1) => X1(0, 1));
(X2(0, 0) /\ X90(1, 1) => X1(0, 1));
(X2(0, 0) /\ X96(1, 1) => X1(0, 1));
(X2(0, 1) /\ X92(1, 1) => X1(0, 1));
(X2(0, 1) /\ X94(1, 1) => X1(0, 1))

************** current phase of 2nd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (1): [
(X1(0, 1) => )]
*** undecided (14): [
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X94($1, 1) => )]

*** labeling with SAT solving
************** current phase of 2nd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
refuting (X2 0 (-2))
refuting (X2 0 (-1))
refuting (X2 0 0)
refuting (X2 0 1)
refuting (X90 1 1)
refuting (X91 1 1)
refuting (X92 1 1)
refuting (X93 1 1)
refuting (X94 1 1)
refuting (X95 1 1)
refuting (X96 1 1)
proving (X2 0 (-2))
proving (X2 0 (-1))
proving (X2 0 0)
proving (X2 0 1)
proving (X90 1 1)
proving (X91 1 1)
proving (X92 1 1)
proving (X93 1 1)
proving (X94 1 1)
proving (X95 1 1)
proving (X96 1 1)
*** Example Instances obtained by Resolution:


************** current phase of 2nd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (1): [
(X1(0, 1) => )]
*** undecided (14): [
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X94($1, 1) => )]

*** labeling with SAT solving
************** current phase of 3rd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
table:
FT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
table:
FT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (1):
0 (0): X1(0, 1)
table:
F


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
table:
FT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
table:
FT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
table:
FT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
table:
FT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (0):

table:

reduced qualifiers (1):
0 (0, 1, 3): x2 = 0


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
table:
FT


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (4):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
table:
TTFT
TTTF
TFTT

gen constr of example:(X2(0, -2) /\ X91(1, 1) => )
constr: [#S_99] #paramvar8 < 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar7 * -2 < 0 \/ #paramvar26 < 0 \/ #paramvar23 + #paramvar24 + #paramvar25 < 0
gen constr of example:(X2(0, -1) /\ X93(1, 1) => )
constr: [#S_100] #paramvar8 < 0 \/ #paramvar9 < 0 \/ #paramvar10 > 0 \/ #paramvar5 + -#paramvar7 < 0 \/ #paramvar34 < 0 \/ #paramvar31 + #paramvar32 + #paramvar33 < 0
gen constr of example:(X2(0, -1) /\ X95(1, 1) => )
constr: [#S_101] #paramvar8 < 0 \/ #paramvar9 < 0 \/ #paramvar10 > 0 \/ #paramvar5 + -#paramvar7 < 0 \/ #paramvar42 < 0 \/ #paramvar39 + #paramvar40 + #paramvar41 < 0
gen constr of example:(X2(0, 0) /\ X90(1, 1) => )
constr: [#S_102] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 < 0 \/ #paramvar22 < 0 \/ #paramvar19 + #paramvar20 + #paramvar21 < 0
gen constr of example:(X2(0, 0) /\ X96(1, 1) => )
constr: [#S_103] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 < 0 \/ #paramvar46 < 0 \/ #paramvar43 + #paramvar44 + #paramvar45 < 0
gen constr of example:(X2(0, 1) /\ X92(1, 1) => )
constr: [#S_104] #paramvar8 < 0 \/ #paramvar9 > 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar7 < 0 \/ #paramvar30 < 0 \/ #paramvar27 + #paramvar28 + #paramvar29 < 0
gen constr of example:(X2(0, 1) /\ X94(1, 1) => )
constr: [#S_105] #paramvar8 < 0 \/ #paramvar9 > 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar7 < 0 \/ #paramvar38 < 0 \/ #paramvar35 + #paramvar36 + #paramvar37 < 0
bounds constr: [#S_106] (if (#paramvar43 >= 0) then #paramvar43 else -#paramvar43) <= 0
bounds constr: [#S_107] (if (#paramvar44 >= 0) then #paramvar44 else -#paramvar44) + (if (#paramvar45 >= 0) then #paramvar45 else -#paramvar45) <= 1
bounds constr: [#S_108] true
bounds constr: [#S_109] (if (#paramvar39 >= 0) then #paramvar39 else -#paramvar39) <= 0
bounds constr: [#S_110] (if (#paramvar40 >= 0) then #paramvar40 else -#paramvar40) + (if (#paramvar41 >= 0) then #paramvar41 else -#paramvar41) <= 1
bounds constr: [#S_111] true
bounds constr: [#S_112] (if (#paramvar35 >= 0) then #paramvar35 else -#paramvar35) <= 0
bounds constr: [#S_113] (if (#paramvar36 >= 0) then #paramvar36 else -#paramvar36) + (if (#paramvar37 >= 0) then #paramvar37 else -#paramvar37) <= 1
bounds constr: [#S_114] true
bounds constr: [#S_115] (if (#paramvar31 >= 0) then #paramvar31 else -#paramvar31) <= 0
bounds constr: [#S_116] (if (#paramvar32 >= 0) then #paramvar32 else -#paramvar32) + (if (#paramvar33 >= 0) then #paramvar33 else -#paramvar33) <= 1
bounds constr: [#S_117] true
bounds constr: [#S_118] (if (#paramvar27 >= 0) then #paramvar27 else -#paramvar27) <= 0
bounds constr: [#S_119] (if (#paramvar28 >= 0) then #paramvar28 else -#paramvar28) + (if (#paramvar29 >= 0) then #paramvar29 else -#paramvar29) <= 1
bounds constr: [#S_120] true
bounds constr: [#S_121] (if (#paramvar23 >= 0) then #paramvar23 else -#paramvar23) <= 0
bounds constr: [#S_122] (if (#paramvar24 >= 0) then #paramvar24 else -#paramvar24) + (if (#paramvar25 >= 0) then #paramvar25 else -#paramvar25) <= 1
bounds constr: [#S_123] true
bounds constr: [#S_124] (if (#paramvar19 >= 0) then #paramvar19 else -#paramvar19) <= 0
bounds constr: [#S_125] (if (#paramvar20 >= 0) then #paramvar20 else -#paramvar20) + (if (#paramvar21 >= 0) then #paramvar21 else -#paramvar21) <= 1
bounds constr: [#S_126] true
bounds constr: [#S_127] true
bounds constr: [#S_128] true
bounds constr: [#S_129] true
bounds constr: [#S_130] (if (#paramvar5 >= 0) then #paramvar5 else -#paramvar5) <= 0
bounds constr: [#S_131] (if (#paramvar7 >= 0) then #paramvar7 else -#paramvar7) <= 1
bounds constr: [#S_132] true
bounds constr: [#S_133] true
bounds constr: [#S_134] true
bounds constr: [#S_135] true
constraints generated
sat
************** current phase of 3rd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ 1 + x2 != 0
X3(x1: int, x2: int) :=
  true
X90(x1: int, x2: int) :=
  -x2 >= 0
X91(x1: int, x2: int) :=
  true
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X93(x1: int, x2: int) :=
  -x2 >= 0
X94(x1: int, x2: int) :=
  -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 0) /\ X96(1, 0) => X1(-1, 0));
(X2(0, 0) /\ X91($1, -1) => X1(0, -1));
(X2(1, 0) /\ X92(1, 0) => X1(1, 0));
(X2(1, 0) /\ X93($1, 0) => X1(1, 0));
(X3($1, 1) /\ X3($2, 1) => X2($1, 1))

************** current phase of 3rd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (1): [
(X1(0, 1) => )]
*** undecided (19): [
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X94($1, 1) => );
(X2(-1, 0) /\ X96(1, 0) => X1(-1, 0));
(X2(0, 0) /\ X91($1, -1) => X1(0, -1));
(X2(1, 0) /\ X92(1, 0) => X1(1, 0));
(X2(1, 0) /\ X93($1, 0) => X1(1, 0));
(X3($1, 1) /\ X3($2, 1) => X2($1, 1))]

*** labeling with SAT solving
************** current phase of 3rd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
refuting (X2 $1 1)
refuting (X91 $1 (-1))
refuting (X93 $1 0)
refuting (X3 $2 1)
proving (X2 $1 1)
proving (X91 $1 (-1))
proving (X93 $1 0)
proving (X3 $2 1)
refuting (X1 (-1) 0)
  added as a negative example with: 
  add negative example(X1(-1, 0) => )
refuting (X1 0 (-1))
  added as a negative example with: 
  add negative example(X1(0, -1) => )
refuting (X1 1 0)
  added as a negative example with: 
  add negative example(X1(1, 0) => )
refuting (X2 (-1) 0)
refuting (X2 0 0)
refuting (X2 1 0)
refuting (X92 1 0)
refuting (X96 1 0)
proving (X1 (-1) 0)
proving (X1 0 (-1))
proving (X1 1 0)
proving (X2 (-1) 0)
proving (X2 0 0)
proving (X2 1 0)
proving (X92 1 0)
proving (X96 1 0)
*** Example Instances obtained by Resolution:
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(1, 0) => )

************** current phase of 3rd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (4): [
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (19): [
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X94($1, 1) => );
(X2(1, 0) /\ X92(1, 0) => );
(X2(1, 0) /\ X93($1, 0) => );
(X3($1, 1) /\ X3($2, 1) => X2($1, 1))]

*** labeling with SAT solving
************** current phase of 4th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
table:
FT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (3):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
table:
FTF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (4):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
table:
FFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (3):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
table:
FTF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (3):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
table:
FTT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
table:
FT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (3):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
table:
FTF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (1):
0 (0): X3(0, 1)
table:
F
T
F
T
T
reduced qualifiers (1):
0 (0, 1, 3): x2 = 0


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (2):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
table:
FT


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (6):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
table:
TTFTFF
TTTFTT
TFTTTT

gen constr of example:(X1(-1, 0) => )
constr: [#S_136] #paramvar4 > 0 \/ #paramvar1 + -#paramvar2 < 0
gen constr of example:(X1(0, -1) => )
constr: [#S_137] #paramvar4 > 0 \/ #paramvar1 + -#paramvar3 < 0
gen constr of example:(X1(1, 0) => )
constr: [#S_138] #paramvar4 > 0 \/ #paramvar1 + #paramvar2 < 0
gen constr of example:(X2(-1, 0) /\ X96(1, 0) => )
constr: [#S_139] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 + -#paramvar6 < 0 \/ #paramvar46 > 0 \/ #paramvar43 + #paramvar44 < 0
gen constr of example:(X2(0, 0) /\ X91($1, -1) => )
constr: [#S_140] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 < 0 \/ #paramvar26 > 0 \/ #paramvar23 + -#paramvar25 < 0
gen constr of example:(X2(1, 0) /\ X92(1, 0) => )
constr: [#S_141] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar6 < 0 \/ #paramvar30 > 0 \/ #paramvar27 + #paramvar28 < 0
gen constr of example:(X2(1, 0) /\ X93($1, 0) => )
constr: [#S_142] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar6 < 0 \/ #paramvar34 < 0 \/ #paramvar31 < 0
gen constr of example:(X3($1, 1) /\ X3($2, 1) => X2($1, 1))
constr: [#S_143] #paramvar14 > 0 \/ #paramvar15 < 0 \/ #paramvar16 > 0 \/ #paramvar17 < 0 \/ #paramvar18 < 0 \/ #paramvar11 + #paramvar13 < 0 \/ #paramvar14 > 0 \/ #paramvar15 < 0 \/ #paramvar16 > 0 \/ #paramvar17 < 0 \/ #paramvar18 < 0 \/ #paramvar11 + #paramvar13 < 0 \/ #paramvar8 >= 0 /\ #paramvar9 <= 0 /\ #paramvar10 >= 0 /\ #paramvar5 + #paramvar7 >= 0
bounds constr: [#S_144] (if (#paramvar43 >= 0) then #paramvar43 else -#paramvar43) <= 0
bounds constr: [#S_145] (if (#paramvar44 >= 0) then #paramvar44 else -#paramvar44) <= 1
bounds constr: [#S_146] true
bounds constr: [#S_147] true
bounds constr: [#S_148] true
bounds constr: [#S_149] true
bounds constr: [#S_150] true
bounds constr: [#S_151] true
bounds constr: [#S_152] true
bounds constr: [#S_153] (if (#paramvar31 >= 0) then #paramvar31 else -#paramvar31) <= 0
bounds constr: [#S_154] true
bounds constr: [#S_155] true
bounds constr: [#S_156] (if (#paramvar27 >= 0) then #paramvar27 else -#paramvar27) <= 0
bounds constr: [#S_157] (if (#paramvar28 >= 0) then #paramvar28 else -#paramvar28) <= 1
bounds constr: [#S_158] true
bounds constr: [#S_159] (if (#paramvar23 >= 0) then #paramvar23 else -#paramvar23) <= 0
bounds constr: [#S_160] (if (#paramvar25 >= 0) then #paramvar25 else -#paramvar25) <= 1
bounds constr: [#S_161] true
bounds constr: [#S_162] true
bounds constr: [#S_163] true
bounds constr: [#S_164] true
bounds constr: [#S_165] (if (#paramvar11 >= 0) then #paramvar11 else -#paramvar11) <= 0
bounds constr: [#S_166] (if (#paramvar13 >= 0) then #paramvar13 else -#paramvar13) <= 1
bounds constr: [#S_167] true
bounds constr: [#S_168] (if (#paramvar5 >= 0) then #paramvar5 else -#paramvar5) <= 0
bounds constr: [#S_169] (if (#paramvar6 >= 0) then #paramvar6 else -#paramvar6) + (if (#paramvar7 >= 0) then #paramvar7 else -#paramvar7) <= 1
bounds constr: [#S_170] true
bounds constr: [#S_171] (if (#paramvar1 >= 0) then #paramvar1 else -#paramvar1) <= 0
bounds constr: [#S_172] (if (#paramvar2 >= 0) then #paramvar2 else -#paramvar2) + (if (#paramvar3 >= 0) then #paramvar3 else -#paramvar3) <= 1
bounds constr: [#S_173] true
constraints generated
sat
************** current phase of 4th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ x1 >= 0
X3(x1: int, x2: int) :=
  -1 + -x1 + x2 != 0
X90(x1: int, x2: int) :=
  -x2 >= 0
X91(x1: int, x2: int) :=
  x2 >= 0
X92(x1: int, x2: int) :=
  -x2 >= 0
X93(x1: int, x2: int) :=
  -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X95(x1: int, x2: int) :=
  -x2 >= 0
X96(x1: int, x2: int) :=
  -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(0, 1) /\ X93($1, -1) => X1(0, -1));
(X2(1, 1) /\ X94(1, 0) => X1(1, 0));
(X3(-2, 0) => X2(-2, 0));
(X90(-2, 0) => X3(-2, -1));
(X91(-2, 0) => X3(-2, -1));
(X92(-1, 0) => X3(-1, 0));
(X93(-1, 0) => X3(-1, 0));
(X94(0, -1) => X3(0, 1));
(X95(-2, 0) => X3(-2, -1));
(X96(-1, 0) => X3(-1, 0))

************** current phase of 4th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (4): [
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (29): [
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X93($1, -1) => );
(X2(0, 1) /\ X94($1, 1) => );
(X2(1, 0) /\ X92(1, 0) => );
(X2(1, 0) /\ X93($1, 0) => );
(X2(1, 1) /\ X94(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 4th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
refuting (X91 $1 (-1))
refuting (X93 $1 (-1))
refuting (X93 $1 0)
proving (X91 $1 (-1))
proving (X93 $1 (-1))
proving (X93 $1 0)
refuting (X2 (-2) 0)
refuting (X2 (-1) 0)
refuting (X2 0 0)
refuting (X2 0 1)
refuting (X2 1 0)
refuting (X2 1 1)
refuting (X3 (-2) (-1))
refuting (X3 (-2) 0)
refuting (X3 (-1) 0)
refuting (X3 0 1)
refuting (X90 (-2) 0)
refuting (X91 (-2) 0)
refuting (X92 (-1) 0)
refuting (X92 1 0)
refuting (X94 0 (-1))
refuting (X94 1 0)
refuting (X95 (-2) 0)
refuting (X96 (-1) 0)
refuting (X96 1 0)
proving (X1 (-1) 0)
proving (X1 0 (-1))
proving (X1 1 0)
proving (X2 (-2) 0)
proving (X2 (-1) 0)
proving (X2 0 0)
proving (X2 0 1)
proving (X2 1 0)
proving (X2 1 1)
proving (X3 (-2) (-1))
proving (X3 (-2) 0)
proving (X3 (-1) 0)
proving (X3 0 1)
proving (X90 (-2) 0)
proving (X91 (-2) 0)
proving (X92 (-1) 0)
proving (X92 1 0)
proving (X94 0 (-1))
proving (X94 1 0)
proving (X95 (-2) 0)
proving (X96 (-1) 0)
proving (X96 1 0)
*** Example Instances obtained by Resolution:


************** current phase of 4th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (4): [
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (29): [
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X93($1, -1) => );
(X2(0, 1) /\ X94($1, 1) => );
(X2(1, 0) /\ X92(1, 0) => );
(X2(1, 0) /\ X93($1, 0) => );
(X2(1, 1) /\ X94(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 5th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (4):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
table:
FTFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (4):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
table:
FTFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (4):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
table:
FFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (4):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
table:
FTFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (5):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
table:
FTTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (3):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
table:
FTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (4):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
table:
FTFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (4):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
table:
FFTT
TFFF
FTFF
TFFF
TTFT
reduced qualifiers (4):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (3):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
table:
FTF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (8):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
table:
TTFTFFFT
TTTFTTTF
TFTTTTTT

gen constr of example:(X2(0, 1) /\ X93($1, -1) => )
constr: [#S_174] #paramvar8 < 0 \/ #paramvar9 > 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar7 < 0 \/ #paramvar34 > 0 \/ #paramvar31 + -#paramvar33 < 0
gen constr of example:(X2(1, 1) /\ X94(1, 0) => )
constr: [#S_175] #paramvar8 < 0 \/ #paramvar9 > 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar6 + #paramvar7 < 0 \/ #paramvar38 > 0 \/ #paramvar35 + #paramvar36 < 0
gen constr of example:(X3(-2, 0) => X2(-2, 0))
constr: [#S_176] #paramvar14 < 0 \/ #paramvar15 > 0 \/ #paramvar16 > 0 \/ #paramvar17 > 0 \/ #paramvar18 > 0 \/ #paramvar11 + #paramvar12 * -2 < 0 \/ #paramvar8 <= 0 /\ #paramvar9 >= 0 /\ #paramvar10 >= 0 /\ #paramvar5 + #paramvar6 * -2 >= 0
gen constr of example:(X90(-2, 0) => X3(-2, -1))
constr: [#S_177] #paramvar22 > 0 \/ #paramvar19 + #paramvar20 * -2 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + #paramvar12 * -2 + -#paramvar13 >= 0
gen constr of example:(X91(-2, 0) => X3(-2, -1))
constr: [#S_178] #paramvar26 > 0 \/ #paramvar23 + #paramvar24 * -2 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + #paramvar12 * -2 + -#paramvar13 >= 0
gen constr of example:(X95(-2, 0) => X3(-2, -1))
constr: [#S_179] #paramvar42 > 0 \/ #paramvar39 + #paramvar40 * -2 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + #paramvar12 * -2 + -#paramvar13 >= 0
gen constr of example:(X92(-1, 0) => X3(-1, 0))
constr: [#S_180] #paramvar30 > 0 \/ #paramvar27 + -#paramvar28 < 0 \/ #paramvar14 >= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + -#paramvar12 >= 0
gen constr of example:(X93(-1, 0) => X3(-1, 0))
constr: [#S_181] #paramvar34 > 0 \/ #paramvar31 + -#paramvar32 < 0 \/ #paramvar14 >= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + -#paramvar12 >= 0
gen constr of example:(X96(-1, 0) => X3(-1, 0))
constr: [#S_182] #paramvar46 > 0 \/ #paramvar43 + -#paramvar44 < 0 \/ #paramvar14 >= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + -#paramvar12 >= 0
gen constr of example:(X94(0, -1) => X3(0, 1))
constr: [#S_183] #paramvar38 > 0 \/ #paramvar35 + -#paramvar37 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 >= 0 /\ #paramvar16 <= 0 /\ #paramvar17 >= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + #paramvar13 >= 0
bounds constr: [#S_184] (if (#paramvar43 >= 0) then #paramvar43 else -#paramvar43) <= 0
bounds constr: [#S_185] (if (#paramvar44 >= 0) then #paramvar44 else -#paramvar44) <= 1
bounds constr: [#S_186] true
bounds constr: [#S_187] (if (#paramvar39 >= 0) then #paramvar39 else -#paramvar39) <= 0
bounds constr: [#S_188] (if (#paramvar40 >= 0) then #paramvar40 else -#paramvar40) <= 1
bounds constr: [#S_189] true
bounds constr: [#S_190] (if (#paramvar35 >= 0) then #paramvar35 else -#paramvar35) <= 0
bounds constr: [#S_191] (if (#paramvar36 >= 0) then #paramvar36 else -#paramvar36) + (if (#paramvar37 >= 0) then #paramvar37 else -#paramvar37) <= 1
bounds constr: [#S_192] true
bounds constr: [#S_193] (if (#paramvar31 >= 0) then #paramvar31 else -#paramvar31) <= 0
bounds constr: [#S_194] (if (#paramvar32 >= 0) then #paramvar32 else -#paramvar32) + (if (#paramvar33 >= 0) then #paramvar33 else -#paramvar33) <= 1
bounds constr: [#S_195] true
bounds constr: [#S_196] (if (#paramvar27 >= 0) then #paramvar27 else -#paramvar27) <= 0
bounds constr: [#S_197] (if (#paramvar28 >= 0) then #paramvar28 else -#paramvar28) <= 1
bounds constr: [#S_198] true
bounds constr: [#S_199] (if (#paramvar23 >= 0) then #paramvar23 else -#paramvar23) <= 0
bounds constr: [#S_200] (if (#paramvar24 >= 0) then #paramvar24 else -#paramvar24) <= 1
bounds constr: [#S_201] true
bounds constr: [#S_202] (if (#paramvar19 >= 0) then #paramvar19 else -#paramvar19) <= 0
bounds constr: [#S_203] (if (#paramvar20 >= 0) then #paramvar20 else -#paramvar20) <= 1
bounds constr: [#S_204] true
bounds constr: [#S_205] (if (#paramvar11 >= 0) then #paramvar11 else -#paramvar11) <= 0
bounds constr: [#S_206] (if (#paramvar12 >= 0) then #paramvar12 else -#paramvar12) + (if (#paramvar13 >= 0) then #paramvar13 else -#paramvar13) <= 1
bounds constr: [#S_207] true
bounds constr: [#S_208] (if (#paramvar5 >= 0) then #paramvar5 else -#paramvar5) <= 0
bounds constr: [#S_209] (if (#paramvar6 >= 0) then #paramvar6 else -#paramvar6) + (if (#paramvar7 >= 0) then #paramvar7 else -#paramvar7) <= 1
bounds constr: [#S_210] true
bounds constr: [#S_211] true
bounds constr: [#S_212] true
bounds constr: [#S_213] true
constraints generated
sat
************** current phase of 5th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ 1 + x2 != 0 /\ -x1 >= 0
X3(x1: int, x2: int) :=
  x1 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-2, 1) /\ X94(0, -1) => X1(-2, -1));
(X2(0, 1) /\ X93(-1, -1) => X1(0, -1));
(X3(0, 1) /\ X3(1, 1) => X2(1, 1));
(X90(-1, -1) => X3(-1, -2));
(X92(-1, -1) => X3(-1, -1));
(X93(-1, -1) => X3(-1, 1));
(X94(-1, -2) => X3(-1, 1));
(X95(-1, -1) => X3(-1, -1));
(X96(-1, -1) => X3(-1, 0))

************** current phase of 5th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (4): [
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (38): [
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X93(-1, -1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X93($1, -1) => );
(X2(0, 1) /\ X94($1, 1) => );
(X2(1, 0) /\ X92(1, 0) => );
(X2(1, 0) /\ X93($1, 0) => );..]

*** labeling with SAT solving
************** current phase of 5th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
refuting (X1 (-2) (-1))
  added as a negative example with: 
  add negative example(X1(-2, -1) => )
refuting (X2 (-2) 1)
refuting (X2 0 1)
refuting (X2 1 1)
refuting (X3 (-1) (-2))
refuting (X3 (-1) (-1))
refuting (X3 (-1) 0)
refuting (X3 (-1) 1)
refuting (X3 0 1)
refuting (X3 1 1)
refuting (X90 (-1) (-1))
refuting (X92 (-1) (-1))
refuting (X93 (-1) (-1))
refuting (X94 (-1) (-2))
refuting (X94 0 (-1))
refuting (X95 (-1) (-1))
refuting (X96 (-1) (-1))
proving (X1 (-2) (-1))
proving (X2 (-2) 1)
proving (X2 0 1)
proving (X2 1 1)
proving (X3 (-1) (-2))
proving (X3 (-1) (-1))
proving (X3 (-1) 0)
proving (X3 (-1) 1)
proving (X3 0 1)
proving (X3 1 1)
proving (X90 (-1) (-1))
proving (X92 (-1) (-1))
proving (X93 (-1) (-1))
proving (X94 (-1) (-2))
proving (X94 0 (-1))
proving (X95 (-1) (-1))
proving (X96 (-1) (-1))
*** Example Instances obtained by Resolution:
(X1(-2, -1) => )

************** current phase of 5th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (5): [
(X1(-2, -1) => );
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (38): [
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X93(-1, -1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X93($1, -1) => );
(X2(0, 1) /\ X94($1, 1) => );
(X2(1, 0) /\ X92(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 6th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (5):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
table:
FTFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (5):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
table:
FTFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (5):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
table:
FFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (5):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
table:
FTFFT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (6):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
table:
FTTFFT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (4):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
table:
FTFT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (4):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
table:
FTFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (8):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
table:
FFTTFFFF
TFFFFFTT
FTFFFTFF
TFFFFFFF
TTFTFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (4):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
table:
FTFT


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (9):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
table:
TTFTFFFTT
TTTFTTTFF
TFTTTTTTT

gen constr of example:(X1(-2, -1) => )
constr: [#S_214] #paramvar4 > 0 \/ #paramvar1 + #paramvar2 * -2 + -#paramvar3 < 0
gen constr of example:(X2(-2, 1) /\ X94(0, -1) => )
constr: [#S_215] #paramvar8 < 0 \/ #paramvar9 > 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar6 * -2 + #paramvar7 < 0 \/ #paramvar38 > 0 \/ #paramvar35 + -#paramvar37 < 0
gen constr of example:(X2(0, 1) /\ X93(-1, -1) => )
constr: [#S_216] #paramvar8 < 0 \/ #paramvar9 > 0 \/ #paramvar10 < 0 \/ #paramvar5 + #paramvar7 < 0 \/ #paramvar34 < 0 \/ #paramvar31 + -#paramvar32 + -#paramvar33 < 0
gen constr of example:(X3(0, 1) /\ X3(1, 1) => X2(1, 1))
constr: [#S_217] #paramvar14 > 0 \/ #paramvar15 < 0 \/ #paramvar16 > 0 \/ #paramvar17 > 0 \/ #paramvar18 > 0 \/ #paramvar11 + #paramvar12 + #paramvar13 < 0 \/ #paramvar14 > 0 \/ #paramvar15 < 0 \/ #paramvar16 > 0 \/ #paramvar17 < 0 \/ #paramvar18 < 0 \/ #paramvar11 + #paramvar13 < 0 \/ #paramvar8 >= 0 /\ #paramvar9 <= 0 /\ #paramvar10 >= 0 /\ #paramvar5 + #paramvar6 + #paramvar7 >= 0
gen constr of example:(X90(-1, -1) => X3(-1, -2))
constr: [#S_218] #paramvar22 < 0 \/ #paramvar19 + -#paramvar20 + -#paramvar21 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + -#paramvar12 + #paramvar13 * -2 >= 0
gen constr of example:(X92(-1, -1) => X3(-1, -1))
constr: [#S_219] #paramvar30 < 0 \/ #paramvar27 + -#paramvar28 + -#paramvar29 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + -#paramvar12 + -#paramvar13 >= 0
gen constr of example:(X95(-1, -1) => X3(-1, -1))
constr: [#S_220] #paramvar42 < 0 \/ #paramvar39 + -#paramvar40 + -#paramvar41 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + -#paramvar12 + -#paramvar13 >= 0
gen constr of example:(X96(-1, -1) => X3(-1, 0))
constr: [#S_221] #paramvar46 < 0 \/ #paramvar43 + -#paramvar44 + -#paramvar45 < 0 \/ #paramvar14 >= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + -#paramvar12 >= 0
gen constr of example:(X93(-1, -1) => X3(-1, 1))
constr: [#S_222] #paramvar34 < 0 \/ #paramvar31 + -#paramvar32 + -#paramvar33 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 >= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + -#paramvar12 + #paramvar13 >= 0
gen constr of example:(X94(-1, -2) => X3(-1, 1))
constr: [#S_223] #paramvar38 > 0 \/ #paramvar35 + -#paramvar36 + #paramvar37 * -2 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 >= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + -#paramvar12 + #paramvar13 >= 0
bounds constr: [#S_224] (if (#paramvar43 >= 0) then #paramvar43 else -#paramvar43) <= 0
bounds constr: [#S_225] (if (#paramvar44 >= 0) then #paramvar44 else -#paramvar44) + (if (#paramvar45 >= 0) then #paramvar45 else -#paramvar45) <= 1
bounds constr: [#S_226] true
bounds constr: [#S_227] (if (#paramvar39 >= 0) then #paramvar39 else -#paramvar39) <= 0
bounds constr: [#S_228] (if (#paramvar40 >= 0) then #paramvar40 else -#paramvar40) + (if (#paramvar41 >= 0) then #paramvar41 else -#paramvar41) <= 1
bounds constr: [#S_229] true
bounds constr: [#S_230] (if (#paramvar35 >= 0) then #paramvar35 else -#paramvar35) <= 0
bounds constr: [#S_231] (if (#paramvar36 >= 0) then #paramvar36 else -#paramvar36) + (if (#paramvar37 >= 0) then #paramvar37 else -#paramvar37) <= 1
bounds constr: [#S_232] true
bounds constr: [#S_233] (if (#paramvar31 >= 0) then #paramvar31 else -#paramvar31) <= 0
bounds constr: [#S_234] (if (#paramvar32 >= 0) then #paramvar32 else -#paramvar32) + (if (#paramvar33 >= 0) then #paramvar33 else -#paramvar33) <= 1
bounds constr: [#S_235] true
bounds constr: [#S_236] (if (#paramvar27 >= 0) then #paramvar27 else -#paramvar27) <= 0
bounds constr: [#S_237] (if (#paramvar28 >= 0) then #paramvar28 else -#paramvar28) + (if (#paramvar29 >= 0) then #paramvar29 else -#paramvar29) <= 1
bounds constr: [#S_238] true
bounds constr: [#S_239] true
bounds constr: [#S_240] true
bounds constr: [#S_241] true
bounds constr: [#S_242] (if (#paramvar19 >= 0) then #paramvar19 else -#paramvar19) <= 0
bounds constr: [#S_243] (if (#paramvar20 >= 0) then #paramvar20 else -#paramvar20) + (if (#paramvar21 >= 0) then #paramvar21 else -#paramvar21) <= 1
bounds constr: [#S_244] true
bounds constr: [#S_245] (if (#paramvar11 >= 0) then #paramvar11 else -#paramvar11) <= 0
bounds constr: [#S_246] (if (#paramvar12 >= 0) then #paramvar12 else -#paramvar12) + (if (#paramvar13 >= 0) then #paramvar13 else -#paramvar13) <= 1
bounds constr: [#S_247] true
bounds constr: [#S_248] (if (#paramvar5 >= 0) then #paramvar5 else -#paramvar5) <= 0
bounds constr: [#S_249] (if (#paramvar6 >= 0) then #paramvar6 else -#paramvar6) + (if (#paramvar7 >= 0) then #paramvar7 else -#paramvar7) <= 1
bounds constr: [#S_250] true
bounds constr: [#S_251] (if (#paramvar1 >= 0) then #paramvar1 else -#paramvar1) <= 0
bounds constr: [#S_252] (if (#paramvar2 >= 0) then #paramvar2 else -#paramvar2) + (if (#paramvar3 >= 0) then #paramvar3 else -#paramvar3) <= 1
bounds constr: [#S_253] true
constraints generated
sat
************** current phase of 6th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ 1 + x2 = 0 /\ -x1 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ -1 + -x1 + x2 = 0
X90(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X91(x1: int, x2: int) :=
  x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X96(x1: int, x2: int) :=
  -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X3(1, 2) => X2(1, 2));
(X90(1, 0) => X3(1, -1));
(X91(0, 0) => X3(0, -1));
(X92(-2, 0) => X3(-2, 0));
(X93(-2, -1) => X3(-2, 1));
(X94(0, 0) => X3(0, 1));
(X95(-3, -4) => X3(-3, -1));
(X96(0, 0) => X3(0, 0))

************** current phase of 6th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (5): [
(X1(-2, -1) => );
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (46): [
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X93(-1, -1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X93($1, -1) => );
(X2(0, 1) /\ X94($1, 1) => );
(X2(1, 0) /\ X92(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 6th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
refuting (X2 (-2) 1)
refuting (X2 1 2)
refuting (X3 (-3) (-1))
refuting (X3 (-2) 0)
refuting (X3 (-2) 1)
refuting (X3 0 (-1))
refuting (X3 0 0)
refuting (X3 0 1)
refuting (X3 1 (-1))
refuting (X3 1 2)
refuting (X90 1 0)
refuting (X91 0 0)
refuting (X92 (-2) 0)
refuting (X93 (-2) (-1))
refuting (X94 0 (-1))
refuting (X94 0 0)
refuting (X95 (-3) (-4))
refuting (X96 0 0)
proving (X1 (-2) (-1))
proving (X2 (-2) 1)
proving (X2 1 2)
proving (X3 (-3) (-1))
proving (X3 (-2) 0)
proving (X3 (-2) 1)
proving (X3 0 (-1))
proving (X3 0 0)
proving (X3 0 1)
proving (X3 1 (-1))
proving (X3 1 2)
proving (X90 1 0)
proving (X91 0 0)
proving (X92 (-2) 0)
proving (X93 (-2) (-1))
proving (X94 0 (-1))
proving (X94 0 0)
proving (X95 (-3) (-4))
proving (X96 0 0)
*** Example Instances obtained by Resolution:


************** current phase of 6th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (5): [
(X1(-2, -1) => );
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (46): [
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X93(-1, -1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );
(X2(0, 1) /\ X93($1, -1) => );
(X2(0, 1) /\ X94($1, 1) => );
(X2(1, 0) /\ X92(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 7th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (6):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
table:
FTFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (6):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
table:
FTFFTT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (5):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
table:
FFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (6):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
table:
FTFFTF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (7):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
table:
FTTFFTF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (5):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
table:
FTFTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (5):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
table:
FTFFT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (14):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
table:
FFTTFFFFFFFTFF
TFFFFFTTFTFFFF
FTFFFTFFTFTFTF
TFFFFFFFFFFFFF
TTFTFFFFFFFFFT


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (5):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
table:
FTFTF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (10):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
table:
TTFTFFFTTT
TTTFTTTFFT
TFTTTTTTTT

gen constr of example:(X3(1, 2) => X2(1, 2))
constr: [#S_254] #paramvar14 > 0 \/ #paramvar15 > 0 \/ #paramvar16 > 0 \/ #paramvar17 > 0 \/ #paramvar18 < 0 \/ #paramvar11 + #paramvar12 + #paramvar13 * 2 < 0 \/ #paramvar8 >= 0 /\ #paramvar9 >= 0 /\ #paramvar10 >= 0 /\ #paramvar5 + #paramvar6 + #paramvar7 * 2 >= 0
gen constr of example:(X95(-3, -4) => X3(-3, -1))
constr: [#S_255] #paramvar42 > 0 \/ #paramvar39 + #paramvar40 * -3 + #paramvar41 * -4 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + #paramvar12 * -3 + -#paramvar13 >= 0
gen constr of example:(X92(-2, 0) => X3(-2, 0))
constr: [#S_256] #paramvar30 > 0 \/ #paramvar27 + #paramvar28 * -2 < 0 \/ #paramvar14 >= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + #paramvar12 * -2 >= 0
gen constr of example:(X93(-2, -1) => X3(-2, 1))
constr: [#S_257] #paramvar34 > 0 \/ #paramvar31 + #paramvar32 * -2 + -#paramvar33 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 >= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + #paramvar12 * -2 + #paramvar13 >= 0
gen constr of example:(X91(0, 0) => X3(0, -1))
constr: [#S_258] #paramvar26 < 0 \/ #paramvar23 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + -#paramvar13 >= 0
gen constr of example:(X96(0, 0) => X3(0, 0))
constr: [#S_259] #paramvar46 < 0 \/ #paramvar43 < 0 \/ #paramvar14 >= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 >= 0
gen constr of example:(X94(0, 0) => X3(0, 1))
constr: [#S_260] #paramvar38 < 0 \/ #paramvar35 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 >= 0 /\ #paramvar16 <= 0 /\ #paramvar17 >= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + #paramvar13 >= 0
gen constr of example:(X90(1, 0) => X3(1, -1))
constr: [#S_261] #paramvar22 > 0 \/ #paramvar19 + #paramvar20 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + #paramvar12 + -#paramvar13 >= 0
bounds constr: [#S_262] (if (#paramvar43 >= 0) then #paramvar43 else -#paramvar43) <= 0
bounds constr: [#S_263] true
bounds constr: [#S_264] true
bounds constr: [#S_265] (if (#paramvar39 >= 0) then #paramvar39 else -#paramvar39) <= 0
bounds constr: [#S_266] (if (#paramvar40 >= 0) then #paramvar40 else -#paramvar40) + (if (#paramvar41 >= 0) then #paramvar41 else -#paramvar41) <= 1
bounds constr: [#S_267] true
bounds constr: [#S_268] (if (#paramvar35 >= 0) then #paramvar35 else -#paramvar35) <= 0
bounds constr: [#S_269] true
bounds constr: [#S_270] true
bounds constr: [#S_271] (if (#paramvar31 >= 0) then #paramvar31 else -#paramvar31) <= 0
bounds constr: [#S_272] (if (#paramvar32 >= 0) then #paramvar32 else -#paramvar32) + (if (#paramvar33 >= 0) then #paramvar33 else -#paramvar33) <= 1
bounds constr: [#S_273] true
bounds constr: [#S_274] (if (#paramvar27 >= 0) then #paramvar27 else -#paramvar27) <= 0
bounds constr: [#S_275] (if (#paramvar28 >= 0) then #paramvar28 else -#paramvar28) <= 1
bounds constr: [#S_276] true
bounds constr: [#S_277] (if (#paramvar23 >= 0) then #paramvar23 else -#paramvar23) <= 0
bounds constr: [#S_278] true
bounds constr: [#S_279] true
bounds constr: [#S_280] (if (#paramvar19 >= 0) then #paramvar19 else -#paramvar19) <= 0
bounds constr: [#S_281] (if (#paramvar20 >= 0) then #paramvar20 else -#paramvar20) <= 1
bounds constr: [#S_282] true
bounds constr: [#S_283] (if (#paramvar11 >= 0) then #paramvar11 else -#paramvar11) <= 0
bounds constr: [#S_284] (if (#paramvar12 >= 0) then #paramvar12 else -#paramvar12) + (if (#paramvar13 >= 0) then #paramvar13 else -#paramvar13) <= 1
bounds constr: [#S_285] true
bounds constr: [#S_286] (if (#paramvar5 >= 0) then #paramvar5 else -#paramvar5) <= 0
bounds constr: [#S_287] (if (#paramvar6 >= 0) then #paramvar6 else -#paramvar6) + (if (#paramvar7 >= 0) then #paramvar7 else -#paramvar7) <= 1
bounds constr: [#S_288] true
bounds constr: [#S_289] true
bounds constr: [#S_290] true
bounds constr: [#S_291] true
constraints generated
sat
************** current phase of 7th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ -x1 >= 0
X3(x1: int, x2: int) :=
  -1 + x1 + x2 != 0 /\ -x1 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x2 >= 0
X95(x1: int, x2: int) :=
  -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
( => X3(1, 0) \/ X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X2(-1, 0) /\ X92(1, 0) => X1(-1, 0));
(X2(-1, 0) /\ X93(1, 0) => X1(-1, 0));
(X2(0, 0) /\ X96(-1, -1) => X1(0, -1));
(X2(0, 0) => X1(0, 1) \/ X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X3(0, -1) => X2(0, -1));
(X91(3, 0) => X3(3, -1));
(X92(2, 0) => X3(2, 0));
(X93(2, 0) => X3(2, 0));
(X94(0, 1) => X3(0, 1));
(X95(1, 0) => X3(1, -1))

************** current phase of 7th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (5): [
(X1(-2, -1) => );
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (57): [
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(-1, -1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X93(-1, -1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 7th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
refuting (X2 (-1) 0)
refuting (X2 0 (-1))
refuting (X2 0 0)
refuting (X3 0 (-1))
refuting (X3 0 1)
refuting (X3 1 (-1))
refuting (X3 1 0)
refuting (X3 1 2)
refuting (X3 2 0)
refuting (X3 3 (-1))
refuting (X90 1 1)
refuting (X91 1 1)
refuting (X91 3 0)
refuting (X92 1 0)
refuting (X92 1 1)
refuting (X92 2 0)
refuting (X93 1 0)
refuting (X93 1 1)
refuting (X93 2 0)
refuting (X94 0 1)
refuting (X94 1 1)
refuting (X95 1 0)
refuting (X95 1 1)
refuting (X96 (-1) (-1))
refuting (X96 1 1)
proving (X2 (-1) 0)
proving (X2 0 (-1))
proving (X2 0 0)
proving (X3 0 (-1))
proving (X3 0 1)
proving (X3 1 (-1))
proving (X3 1 0)
proving (X3 1 2)
proving (X3 2 0)
proving (X3 3 (-1))
proving (X90 1 1)
proving (X91 1 1)
proving (X91 3 0)
proving (X92 1 0)
proving (X92 1 1)
proving (X92 2 0)
proving (X93 1 0)
proving (X93 1 1)
proving (X93 2 0)
proving (X94 0 1)
proving (X94 1 1)
proving (X95 1 0)
proving (X95 1 1)
proving (X96 (-1) (-1))
proving (X96 1 1)
*** Example Instances obtained by Resolution:


************** current phase of 7th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (5): [
(X1(-2, -1) => );
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (57): [
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(-1, -1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X93(-1, -1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 8th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (6):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
table:
FTFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (6):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
table:
FTFFTT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (5):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
table:
FFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (7):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
table:
FTFFTFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (9):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
table:
FTTFFTFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (5):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
table:
FTFTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (6):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
table:
FTFFTF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (17):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
table:
FFTTFFFFFFFTFFTTF
TFFFFFTTFTFFFFFFF
FTFFFTFFTFTFTFFFT
TFFFFFFFFFFFFFTFF
TTFTFFFFFFFFFTFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (6):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
table:
FTFTFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (10):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
table:
TTFTFFFTTT
TTTFTTTFFT
TFTTTTTTTT

gen constr of example:(X2(-1, 0) /\ X92(1, 0) => )
constr: [#S_292] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 + -#paramvar6 < 0 \/ #paramvar30 > 0 \/ #paramvar27 + #paramvar28 < 0
gen constr of example:(X2(-1, 0) /\ X93(1, 0) => )
constr: [#S_293] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 + -#paramvar6 < 0 \/ #paramvar34 > 0 \/ #paramvar31 + #paramvar32 < 0
gen constr of example:(X2(0, 0) /\ X96(-1, -1) => )
constr: [#S_294] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 < 0 \/ #paramvar46 < 0 \/ #paramvar43 + -#paramvar44 + -#paramvar45 < 0
gen constr of example:(X3(0, -1) => X2(0, -1))
constr: [#S_295] #paramvar14 > 0 \/ #paramvar15 > 0 \/ #paramvar16 < 0 \/ #paramvar17 > 0 \/ #paramvar18 > 0 \/ #paramvar11 + -#paramvar13 < 0 \/ #paramvar8 >= 0 /\ #paramvar9 >= 0 /\ #paramvar10 <= 0 /\ #paramvar5 + -#paramvar7 >= 0
gen constr of example:(X94(0, 1) => X3(0, 1))
constr: [#S_296] #paramvar38 > 0 \/ #paramvar35 + #paramvar37 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 >= 0 /\ #paramvar16 <= 0 /\ #paramvar17 >= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + #paramvar13 >= 0
gen constr of example:(X95(1, 0) => X3(1, -1))
constr: [#S_297] #paramvar42 > 0 \/ #paramvar39 + #paramvar40 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + #paramvar12 + -#paramvar13 >= 0
gen constr of example:(X92(2, 0) => X3(2, 0))
constr: [#S_298] #paramvar30 > 0 \/ #paramvar27 + #paramvar28 * 2 < 0 \/ #paramvar14 >= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + #paramvar12 * 2 >= 0
gen constr of example:(X93(2, 0) => X3(2, 0))
constr: [#S_299] #paramvar34 > 0 \/ #paramvar31 + #paramvar32 * 2 < 0 \/ #paramvar14 >= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + #paramvar12 * 2 >= 0
gen constr of example:(X91(3, 0) => X3(3, -1))
constr: [#S_300] #paramvar26 > 0 \/ #paramvar23 + #paramvar24 * 3 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 >= 0 /\ #paramvar17 <= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + #paramvar12 * 3 + -#paramvar13 >= 0
gen constr of example:( => X3(1, 0) \/ X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_301] #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + #paramvar12 + #paramvar13 * 2 >= 0 \/ #paramvar14 >= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 >= 0 /\ #paramvar18 <= 0 /\ #paramvar11 + #paramvar12 >= 0 \/ #paramvar22 >= 0 /\ #paramvar19 + #paramvar20 + #paramvar21 >= 0 \/ #paramvar26 >= 0 /\ #paramvar23 + #paramvar24 + #paramvar25 >= 0 \/ #paramvar30 >= 0 /\ #paramvar27 + #paramvar28 + #paramvar29 >= 0 \/ #paramvar34 >= 0 /\ #paramvar31 + #paramvar32 + #paramvar33 >= 0 \/ #paramvar38 >= 0 /\ #paramvar35 + #paramvar36 + #paramvar37 >= 0 \/ #paramvar42 >= 0 /\ #paramvar39 + #paramvar40 + #paramvar41 >= 0 \/ #paramvar46 >= 0 /\ #paramvar43 + #paramvar44 + #paramvar45 >= 0
gen constr of example:(X2(0, 0) => X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_302] #paramvar8 > 0 \/ #paramvar9 < 0 \/ #paramvar10 < 0 \/ #paramvar5 < 0 \/ #paramvar14 <= 0 /\ #paramvar15 <= 0 /\ #paramvar16 <= 0 /\ #paramvar17 <= 0 /\ #paramvar18 >= 0 /\ #paramvar11 + #paramvar12 + #paramvar13 * 2 >= 0 \/ #paramvar22 >= 0 /\ #paramvar19 + #paramvar20 + #paramvar21 >= 0 \/ #paramvar26 >= 0 /\ #paramvar23 + #paramvar24 + #paramvar25 >= 0 \/ #paramvar30 >= 0 /\ #paramvar27 + #paramvar28 + #paramvar29 >= 0 \/ #paramvar34 >= 0 /\ #paramvar31 + #paramvar32 + #paramvar33 >= 0 \/ #paramvar38 >= 0 /\ #paramvar35 + #paramvar36 + #paramvar37 >= 0 \/ #paramvar42 >= 0 /\ #paramvar39 + #paramvar40 + #paramvar41 >= 0 \/ #paramvar46 >= 0 /\ #paramvar43 + #paramvar44 + #paramvar45 >= 0
bounds constr: [#S_303] (if (#paramvar43 >= 0) then #paramvar43 else -#paramvar43) <= 0
bounds constr: [#S_304] (if (#paramvar44 >= 0) then #paramvar44 else -#paramvar44) + (if (#paramvar45 >= 0) then #paramvar45 else -#paramvar45) <= 1
bounds constr: [#S_305] true
bounds constr: [#S_306] (if (#paramvar39 >= 0) then #paramvar39 else -#paramvar39) <= 0
bounds constr: [#S_307] (if (#paramvar40 >= 0) then #paramvar40 else -#paramvar40) + (if (#paramvar41 >= 0) then #paramvar41 else -#paramvar41) <= 1
bounds constr: [#S_308] true
bounds constr: [#S_309] (if (#paramvar35 >= 0) then #paramvar35 else -#paramvar35) <= 0
bounds constr: [#S_310] (if (#paramvar36 >= 0) then #paramvar36 else -#paramvar36) + (if (#paramvar37 >= 0) then #paramvar37 else -#paramvar37) <= 1
bounds constr: [#S_311] true
bounds constr: [#S_312] (if (#paramvar31 >= 0) then #paramvar31 else -#paramvar31) <= 0
bounds constr: [#S_313] (if (#paramvar32 >= 0) then #paramvar32 else -#paramvar32) + (if (#paramvar33 >= 0) then #paramvar33 else -#paramvar33) <= 1
bounds constr: [#S_314] true
bounds constr: [#S_315] (if (#paramvar27 >= 0) then #paramvar27 else -#paramvar27) <= 0
bounds constr: [#S_316] (if (#paramvar28 >= 0) then #paramvar28 else -#paramvar28) + (if (#paramvar29 >= 0) then #paramvar29 else -#paramvar29) <= 1
bounds constr: [#S_317] true
bounds constr: [#S_318] (if (#paramvar23 >= 0) then #paramvar23 else -#paramvar23) <= 0
bounds constr: [#S_319] (if (#paramvar24 >= 0) then #paramvar24 else -#paramvar24) + (if (#paramvar25 >= 0) then #paramvar25 else -#paramvar25) <= 1
bounds constr: [#S_320] true
bounds constr: [#S_321] (if (#paramvar19 >= 0) then #paramvar19 else -#paramvar19) <= 0
bounds constr: [#S_322] (if (#paramvar20 >= 0) then #paramvar20 else -#paramvar20) + (if (#paramvar21 >= 0) then #paramvar21 else -#paramvar21) <= 1
bounds constr: [#S_323] true
bounds constr: [#S_324] (if (#paramvar11 >= 0) then #paramvar11 else -#paramvar11) <= 0
bounds constr: [#S_325] (if (#paramvar12 >= 0) then #paramvar12 else -#paramvar12) + (if (#paramvar13 >= 0) then #paramvar13 else -#paramvar13) <= 1
bounds constr: [#S_326] true
bounds constr: [#S_327] (if (#paramvar5 >= 0) then #paramvar5 else -#paramvar5) <= 0
bounds constr: [#S_328] (if (#paramvar6 >= 0) then #paramvar6 else -#paramvar6) + (if (#paramvar7 >= 0) then #paramvar7 else -#paramvar7) <= 1
bounds constr: [#S_329] true
bounds constr: [#S_330] true
bounds constr: [#S_331] true
bounds constr: [#S_332] true
constraints generated
unsat, reason:|#S_63|,|#S_66|,|#S_67|,|#S_69|,|#S_75|,|#S_78|,|#S_81|,|#S_84|,|#S_93|,|#S_103|,|#S_104|,|#S_139|,|#S_100|,|#S_107|,|#S_116|,|#S_119|,|#S_143|,|#S_145|,|#S_165|,|#S_176|,|#S_178|,|#S_180|,|#S_174|,|#S_182|,|#S_183|,|#S_206|,|#S_216|,|#S_219|,|#S_221|,|#S_256|,|#S_295|,|#S_258|,|#S_294|,|#S_259|,|#S_254|,|#S_260|,|#S_296|,|#S_298|,|#S_300|
************* increasing number_of_disj of X2***************
************* increasing upper_bound_const of X2***************
************* increasing number_of_disj of X3***************
************* increasing upper_bound_coeff of X3***************
************* increasing upper_bound_const of X3***************
************* increasing number_of_disj of X91***************
************* increasing upper_bound_const of X91***************
************* increasing number_of_disj of X92***************
************* increasing upper_bound_coeff of X92***************
************* increasing upper_bound_const of X92***************
************* increasing number_of_disj of X93***************
************* increasing upper_bound_coeff of X93***************
************* increasing upper_bound_const of X93***************
************* increasing number_of_disj of X94***************
************* increasing upper_bound_const of X94***************
************* increasing number_of_disj of X96***************
************* increasing upper_bound_coeff of X96***************
************* increasing upper_bound_const of X96***************
[X1](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X2](x1: int, x2: int)
depth: 0, #quals: 3, #terms: 0
[X3](x1: int, x2: int)
depth: 0, #quals: 5, #terms: 0
[X90](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X91](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X92](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X93](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X94](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X95](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X96](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
templates generated
solver initialized

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (7):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
table:
FTFFFT_


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (7):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
table:
FTFFTT_


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (5):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
table:
FFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (8):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
table:
FTFFTFF_


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
table:
FTTFFTFFF___


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (6):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
table:
FTFTF_


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (8):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
table:
FTFFTF__


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (19):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
table:
FFTTFFFFFFFTFFTTFFF
TFFFFFTTFTFFFFFFFTT
FTFFFTFFTFTFTFFFTFF
TFFFFFFFFFFFFFTFF__
TTFTFFFFFFFFFTFFF__


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (7):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
table:
FTFTFF_


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (11):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
table:
TTFTFFFTTTT
TTTFTTTFFTF
TFTTTTTTTTT

gen constr of example:(X1(-2, -1) => )
constr: [#S_333] #paramvar50 > 0 \/ #paramvar47 + #paramvar48 * -2 + -#paramvar49 < 0
gen constr of example:(X1(-1, 0) => )
constr: [#S_334] #paramvar50 > 0 \/ #paramvar47 + -#paramvar48 < 0
gen constr of example:(X1(0, -1) => )
constr: [#S_335] #paramvar50 > 0 \/ #paramvar47 + -#paramvar49 < 0
gen constr of example:(X1(0, 1) => )
constr: [#S_336] #paramvar50 > 0 \/ #paramvar47 + #paramvar49 < 0
gen constr of example:(X1(1, 0) => )
constr: [#S_337] #paramvar50 > 0 \/ #paramvar47 + #paramvar48 < 0
gen constr of example:(X2(-2, 1) /\ X94(0, -1) => )
constr: [#S_338] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 * -2 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 * -2 + #paramvar53 < 0) \/ (#paramvar114 > 0 \/ #paramvar111 + -#paramvar113 < 0) /\ (#paramvar110 > 0 \/ #paramvar107 + -#paramvar109 < 0)
gen constr of example:(X2(-1, 0) /\ X92(1, 0) => )
constr: [#S_339] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 < 0) \/ (#paramvar98 > 0 \/ #paramvar95 + #paramvar96 < 0) /\ (#paramvar94 > 0 \/ #paramvar91 + #paramvar92 < 0)
gen constr of example:(X2(-1, 0) /\ X93(1, 0) => )
constr: [#S_340] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 < 0) \/ (#paramvar106 > 0 \/ #paramvar103 + #paramvar104 < 0) /\ (#paramvar102 > 0 \/ #paramvar99 + #paramvar100 < 0)
gen constr of example:(X2(-1, 0) /\ X96(1, 0) => )
constr: [#S_341] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 < 0) \/ (#paramvar126 > 0 \/ #paramvar123 + #paramvar124 < 0) /\ (#paramvar122 > 0 \/ #paramvar119 + #paramvar120 < 0)
gen constr of example:(X2(0, -2) /\ X91(1, 1) => )
constr: [#S_342] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 * -2 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 * -2 < 0) \/ (#paramvar90 < 0 \/ #paramvar87 + #paramvar88 + #paramvar89 < 0) /\ (#paramvar86 < 0 \/ #paramvar83 + #paramvar84 + #paramvar85 < 0)
gen constr of example:(X2(0, -2) /\ X91($1, 1) => )
constr: [#S_343] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 * -2 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 * -2 < 0) \/ (#paramvar90 > 0 \/ #paramvar87 + #paramvar89 < 0) /\ (#paramvar86 > 0 \/ #paramvar83 + #paramvar85 < 0)
gen constr of example:(X2(0, -1) /\ X93(1, 1) => )
constr: [#S_344] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + -#paramvar53 < 0) \/ (#paramvar106 < 0 \/ #paramvar103 + #paramvar104 + #paramvar105 < 0) /\ (#paramvar102 < 0 \/ #paramvar99 + #paramvar100 + #paramvar101 < 0)
gen constr of example:(X2(0, -1) /\ X95(1, 1) => )
constr: [#S_345] #paramvar118 < 0 \/ #paramvar115 + #paramvar116 + #paramvar117 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + -#paramvar53 < 0)
gen constr of example:(X2(0, -1) /\ X93($1, 1) => )
constr: [#S_346] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + -#paramvar53 < 0) \/ (#paramvar106 > 0 \/ #paramvar103 + #paramvar105 < 0) /\ (#paramvar102 > 0 \/ #paramvar99 + #paramvar101 < 0)
gen constr of example:(X2(0, -1) /\ X95($1, 1) => )
constr: [#S_347] #paramvar118 > 0 \/ #paramvar115 + #paramvar117 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + -#paramvar53 < 0)
gen constr of example:(X2(0, 0) /\ X90(1, 1) => )
constr: [#S_348] #paramvar82 < 0 \/ #paramvar79 + #paramvar80 + #paramvar81 < 0 \/ (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 < 0)
gen constr of example:(X2(0, 0) /\ X96(-1, -1) => )
constr: [#S_349] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 < 0) \/ (#paramvar126 < 0 \/ #paramvar123 + -#paramvar124 + -#paramvar125 < 0) /\ (#paramvar122 < 0 \/ #paramvar119 + -#paramvar120 + -#paramvar121 < 0)
gen constr of example:(X2(0, 0) /\ X96(1, 1) => )
constr: [#S_350] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 < 0) \/ (#paramvar126 < 0 \/ #paramvar123 + #paramvar124 + #paramvar125 < 0) /\ (#paramvar122 < 0 \/ #paramvar119 + #paramvar120 + #paramvar121 < 0)
gen constr of example:(X2(0, 0) /\ X90($1, 1) => )
constr: [#S_351] #paramvar82 > 0 \/ #paramvar79 + #paramvar81 < 0 \/ (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 < 0)
gen constr of example:(X2(0, 0) /\ X91($1, -1) => )
constr: [#S_352] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 < 0) \/ (#paramvar90 > 0 \/ #paramvar87 + -#paramvar89 < 0) /\ (#paramvar86 > 0 \/ #paramvar83 + -#paramvar85 < 0)
gen constr of example:(X2(0, 0) /\ X96($1, 1) => )
constr: [#S_353] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 < 0) \/ (#paramvar126 > 0 \/ #paramvar123 + #paramvar125 < 0) /\ (#paramvar122 > 0 \/ #paramvar119 + #paramvar121 < 0)
gen constr of example:(X2(0, 1) /\ X92(1, 1) => )
constr: [#S_354] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 < 0) \/ (#paramvar98 < 0 \/ #paramvar95 + #paramvar96 + #paramvar97 < 0) /\ (#paramvar94 < 0 \/ #paramvar91 + #paramvar92 + #paramvar93 < 0)
gen constr of example:(X2(0, 1) /\ X93(-1, -1) => )
constr: [#S_355] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 < 0) \/ (#paramvar106 < 0 \/ #paramvar103 + -#paramvar104 + -#paramvar105 < 0) /\ (#paramvar102 < 0 \/ #paramvar99 + -#paramvar100 + -#paramvar101 < 0)
gen constr of example:(X2(0, 1) /\ X94(1, 1) => )
constr: [#S_356] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 < 0) \/ (#paramvar114 < 0 \/ #paramvar111 + #paramvar112 + #paramvar113 < 0) /\ (#paramvar110 < 0 \/ #paramvar107 + #paramvar108 + #paramvar109 < 0)
gen constr of example:(X2(0, 1) /\ X92($1, 1) => )
constr: [#S_357] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 < 0) \/ (#paramvar98 > 0 \/ #paramvar95 + #paramvar97 < 0) /\ (#paramvar94 > 0 \/ #paramvar91 + #paramvar93 < 0)
gen constr of example:(X2(0, 1) /\ X93($1, -1) => )
constr: [#S_358] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 < 0) \/ (#paramvar106 > 0 \/ #paramvar103 + -#paramvar105 < 0) /\ (#paramvar102 > 0 \/ #paramvar99 + -#paramvar101 < 0)
gen constr of example:(X2(0, 1) /\ X94($1, 1) => )
constr: [#S_359] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 < 0) \/ (#paramvar114 > 0 \/ #paramvar111 + #paramvar113 < 0) /\ (#paramvar110 > 0 \/ #paramvar107 + #paramvar109 < 0)
gen constr of example:(X2(1, 0) /\ X92(1, 0) => )
constr: [#S_360] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 < 0) \/ (#paramvar98 > 0 \/ #paramvar95 + #paramvar96 < 0) /\ (#paramvar94 > 0 \/ #paramvar91 + #paramvar92 < 0)
gen constr of example:(X2(1, 0) /\ X93($1, 0) => )
constr: [#S_361] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 < 0) \/ (#paramvar106 < 0 \/ #paramvar103 < 0) /\ (#paramvar102 < 0 \/ #paramvar99 < 0)
gen constr of example:(X2(1, 1) /\ X94(1, 0) => )
constr: [#S_362] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 + #paramvar53 < 0) \/ (#paramvar114 > 0 \/ #paramvar111 + #paramvar112 < 0) /\ (#paramvar110 > 0 \/ #paramvar107 + #paramvar108 < 0)
gen constr of example:(X3(-2, 0) => X2(-2, 0))
constr: [#S_363] (#paramvar74 < 0 \/ #paramvar75 > 0 \/ #paramvar76 > 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar72 * -2 < 0) /\ (#paramvar66 < 0 \/ #paramvar67 > 0 \/ #paramvar68 > 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar64 * -2 < 0) \/ #paramvar60 <= 0 /\ #paramvar61 >= 0 /\ #paramvar62 >= 0 /\ #paramvar57 + #paramvar58 * -2 >= 0 \/ #paramvar54 <= 0 /\ #paramvar55 >= 0 /\ #paramvar56 >= 0 /\ #paramvar51 + #paramvar52 * -2 >= 0
gen constr of example:(X3(0, -1) => X2(0, -1))
constr: [#S_364] (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 < 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + -#paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 < 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + -#paramvar65 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 >= 0 /\ #paramvar62 <= 0 /\ #paramvar57 + -#paramvar59 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 >= 0 /\ #paramvar56 <= 0 /\ #paramvar51 + -#paramvar53 >= 0
gen constr of example:(X3(0, 1) /\ X3(1, 1) => X2(1, 1))
constr: [#S_365] (#paramvar74 > 0 \/ #paramvar75 < 0 \/ #paramvar76 > 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar72 + #paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 < 0 \/ #paramvar68 > 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar64 + #paramvar65 < 0) \/ (#paramvar74 > 0 \/ #paramvar75 < 0 \/ #paramvar76 > 0 \/ #paramvar77 < 0 \/ #paramvar78 < 0 \/ #paramvar71 + #paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 < 0 \/ #paramvar68 > 0 \/ #paramvar69 < 0 \/ #paramvar70 < 0 \/ #paramvar63 + #paramvar65 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 <= 0 /\ #paramvar62 >= 0 /\ #paramvar57 + #paramvar58 + #paramvar59 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 <= 0 /\ #paramvar56 >= 0 /\ #paramvar51 + #paramvar52 + #paramvar53 >= 0
gen constr of example:(X3(1, 2) => X2(1, 2))
constr: [#S_366] (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 > 0 \/ #paramvar77 > 0 \/ #paramvar78 < 0 \/ #paramvar71 + #paramvar72 + #paramvar73 * 2 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 > 0 \/ #paramvar69 > 0 \/ #paramvar70 < 0 \/ #paramvar63 + #paramvar64 + #paramvar65 * 2 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 >= 0 /\ #paramvar62 >= 0 /\ #paramvar57 + #paramvar58 + #paramvar59 * 2 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 >= 0 /\ #paramvar56 >= 0 /\ #paramvar51 + #paramvar52 + #paramvar53 * 2 >= 0
gen constr of example:(X95(-3, -4) => X3(-3, -1))
constr: [#S_367] #paramvar118 > 0 \/ #paramvar115 + #paramvar116 * -3 + #paramvar117 * -4 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * -3 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * -3 + -#paramvar65 >= 0
gen constr of example:(X90(-2, 0) => X3(-2, -1))
constr: [#S_368] #paramvar82 > 0 \/ #paramvar79 + #paramvar80 * -2 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar72 * -2 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar64 * -2 + -#paramvar65 >= 0
gen constr of example:(X91(-2, 0) => X3(-2, -1))
constr: [#S_369] (#paramvar90 > 0 \/ #paramvar87 + #paramvar88 * -2 < 0) /\ (#paramvar86 > 0 \/ #paramvar83 + #paramvar84 * -2 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar72 * -2 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar64 * -2 + -#paramvar65 >= 0
gen constr of example:(X95(-2, 0) => X3(-2, -1))
constr: [#S_370] #paramvar118 > 0 \/ #paramvar115 + #paramvar116 * -2 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar72 * -2 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar64 * -2 + -#paramvar65 >= 0
gen constr of example:(X92(-2, 0) => X3(-2, 0))
constr: [#S_371] (#paramvar98 > 0 \/ #paramvar95 + #paramvar96 * -2 < 0) /\ (#paramvar94 > 0 \/ #paramvar91 + #paramvar92 * -2 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * -2 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * -2 >= 0
gen constr of example:(X93(-2, -1) => X3(-2, 1))
constr: [#S_372] (#paramvar106 > 0 \/ #paramvar103 + #paramvar104 * -2 + -#paramvar105 < 0) /\ (#paramvar102 > 0 \/ #paramvar99 + #paramvar100 * -2 + -#paramvar101 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * -2 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * -2 + #paramvar65 >= 0
gen constr of example:(X90(-1, -1) => X3(-1, -2))
constr: [#S_373] #paramvar82 < 0 \/ #paramvar79 + -#paramvar80 + -#paramvar81 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar72 + #paramvar73 * -2 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar64 + #paramvar65 * -2 >= 0
gen constr of example:(X92(-1, -1) => X3(-1, -1))
constr: [#S_374] (#paramvar98 < 0 \/ #paramvar95 + -#paramvar96 + -#paramvar97 < 0) /\ (#paramvar94 < 0 \/ #paramvar91 + -#paramvar92 + -#paramvar93 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar72 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar64 + -#paramvar65 >= 0
gen constr of example:(X95(-1, -1) => X3(-1, -1))
constr: [#S_375] #paramvar118 < 0 \/ #paramvar115 + -#paramvar116 + -#paramvar117 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar72 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar64 + -#paramvar65 >= 0
gen constr of example:(X92(-1, 0) => X3(-1, 0))
constr: [#S_376] (#paramvar98 > 0 \/ #paramvar95 + -#paramvar96 < 0) /\ (#paramvar94 > 0 \/ #paramvar91 + -#paramvar92 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + -#paramvar72 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + -#paramvar64 >= 0
gen constr of example:(X93(-1, 0) => X3(-1, 0))
constr: [#S_377] (#paramvar106 > 0 \/ #paramvar103 + -#paramvar104 < 0) /\ (#paramvar102 > 0 \/ #paramvar99 + -#paramvar100 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + -#paramvar72 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + -#paramvar64 >= 0
gen constr of example:(X96(-1, -1) => X3(-1, 0))
constr: [#S_378] (#paramvar126 < 0 \/ #paramvar123 + -#paramvar124 + -#paramvar125 < 0) /\ (#paramvar122 < 0 \/ #paramvar119 + -#paramvar120 + -#paramvar121 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + -#paramvar72 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + -#paramvar64 >= 0
gen constr of example:(X96(-1, 0) => X3(-1, 0))
constr: [#S_379] (#paramvar126 > 0 \/ #paramvar123 + -#paramvar124 < 0) /\ (#paramvar122 > 0 \/ #paramvar119 + -#paramvar120 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + -#paramvar72 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + -#paramvar64 >= 0
gen constr of example:(X93(-1, -1) => X3(-1, 1))
constr: [#S_380] (#paramvar106 < 0 \/ #paramvar103 + -#paramvar104 + -#paramvar105 < 0) /\ (#paramvar102 < 0 \/ #paramvar99 + -#paramvar100 + -#paramvar101 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar72 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar64 + #paramvar65 >= 0
gen constr of example:(X94(-1, -2) => X3(-1, 1))
constr: [#S_381] (#paramvar114 > 0 \/ #paramvar111 + -#paramvar112 + #paramvar113 * -2 < 0) /\ (#paramvar110 > 0 \/ #paramvar107 + -#paramvar108 + #paramvar109 * -2 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar72 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar64 + #paramvar65 >= 0
gen constr of example:(X91(0, 0) => X3(0, -1))
constr: [#S_382] (#paramvar90 < 0 \/ #paramvar87 < 0) /\ (#paramvar86 < 0 \/ #paramvar83 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar65 >= 0
gen constr of example:(X96(0, 0) => X3(0, 0))
constr: [#S_383] (#paramvar126 < 0 \/ #paramvar123 < 0) /\ (#paramvar122 < 0 \/ #paramvar119 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 >= 0
gen constr of example:(X94(0, -1) => X3(0, 1))
constr: [#S_384] (#paramvar114 > 0 \/ #paramvar111 + -#paramvar113 < 0) /\ (#paramvar110 > 0 \/ #paramvar107 + -#paramvar109 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 >= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 >= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar65 >= 0
gen constr of example:(X94(0, 0) => X3(0, 1))
constr: [#S_385] (#paramvar114 < 0 \/ #paramvar111 < 0) /\ (#paramvar110 < 0 \/ #paramvar107 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 >= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 >= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar65 >= 0
gen constr of example:(X94(0, 1) => X3(0, 1))
constr: [#S_386] (#paramvar114 > 0 \/ #paramvar111 + #paramvar113 < 0) /\ (#paramvar110 > 0 \/ #paramvar107 + #paramvar109 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 >= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 >= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar65 >= 0
gen constr of example:(X90(1, 0) => X3(1, -1))
constr: [#S_387] #paramvar82 > 0 \/ #paramvar79 + #paramvar80 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 + -#paramvar65 >= 0
gen constr of example:(X95(1, 0) => X3(1, -1))
constr: [#S_388] #paramvar118 > 0 \/ #paramvar115 + #paramvar116 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 + -#paramvar65 >= 0
gen constr of example:(X92(2, 0) => X3(2, 0))
constr: [#S_389] (#paramvar98 > 0 \/ #paramvar95 + #paramvar96 * 2 < 0) /\ (#paramvar94 > 0 \/ #paramvar91 + #paramvar92 * 2 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * 2 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * 2 >= 0
gen constr of example:(X93(2, 0) => X3(2, 0))
constr: [#S_390] (#paramvar106 > 0 \/ #paramvar103 + #paramvar104 * 2 < 0) /\ (#paramvar102 > 0 \/ #paramvar99 + #paramvar100 * 2 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * 2 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * 2 >= 0
gen constr of example:(X91(3, 0) => X3(3, -1))
constr: [#S_391] (#paramvar90 > 0 \/ #paramvar87 + #paramvar88 * 3 < 0) /\ (#paramvar86 > 0 \/ #paramvar83 + #paramvar84 * 3 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * 3 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * 3 + -#paramvar65 >= 0
gen constr of example:(X3($1, 1) /\ X3($2, 1) => X2($1, 1))
constr: [#S_392] (#paramvar74 > 0 \/ #paramvar75 < 0 \/ #paramvar76 > 0 \/ #paramvar77 < 0 \/ #paramvar78 < 0 \/ #paramvar71 + #paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 < 0 \/ #paramvar68 > 0 \/ #paramvar69 < 0 \/ #paramvar70 < 0 \/ #paramvar63 + #paramvar65 < 0) \/ (#paramvar74 > 0 \/ #paramvar75 < 0 \/ #paramvar76 > 0 \/ #paramvar77 < 0 \/ #paramvar78 < 0 \/ #paramvar71 + #paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 < 0 \/ #paramvar68 > 0 \/ #paramvar69 < 0 \/ #paramvar70 < 0 \/ #paramvar63 + #paramvar65 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 <= 0 /\ #paramvar62 >= 0 /\ #paramvar57 + #paramvar59 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 <= 0 /\ #paramvar56 >= 0 /\ #paramvar51 + #paramvar53 >= 0
gen constr of example:( => X3(1, 0) \/ X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_393] #paramvar118 >= 0 /\ #paramvar115 + #paramvar116 + #paramvar117 >= 0 \/ #paramvar82 >= 0 /\ #paramvar79 + #paramvar80 + #paramvar81 >= 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar72 + #paramvar73 * 2 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar64 + #paramvar65 * 2 >= 0 \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 >= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 >= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 >= 0 \/ #paramvar106 >= 0 /\ #paramvar103 + #paramvar104 + #paramvar105 >= 0 \/ #paramvar102 >= 0 /\ #paramvar99 + #paramvar100 + #paramvar101 >= 0 \/ #paramvar114 >= 0 /\ #paramvar111 + #paramvar112 + #paramvar113 >= 0 \/ #paramvar110 >= 0 /\ #paramvar107 + #paramvar108 + #paramvar109 >= 0 \/ #paramvar126 >= 0 /\ #paramvar123 + #paramvar124 + #paramvar125 >= 0 \/ #paramvar122 >= 0 /\ #paramvar119 + #paramvar120 + #paramvar121 >= 0 \/ #paramvar90 >= 0 /\ #paramvar87 + #paramvar88 + #paramvar89 >= 0 \/ #paramvar86 >= 0 /\ #paramvar83 + #paramvar84 + #paramvar85 >= 0 \/ #paramvar98 >= 0 /\ #paramvar95 + #paramvar96 + #paramvar97 >= 0 \/ #paramvar94 >= 0 /\ #paramvar91 + #paramvar92 + #paramvar93 >= 0
gen constr of example:(X2(0, 0) => X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_394] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 < 0) \/ #paramvar118 >= 0 /\ #paramvar115 + #paramvar116 + #paramvar117 >= 0 \/ #paramvar82 >= 0 /\ #paramvar79 + #paramvar80 + #paramvar81 >= 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar72 + #paramvar73 * 2 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar64 + #paramvar65 * 2 >= 0 \/ #paramvar106 >= 0 /\ #paramvar103 + #paramvar104 + #paramvar105 >= 0 \/ #paramvar102 >= 0 /\ #paramvar99 + #paramvar100 + #paramvar101 >= 0 \/ #paramvar114 >= 0 /\ #paramvar111 + #paramvar112 + #paramvar113 >= 0 \/ #paramvar110 >= 0 /\ #paramvar107 + #paramvar108 + #paramvar109 >= 0 \/ #paramvar126 >= 0 /\ #paramvar123 + #paramvar124 + #paramvar125 >= 0 \/ #paramvar122 >= 0 /\ #paramvar119 + #paramvar120 + #paramvar121 >= 0 \/ #paramvar90 >= 0 /\ #paramvar87 + #paramvar88 + #paramvar89 >= 0 \/ #paramvar86 >= 0 /\ #paramvar83 + #paramvar84 + #paramvar85 >= 0 \/ #paramvar98 >= 0 /\ #paramvar95 + #paramvar96 + #paramvar97 >= 0 \/ #paramvar94 >= 0 /\ #paramvar91 + #paramvar92 + #paramvar93 >= 0
bounds constr: [#S_395] (if (#paramvar123 >= 0) then #paramvar123 else -#paramvar123) <= 1 /\ (if (#paramvar119 >= 0) then #paramvar119 else -#paramvar119) <= 1
bounds constr: [#S_396] (if (#paramvar124 >= 0) then #paramvar124 else -#paramvar124) + (if (#paramvar125 >= 0) then #paramvar125 else -#paramvar125) <= 2 /\ (if (#paramvar120 >= 0) then #paramvar120 else -#paramvar120) + (if (#paramvar121 >= 0) then #paramvar121 else -#paramvar121) <= 2
bounds constr: [#S_397] true
bounds constr: [#S_398] (if (#paramvar115 >= 0) then #paramvar115 else -#paramvar115) <= 0
bounds constr: [#S_399] (if (#paramvar116 >= 0) then #paramvar116 else -#paramvar116) + (if (#paramvar117 >= 0) then #paramvar117 else -#paramvar117) <= 1
bounds constr: [#S_400] true
bounds constr: [#S_401] (if (#paramvar111 >= 0) then #paramvar111 else -#paramvar111) <= 1 /\ (if (#paramvar107 >= 0) then #paramvar107 else -#paramvar107) <= 1
bounds constr: [#S_402] (if (#paramvar112 >= 0) then #paramvar112 else -#paramvar112) + (if (#paramvar113 >= 0) then #paramvar113 else -#paramvar113) <= 1 /\ (if (#paramvar108 >= 0) then #paramvar108 else -#paramvar108) + (if (#paramvar109 >= 0) then #paramvar109 else -#paramvar109) <= 1
bounds constr: [#S_403] true
bounds constr: [#S_404] (if (#paramvar103 >= 0) then #paramvar103 else -#paramvar103) <= 1 /\ (if (#paramvar99 >= 0) then #paramvar99 else -#paramvar99) <= 1
bounds constr: [#S_405] (if (#paramvar104 >= 0) then #paramvar104 else -#paramvar104) + (if (#paramvar105 >= 0) then #paramvar105 else -#paramvar105) <= 2 /\ (if (#paramvar100 >= 0) then #paramvar100 else -#paramvar100) + (if (#paramvar101 >= 0) then #paramvar101 else -#paramvar101) <= 2
bounds constr: [#S_406] true
bounds constr: [#S_407] (if (#paramvar95 >= 0) then #paramvar95 else -#paramvar95) <= 1 /\ (if (#paramvar91 >= 0) then #paramvar91 else -#paramvar91) <= 1
bounds constr: [#S_408] (if (#paramvar96 >= 0) then #paramvar96 else -#paramvar96) + (if (#paramvar97 >= 0) then #paramvar97 else -#paramvar97) <= 2 /\ (if (#paramvar92 >= 0) then #paramvar92 else -#paramvar92) + (if (#paramvar93 >= 0) then #paramvar93 else -#paramvar93) <= 2
bounds constr: [#S_409] true
bounds constr: [#S_410] (if (#paramvar87 >= 0) then #paramvar87 else -#paramvar87) <= 1 /\ (if (#paramvar83 >= 0) then #paramvar83 else -#paramvar83) <= 1
bounds constr: [#S_411] (if (#paramvar88 >= 0) then #paramvar88 else -#paramvar88) + (if (#paramvar89 >= 0) then #paramvar89 else -#paramvar89) <= 1 /\ (if (#paramvar84 >= 0) then #paramvar84 else -#paramvar84) + (if (#paramvar85 >= 0) then #paramvar85 else -#paramvar85) <= 1
bounds constr: [#S_412] true
bounds constr: [#S_413] (if (#paramvar79 >= 0) then #paramvar79 else -#paramvar79) <= 0
bounds constr: [#S_414] (if (#paramvar80 >= 0) then #paramvar80 else -#paramvar80) + (if (#paramvar81 >= 0) then #paramvar81 else -#paramvar81) <= 1
bounds constr: [#S_415] true
bounds constr: [#S_416] (if (#paramvar71 >= 0) then #paramvar71 else -#paramvar71) <= 1 /\ (if (#paramvar63 >= 0) then #paramvar63 else -#paramvar63) <= 1
bounds constr: [#S_417] (if (#paramvar72 >= 0) then #paramvar72 else -#paramvar72) + (if (#paramvar73 >= 0) then #paramvar73 else -#paramvar73) <= 2 /\ (if (#paramvar64 >= 0) then #paramvar64 else -#paramvar64) + (if (#paramvar65 >= 0) then #paramvar65 else -#paramvar65) <= 2
bounds constr: [#S_418] true
bounds constr: [#S_419] (if (#paramvar57 >= 0) then #paramvar57 else -#paramvar57) <= 1 /\ (if (#paramvar51 >= 0) then #paramvar51 else -#paramvar51) <= 1
bounds constr: [#S_420] (if (#paramvar58 >= 0) then #paramvar58 else -#paramvar58) + (if (#paramvar59 >= 0) then #paramvar59 else -#paramvar59) <= 1 /\ (if (#paramvar52 >= 0) then #paramvar52 else -#paramvar52) + (if (#paramvar53 >= 0) then #paramvar53 else -#paramvar53) <= 1
bounds constr: [#S_421] true
bounds constr: [#S_422] (if (#paramvar47 >= 0) then #paramvar47 else -#paramvar47) <= 0
bounds constr: [#S_423] (if (#paramvar48 >= 0) then #paramvar48 else -#paramvar48) + (if (#paramvar49 >= 0) then #paramvar49 else -#paramvar49) <= 1
bounds constr: [#S_424] true
constraints generated
sat
************** current phase of 8th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x1 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ 1 + x2 != 0 /\ x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ x1 + x2 >= 0 \/ -1 + x2 != 0 /\ x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x1 >= 0 \/ x1 + -x2 != 0 /\ x1 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x2 >= 0 \/ x1 + -x2 = 0 /\ x2 >= 0
X93(x1: int, x2: int) :=
  x1 >= 0 \/ 2 * x1 >= 0
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  x1 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 2 * x1 >= 0 \/ x1 + -x2 != 0 /\ x1 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 2) /\ X90(0, 3) => X1(-1, 3));
(X2(-1, 2) /\ X92(2, 2) => X1(-1, 2));
(X2(-1, 3) => X1(-1, -2) \/ X3(-2, -1) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2));
(X2(-3, 2) /\ X93(0, -2) => X1(-3, -2));
(X2(-4, 2) /\ X91(0, -3) => X1(-4, -3));
(X3(0, 0) => X2(0, 0));
(X90(0, 0) => X3(0, -1));
(X91(0, -2) => X3(0, 1));
(X92(1, 1) => X3(1, 1));
(X93(0, 1) => X3(0, -1));
(X95(0, $1) => X3(0, -1))

************** current phase of 8th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (5): [
(X1(-2, -1) => );
(X1(-1, 0) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (68): [
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(-1, -1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );
(X2(0, 1) /\ X92(1, 1) => );
(X2(0, 1) /\ X93(-1, -1) => );
(X2(0, 1) /\ X94(1, 1) => );
(X2(0, 1) /\ X92($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 8th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
refuting (X95 0 $1)
proving (X95 0 $1)
refuting (X1 (-4) (-3))
  added as a negative example with: 
  add negative example(X1(-4, -3) => )
refuting (X1 (-3) (-2))
  added as a negative example with: 
  add negative example(X1(-3, -2) => )
refuting (X1 (-1) (-2))
  added as a negative example with: 
  add negative example(X1(-1, -2) => )
refuting (X1 (-1) 2)
  added as a negative example with: 
  add negative example(X1(-1, 2) => )
refuting (X1 (-1) 3)
  added as a negative example with: 
  add negative example(X1(-1, 3) => )
refuting (X2 (-4) 2)
refuting (X2 (-3) 2)
refuting (X2 (-1) 2)
refuting (X2 (-1) 3)
refuting (X2 0 0)
refuting (X3 (-2) (-1))
refuting (X3 0 (-1))
refuting (X3 0 0)
refuting (X3 0 1)
refuting (X3 1 1)
refuting (X90 (-2) (-2))
refuting (X90 0 0)
refuting (X90 0 3)
refuting (X91 (-2) (-2))
refuting (X91 0 (-3))
refuting (X91 0 (-2))
refuting (X92 (-2) (-2))
refuting (X92 1 1)
refuting (X92 2 2)
refuting (X93 (-2) (-2))
refuting (X93 0 (-2))
refuting (X93 0 1)
refuting (X94 (-2) (-2))
refuting (X95 (-2) (-2))
refuting (X96 (-2) (-2))
proving (X1 (-4) (-3))
proving (X1 (-3) (-2))
proving (X1 (-1) (-2))
proving (X1 (-1) 2)
proving (X1 (-1) 3)
proving (X2 (-4) 2)
proving (X2 (-3) 2)
proving (X2 (-1) 2)
proving (X2 (-1) 3)
proving (X2 0 0)
proving (X3 (-2) (-1))
proving (X3 0 (-1))
proving (X3 0 0)
proving (X3 0 1)
proving (X3 1 1)
proving (X90 (-2) (-2))
proving (X90 0 0)
proving (X90 0 3)
proving (X91 (-2) (-2))
proving (X91 0 (-3))
proving (X91 0 (-2))
proving (X92 (-2) (-2))
proving (X92 1 1)
proving (X92 2 2)
proving (X93 (-2) (-2))
proving (X93 0 (-2))
proving (X93 0 1)
proving (X94 (-2) (-2))
proving (X95 (-2) (-2))
proving (X96 (-2) (-2))
*** Example Instances obtained by Resolution:
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-1, -2) => );
(X1(-1, 2) => );
(X1(-1, 3) => )

************** current phase of 8th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (10): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (68): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(-1, -1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );
(X2(0, 0) /\ X91($1, -1) => );
(X2(0, 0) /\ X96($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 9th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (8):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
table:
FTFFFT_T


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (8):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
table:
FTFFTT_T


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (10):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
table:
FFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
table:
FTFFTFF_TT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
table:
FTTFFTFFF___TF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (9):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
table:
FTFTF_TTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
table:
FTFFTF__TFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (19):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
table:
FFTTFFFFFFFTFFTTFFF
TFFFFFTTFTFFFFFFFTT
FTFFFTFFTFTFTFFFTFF
TFFFFFFFFFFFFFTFF__
TTFTFFFFFFFFFTFFF__


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (9):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
table:
FTFTFF_TT


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (15):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
table:
TTFTFFFTTTTTTTT
TTTFTTTFFTFTTTT
TFTTTTTTTTTTTTT

gen constr of example:(X1(-4, -3) => )
constr: [#S_425] #paramvar50 > 0 \/ #paramvar47 + #paramvar48 * -4 + #paramvar49 * -3 < 0
gen constr of example:(X1(-3, -2) => )
constr: [#S_426] #paramvar50 > 0 \/ #paramvar47 + #paramvar48 * -3 + #paramvar49 * -2 < 0
gen constr of example:(X1(-1, -2) => )
constr: [#S_427] #paramvar50 > 0 \/ #paramvar47 + -#paramvar48 + #paramvar49 * -2 < 0
gen constr of example:(X1(-1, 2) => )
constr: [#S_428] #paramvar50 > 0 \/ #paramvar47 + -#paramvar48 + #paramvar49 * 2 < 0
gen constr of example:(X1(-1, 3) => )
constr: [#S_429] #paramvar50 > 0 \/ #paramvar47 + -#paramvar48 + #paramvar49 * 3 < 0
gen constr of example:(X2(-4, 2) /\ X91(0, -3) => )
constr: [#S_430] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 * -4 + #paramvar59 * 2 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 * -4 + #paramvar53 * 2 < 0) \/ (#paramvar90 > 0 \/ #paramvar87 + #paramvar89 * -3 < 0) /\ (#paramvar86 > 0 \/ #paramvar83 + #paramvar85 * -3 < 0)
gen constr of example:(X2(-3, 2) /\ X93(0, -2) => )
constr: [#S_431] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 * -3 + #paramvar59 * 2 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 * -3 + #paramvar53 * 2 < 0) \/ (#paramvar106 > 0 \/ #paramvar103 + #paramvar105 * -2 < 0) /\ (#paramvar102 > 0 \/ #paramvar99 + #paramvar101 * -2 < 0)
gen constr of example:(X2(-1, 2) /\ X90(0, 3) => )
constr: [#S_432] #paramvar82 > 0 \/ #paramvar79 + #paramvar81 * 3 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 + #paramvar59 * 2 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 + #paramvar53 * 2 < 0)
gen constr of example:(X2(-1, 2) /\ X92(2, 2) => )
constr: [#S_433] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 + #paramvar59 * 2 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 + #paramvar53 * 2 < 0) \/ (#paramvar98 < 0 \/ #paramvar95 + #paramvar96 * 2 + #paramvar97 * 2 < 0) /\ (#paramvar94 < 0 \/ #paramvar91 + #paramvar92 * 2 + #paramvar93 * 2 < 0)
gen constr of example:(X3(0, 0) => X2(0, 0))
constr: [#S_434] (#paramvar74 < 0 \/ #paramvar75 > 0 \/ #paramvar76 > 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 < 0) /\ (#paramvar66 < 0 \/ #paramvar67 > 0 \/ #paramvar68 > 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 < 0) \/ #paramvar60 <= 0 /\ #paramvar61 >= 0 /\ #paramvar62 >= 0 /\ #paramvar57 >= 0 \/ #paramvar54 <= 0 /\ #paramvar55 >= 0 /\ #paramvar56 >= 0 /\ #paramvar51 >= 0
gen constr of example:(X90(0, 0) => X3(0, -1))
constr: [#S_435] #paramvar82 < 0 \/ #paramvar79 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar65 >= 0
gen constr of example:(X93(0, 1) => X3(0, -1))
constr: [#S_436] (#paramvar106 > 0 \/ #paramvar103 + #paramvar105 < 0) /\ (#paramvar102 > 0 \/ #paramvar99 + #paramvar101 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar65 >= 0
gen constr of example:(X95(0, $1) => X3(0, -1))
constr: [#S_437] #paramvar118 < 0 \/ #paramvar115 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar65 >= 0
gen constr of example:(X91(0, -2) => X3(0, 1))
constr: [#S_438] (#paramvar90 > 0 \/ #paramvar87 + #paramvar89 * -2 < 0) /\ (#paramvar86 > 0 \/ #paramvar83 + #paramvar85 * -2 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 >= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 >= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar65 >= 0
gen constr of example:(X92(1, 1) => X3(1, 1))
constr: [#S_439] (#paramvar98 < 0 \/ #paramvar95 + #paramvar96 + #paramvar97 < 0) /\ (#paramvar94 < 0 \/ #paramvar91 + #paramvar92 + #paramvar93 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 + #paramvar65 >= 0
gen constr of example:(X2(-1, 3) => X3(-2, -1) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_440] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 + #paramvar59 * 3 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 + #paramvar53 * 3 < 0) \/ #paramvar118 >= 0 /\ #paramvar115 + #paramvar116 * -2 + #paramvar117 * -2 >= 0 \/ #paramvar82 >= 0 /\ #paramvar79 + #paramvar80 * -2 + #paramvar81 * -2 >= 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar72 * -2 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar64 * -2 + -#paramvar65 >= 0 \/ #paramvar106 >= 0 /\ #paramvar103 + #paramvar104 * -2 + #paramvar105 * -2 >= 0 \/ #paramvar102 >= 0 /\ #paramvar99 + #paramvar100 * -2 + #paramvar101 * -2 >= 0 \/ #paramvar114 >= 0 /\ #paramvar111 + #paramvar112 * -2 + #paramvar113 * -2 >= 0 \/ #paramvar110 >= 0 /\ #paramvar107 + #paramvar108 * -2 + #paramvar109 * -2 >= 0 \/ #paramvar126 >= 0 /\ #paramvar123 + #paramvar124 * -2 + #paramvar125 * -2 >= 0 \/ #paramvar122 >= 0 /\ #paramvar119 + #paramvar120 * -2 + #paramvar121 * -2 >= 0 \/ #paramvar90 >= 0 /\ #paramvar87 + #paramvar88 * -2 + #paramvar89 * -2 >= 0 \/ #paramvar86 >= 0 /\ #paramvar83 + #paramvar84 * -2 + #paramvar85 * -2 >= 0 \/ #paramvar98 >= 0 /\ #paramvar95 + #paramvar96 * -2 + #paramvar97 * -2 >= 0 \/ #paramvar94 >= 0 /\ #paramvar91 + #paramvar92 * -2 + #paramvar93 * -2 >= 0
bounds constr: [#S_441] (if (#paramvar123 >= 0) then #paramvar123 else -#paramvar123) <= 1 /\ (if (#paramvar119 >= 0) then #paramvar119 else -#paramvar119) <= 1
bounds constr: [#S_442] (if (#paramvar124 >= 0) then #paramvar124 else -#paramvar124) + (if (#paramvar125 >= 0) then #paramvar125 else -#paramvar125) <= 2 /\ (if (#paramvar120 >= 0) then #paramvar120 else -#paramvar120) + (if (#paramvar121 >= 0) then #paramvar121 else -#paramvar121) <= 2
bounds constr: [#S_443] true
bounds constr: [#S_444] (if (#paramvar115 >= 0) then #paramvar115 else -#paramvar115) <= 0
bounds constr: [#S_445] (if (#paramvar116 >= 0) then #paramvar116 else -#paramvar116) + (if (#paramvar117 >= 0) then #paramvar117 else -#paramvar117) <= 1
bounds constr: [#S_446] true
bounds constr: [#S_447] (if (#paramvar111 >= 0) then #paramvar111 else -#paramvar111) <= 1 /\ (if (#paramvar107 >= 0) then #paramvar107 else -#paramvar107) <= 1
bounds constr: [#S_448] (if (#paramvar112 >= 0) then #paramvar112 else -#paramvar112) + (if (#paramvar113 >= 0) then #paramvar113 else -#paramvar113) <= 1 /\ (if (#paramvar108 >= 0) then #paramvar108 else -#paramvar108) + (if (#paramvar109 >= 0) then #paramvar109 else -#paramvar109) <= 1
bounds constr: [#S_449] true
bounds constr: [#S_450] (if (#paramvar103 >= 0) then #paramvar103 else -#paramvar103) <= 1 /\ (if (#paramvar99 >= 0) then #paramvar99 else -#paramvar99) <= 1
bounds constr: [#S_451] (if (#paramvar104 >= 0) then #paramvar104 else -#paramvar104) + (if (#paramvar105 >= 0) then #paramvar105 else -#paramvar105) <= 2 /\ (if (#paramvar100 >= 0) then #paramvar100 else -#paramvar100) + (if (#paramvar101 >= 0) then #paramvar101 else -#paramvar101) <= 2
bounds constr: [#S_452] true
bounds constr: [#S_453] (if (#paramvar95 >= 0) then #paramvar95 else -#paramvar95) <= 1 /\ (if (#paramvar91 >= 0) then #paramvar91 else -#paramvar91) <= 1
bounds constr: [#S_454] (if (#paramvar96 >= 0) then #paramvar96 else -#paramvar96) + (if (#paramvar97 >= 0) then #paramvar97 else -#paramvar97) <= 2 /\ (if (#paramvar92 >= 0) then #paramvar92 else -#paramvar92) + (if (#paramvar93 >= 0) then #paramvar93 else -#paramvar93) <= 2
bounds constr: [#S_455] true
bounds constr: [#S_456] (if (#paramvar87 >= 0) then #paramvar87 else -#paramvar87) <= 1 /\ (if (#paramvar83 >= 0) then #paramvar83 else -#paramvar83) <= 1
bounds constr: [#S_457] (if (#paramvar88 >= 0) then #paramvar88 else -#paramvar88) + (if (#paramvar89 >= 0) then #paramvar89 else -#paramvar89) <= 1 /\ (if (#paramvar84 >= 0) then #paramvar84 else -#paramvar84) + (if (#paramvar85 >= 0) then #paramvar85 else -#paramvar85) <= 1
bounds constr: [#S_458] true
bounds constr: [#S_459] (if (#paramvar79 >= 0) then #paramvar79 else -#paramvar79) <= 0
bounds constr: [#S_460] (if (#paramvar80 >= 0) then #paramvar80 else -#paramvar80) + (if (#paramvar81 >= 0) then #paramvar81 else -#paramvar81) <= 1
bounds constr: [#S_461] true
bounds constr: [#S_462] (if (#paramvar71 >= 0) then #paramvar71 else -#paramvar71) <= 1 /\ (if (#paramvar63 >= 0) then #paramvar63 else -#paramvar63) <= 1
bounds constr: [#S_463] (if (#paramvar72 >= 0) then #paramvar72 else -#paramvar72) + (if (#paramvar73 >= 0) then #paramvar73 else -#paramvar73) <= 2 /\ (if (#paramvar64 >= 0) then #paramvar64 else -#paramvar64) + (if (#paramvar65 >= 0) then #paramvar65 else -#paramvar65) <= 2
bounds constr: [#S_464] true
bounds constr: [#S_465] (if (#paramvar57 >= 0) then #paramvar57 else -#paramvar57) <= 1 /\ (if (#paramvar51 >= 0) then #paramvar51 else -#paramvar51) <= 1
bounds constr: [#S_466] (if (#paramvar58 >= 0) then #paramvar58 else -#paramvar58) + (if (#paramvar59 >= 0) then #paramvar59 else -#paramvar59) <= 1 /\ (if (#paramvar52 >= 0) then #paramvar52 else -#paramvar52) + (if (#paramvar53 >= 0) then #paramvar53 else -#paramvar53) <= 1
bounds constr: [#S_467] true
bounds constr: [#S_468] (if (#paramvar47 >= 0) then #paramvar47 else -#paramvar47) <= 0
bounds constr: [#S_469] (if (#paramvar48 >= 0) then #paramvar48 else -#paramvar48) + (if (#paramvar49 >= 0) then #paramvar49 else -#paramvar49) <= 1
bounds constr: [#S_470] true
constraints generated
sat
************** current phase of 9th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  1 + x2 = 0 /\ -1 + -x2 >= 0 \/ 1 + x2 = 0 /\ x1 >= 0
X3(x1: int, x2: int) :=
  -1 + -x1 + x2 != 0 /\ -1 + x1 >= 0 \/ x2 != 0 /\ -1 + -x1 + x2 != 0 /\ -1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x2 >= 0 \/ -1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x2 >= 0
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -1) /\ X95(0, 0) => X1(-1, 0));
(X2(0, -1) /\ X92(-1, -1) => X1(0, -1));
(X2(1, -1) /\ X90(0, 0) => X1(1, 0));
(X2(1, -1) /\ X91(0, 0) => X1(1, 0));
(X3(1, 3) /\ X3(3, 3) => X2(3, 3));
(X91(-3, 1) => X3(-3, -2));
(X92(0, 0) => X3(0, 0));
(X95(-2, -2) => X3(-2, -1));
(X96(-2, -3) => X3(-2, 0))

************** current phase of 9th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (10): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (77): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(-1, -1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 9th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

************************************************************
refuting (X2 (-4) 2)
refuting (X2 (-3) 2)
refuting (X2 (-1) (-1))
refuting (X2 (-1) 2)
refuting (X2 (-1) 3)
refuting (X2 0 (-1))
refuting (X2 1 (-1))
refuting (X2 3 3)
refuting (X3 (-3) (-2))
refuting (X3 (-2) (-1))
refuting (X3 (-2) 0)
refuting (X3 0 0)
refuting (X3 1 3)
refuting (X3 3 3)
refuting (X90 (-2) (-2))
refuting (X90 0 0)
refuting (X90 0 3)
refuting (X91 (-3) 1)
refuting (X91 (-2) (-2))
refuting (X91 0 (-3))
refuting (X91 0 0)
refuting (X92 (-2) (-2))
refuting (X92 (-1) (-1))
refuting (X92 0 0)
refuting (X92 2 2)
refuting (X93 (-2) (-2))
refuting (X93 0 (-2))
refuting (X94 (-2) (-2))
refuting (X95 (-2) (-2))
refuting (X95 0 0)
refuting (X96 (-2) (-3))
refuting (X96 (-2) (-2))
proving (X1 (-4) (-3))
proving (X1 (-3) (-2))
proving (X1 (-1) (-2))
proving (X1 (-1) 2)
proving (X1 (-1) 3)
proving (X2 (-4) 2)
proving (X2 (-3) 2)
proving (X2 (-1) (-1))
proving (X2 (-1) 2)
proving (X2 (-1) 3)
proving (X2 0 (-1))
proving (X2 1 (-1))
proving (X2 3 3)
proving (X3 (-3) (-2))
proving (X3 (-2) (-1))
proving (X3 (-2) 0)
proving (X3 0 0)
proving (X3 1 3)
proving (X3 3 3)
proving (X90 (-2) (-2))
proving (X90 0 0)
proving (X90 0 3)
proving (X91 (-3) 1)
proving (X91 (-2) (-2))
proving (X91 0 (-3))
proving (X91 0 0)
proving (X92 (-2) (-2))
proving (X92 (-1) (-1))
proving (X92 0 0)
proving (X92 2 2)
proving (X93 (-2) (-2))
proving (X93 0 (-2))
proving (X94 (-2) (-2))
proving (X95 (-2) (-2))
proving (X95 0 0)
proving (X96 (-2) (-3))
proving (X96 (-2) (-2))
*** Example Instances obtained by Resolution:


************** current phase of 9th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (10): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (77): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(-1, -1) => );
(X2(0, 0) /\ X96(1, 1) => );
(X2(0, 0) /\ X90($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 10th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (8):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
table:
FTFFFT_T


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (9):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
table:
FTFFTT_TF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (10):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
table:
FFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
table:
FTTFFTFFF___TF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (9):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
table:
FTFTF_TTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
table:
FTFFTF__TFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (22):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
table:
FFTTFFFFFFFTFFTTFFFFFF
TFFFFFTTFTFFFFFFFTTFFF
FTFFFTFFTFTFTFFFTFFFFF
TFFFFFFFFFFFFFTFF__FFF
TTFTFFFFFFFFFTFFF__TFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (9):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
table:
FTFTFF_TT


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (18):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
table:
TTFTFFFTTTTTTTTTTT
TTTFTTTFFTFTTTTTTT
TFTTTTTTTTTTTTTFFT

gen constr of example:(X2(-1, -1) /\ X95(0, 0) => )
constr: [#S_471] #paramvar118 < 0 \/ #paramvar115 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + -#paramvar58 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + -#paramvar52 + -#paramvar53 < 0)
gen constr of example:(X2(0, -1) /\ X92(-1, -1) => )
constr: [#S_472] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + -#paramvar53 < 0) \/ (#paramvar98 < 0 \/ #paramvar95 + -#paramvar96 + -#paramvar97 < 0) /\ (#paramvar94 < 0 \/ #paramvar91 + -#paramvar92 + -#paramvar93 < 0)
gen constr of example:(X2(1, -1) /\ X90(0, 0) => )
constr: [#S_473] #paramvar82 < 0 \/ #paramvar79 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + #paramvar58 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + #paramvar52 + -#paramvar53 < 0)
gen constr of example:(X2(1, -1) /\ X91(0, 0) => )
constr: [#S_474] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + #paramvar58 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + #paramvar52 + -#paramvar53 < 0) \/ (#paramvar90 < 0 \/ #paramvar87 < 0) /\ (#paramvar86 < 0 \/ #paramvar83 < 0)
gen constr of example:(X3(1, 3) /\ X3(3, 3) => X2(3, 3))
constr: [#S_475] (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 > 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar72 + #paramvar73 * 3 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 > 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar64 + #paramvar65 * 3 < 0) \/ (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 > 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar72 * 3 + #paramvar73 * 3 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 > 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar64 * 3 + #paramvar65 * 3 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 >= 0 /\ #paramvar62 >= 0 /\ #paramvar57 + #paramvar58 * 3 + #paramvar59 * 3 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 >= 0 /\ #paramvar56 >= 0 /\ #paramvar51 + #paramvar52 * 3 + #paramvar53 * 3 >= 0
gen constr of example:(X91(-3, 1) => X3(-3, -2))
constr: [#S_476] (#paramvar90 > 0 \/ #paramvar87 + #paramvar88 * -3 + #paramvar89 < 0) /\ (#paramvar86 > 0 \/ #paramvar83 + #paramvar84 * -3 + #paramvar85 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar72 * -3 + #paramvar73 * -2 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar64 * -3 + #paramvar65 * -2 >= 0
gen constr of example:(X95(-2, -2) => X3(-2, -1))
constr: [#S_477] #paramvar118 < 0 \/ #paramvar115 + #paramvar116 * -2 + #paramvar117 * -2 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar72 * -2 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar64 * -2 + -#paramvar65 >= 0
gen constr of example:(X96(-2, -3) => X3(-2, 0))
constr: [#S_478] (#paramvar126 > 0 \/ #paramvar123 + #paramvar124 * -2 + #paramvar125 * -3 < 0) /\ (#paramvar122 > 0 \/ #paramvar119 + #paramvar120 * -2 + #paramvar121 * -3 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * -2 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * -2 >= 0
gen constr of example:(X92(0, 0) => X3(0, 0))
constr: [#S_479] (#paramvar98 < 0 \/ #paramvar95 < 0) /\ (#paramvar94 < 0 \/ #paramvar91 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 >= 0
bounds constr: [#S_480] (if (#paramvar123 >= 0) then #paramvar123 else -#paramvar123) <= 1 /\ (if (#paramvar119 >= 0) then #paramvar119 else -#paramvar119) <= 1
bounds constr: [#S_481] (if (#paramvar124 >= 0) then #paramvar124 else -#paramvar124) + (if (#paramvar125 >= 0) then #paramvar125 else -#paramvar125) <= 2 /\ (if (#paramvar120 >= 0) then #paramvar120 else -#paramvar120) + (if (#paramvar121 >= 0) then #paramvar121 else -#paramvar121) <= 2
bounds constr: [#S_482] true
bounds constr: [#S_483] (if (#paramvar115 >= 0) then #paramvar115 else -#paramvar115) <= 0
bounds constr: [#S_484] (if (#paramvar116 >= 0) then #paramvar116 else -#paramvar116) + (if (#paramvar117 >= 0) then #paramvar117 else -#paramvar117) <= 1
bounds constr: [#S_485] true
bounds constr: [#S_486] true
bounds constr: [#S_487] true
bounds constr: [#S_488] true
bounds constr: [#S_489] true
bounds constr: [#S_490] true
bounds constr: [#S_491] true
bounds constr: [#S_492] (if (#paramvar95 >= 0) then #paramvar95 else -#paramvar95) <= 1 /\ (if (#paramvar91 >= 0) then #paramvar91 else -#paramvar91) <= 1
bounds constr: [#S_493] (if (#paramvar96 >= 0) then #paramvar96 else -#paramvar96) + (if (#paramvar97 >= 0) then #paramvar97 else -#paramvar97) <= 2 /\ (if (#paramvar92 >= 0) then #paramvar92 else -#paramvar92) + (if (#paramvar93 >= 0) then #paramvar93 else -#paramvar93) <= 2
bounds constr: [#S_494] true
bounds constr: [#S_495] (if (#paramvar87 >= 0) then #paramvar87 else -#paramvar87) <= 1 /\ (if (#paramvar83 >= 0) then #paramvar83 else -#paramvar83) <= 1
bounds constr: [#S_496] (if (#paramvar88 >= 0) then #paramvar88 else -#paramvar88) + (if (#paramvar89 >= 0) then #paramvar89 else -#paramvar89) <= 1 /\ (if (#paramvar84 >= 0) then #paramvar84 else -#paramvar84) + (if (#paramvar85 >= 0) then #paramvar85 else -#paramvar85) <= 1
bounds constr: [#S_497] true
bounds constr: [#S_498] (if (#paramvar79 >= 0) then #paramvar79 else -#paramvar79) <= 0
bounds constr: [#S_499] true
bounds constr: [#S_500] true
bounds constr: [#S_501] (if (#paramvar71 >= 0) then #paramvar71 else -#paramvar71) <= 1 /\ (if (#paramvar63 >= 0) then #paramvar63 else -#paramvar63) <= 1
bounds constr: [#S_502] (if (#paramvar72 >= 0) then #paramvar72 else -#paramvar72) + (if (#paramvar73 >= 0) then #paramvar73 else -#paramvar73) <= 2 /\ (if (#paramvar64 >= 0) then #paramvar64 else -#paramvar64) + (if (#paramvar65 >= 0) then #paramvar65 else -#paramvar65) <= 2
bounds constr: [#S_503] true
bounds constr: [#S_504] (if (#paramvar57 >= 0) then #paramvar57 else -#paramvar57) <= 1 /\ (if (#paramvar51 >= 0) then #paramvar51 else -#paramvar51) <= 1
bounds constr: [#S_505] (if (#paramvar58 >= 0) then #paramvar58 else -#paramvar58) + (if (#paramvar59 >= 0) then #paramvar59 else -#paramvar59) <= 1 /\ (if (#paramvar52 >= 0) then #paramvar52 else -#paramvar52) + (if (#paramvar53 >= 0) then #paramvar53 else -#paramvar53) <= 1
bounds constr: [#S_506] true
bounds constr: [#S_507] true
bounds constr: [#S_508] true
bounds constr: [#S_509] true
constraints generated
sat
************** current phase of 10th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ -1 + x2 = 0 /\ -1 + -x2 >= 0 \/ -1 + x2 = 0 /\ 1 + x1 >= 0
X3(x1: int, x2: int) :=
  x2 != 0 /\ -1 + -x1 >= 0 \/ -1 + x1 + x2 = 0 /\ -1 + -x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 1 + -x1 >= 0 \/ -1 + x2 >= 0
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x1 + x2 >= 0 \/ -1 + 2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 1) /\ X2(1, 1) => X1(-1, 0) \/ X1(1, 0) \/ X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0));
(X2(-1, 1) /\ X90(0, 2) => X1(-1, 2));
(X2(0, 1) /\ X91(-3, -2) => X1(0, -2));
(X3(-2, 3) => X2(-2, 3));
(X90(0, 3) => X3(0, 2));
(X91(4, 1) => X3(4, -2));
(X95(0, -1) => X3(0, -1));
(X96(1, 0) => X3(1, 0))

************** current phase of 10th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (10): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (85): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(-1, -1) => );
(X2(0, 0) /\ X96(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 10th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 0 (-2))
  added as a negative example with: 
  add negative example(X1(0, -2) => )
refuting (X2 (-2) 3)
refuting (X2 (-1) 1)
refuting (X2 0 1)
refuting (X2 1 1)
refuting (X3 (-2) 3)
refuting (X3 0 (-1))
refuting (X3 0 2)
refuting (X3 1 0)
refuting (X3 4 (-2))
refuting (X90 0 0)
refuting (X90 0 2)
refuting (X90 0 3)
refuting (X91 (-3) (-2))
refuting (X91 0 0)
refuting (X91 4 1)
refuting (X92 0 0)
refuting (X93 0 0)
refuting (X94 0 0)
refuting (X95 0 (-1))
refuting (X95 0 0)
refuting (X96 0 0)
refuting (X96 1 0)
proving (X1 0 (-2))
proving (X2 (-2) 3)
proving (X2 (-1) 1)
proving (X2 0 1)
proving (X2 1 1)
proving (X3 (-2) 3)
proving (X3 0 (-1))
proving (X3 0 2)
proving (X3 1 0)
proving (X3 4 (-2))
proving (X90 0 0)
proving (X90 0 2)
proving (X90 0 3)
proving (X91 (-3) (-2))
proving (X91 0 0)
proving (X91 4 1)
proving (X92 0 0)
proving (X93 0 0)
proving (X94 0 0)
proving (X95 0 (-1))
proving (X95 0 0)
proving (X96 0 0)
proving (X96 1 0)
*** Example Instances obtained by Resolution:
(X1(0, -2) => )

************** current phase of 10th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (11): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (85): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );
(X2(0, -1) /\ X95($1, 1) => );
(X2(0, 0) /\ X90(1, 1) => );
(X2(0, 0) /\ X96(-1, -1) => );
(X2(0, 0) /\ X96(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 11th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (8):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
table:
FTFFFT_T


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (9):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
table:
FTFFTT_TF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (11):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
table:
FFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
table:
FTTFFTFFF___TF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
table:
FTFTF_TTFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
table:
FTFFTF__TFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (25):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFF
TTFTFFFFFFFFFTFFF__TFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
table:
FTFTFF_TTF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (20):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
table:
TTFTFFFTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTF
TFTTTTTTTTTTTTTFFTTT

gen constr of example:(X1(0, -2) => )
constr: [#S_510] #paramvar50 > 0 \/ #paramvar47 + #paramvar49 * -2 < 0
gen constr of example:(X2(-1, 1) /\ X90(0, 2) => )
constr: [#S_511] #paramvar82 > 0 \/ #paramvar79 + #paramvar81 * 2 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 + #paramvar53 < 0)
gen constr of example:(X2(0, 1) /\ X91(-3, -2) => )
constr: [#S_512] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 < 0) \/ (#paramvar90 > 0 \/ #paramvar87 + #paramvar88 * -3 + #paramvar89 * -2 < 0) /\ (#paramvar86 > 0 \/ #paramvar83 + #paramvar84 * -3 + #paramvar85 * -2 < 0)
gen constr of example:(X3(-2, 3) => X2(-2, 3))
constr: [#S_513] (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 > 0 \/ #paramvar77 < 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar72 * -2 + #paramvar73 * 3 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 > 0 \/ #paramvar69 < 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar64 * -2 + #paramvar65 * 3 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 >= 0 /\ #paramvar62 >= 0 /\ #paramvar57 + #paramvar58 * -2 + #paramvar59 * 3 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 >= 0 /\ #paramvar56 >= 0 /\ #paramvar51 + #paramvar52 * -2 + #paramvar53 * 3 >= 0
gen constr of example:(X95(0, -1) => X3(0, -1))
constr: [#S_514] #paramvar118 > 0 \/ #paramvar115 + -#paramvar117 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar65 >= 0
gen constr of example:(X90(0, 3) => X3(0, 2))
constr: [#S_515] #paramvar82 > 0 \/ #paramvar79 + #paramvar81 * 3 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar73 * 2 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar65 * 2 >= 0
gen constr of example:(X96(1, 0) => X3(1, 0))
constr: [#S_516] (#paramvar126 > 0 \/ #paramvar123 + #paramvar124 < 0) /\ (#paramvar122 > 0 \/ #paramvar119 + #paramvar120 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 >= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 >= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 >= 0
gen constr of example:(X91(4, 1) => X3(4, -2))
constr: [#S_517] (#paramvar90 > 0 \/ #paramvar87 + #paramvar88 * 4 + #paramvar89 < 0) /\ (#paramvar86 > 0 \/ #paramvar83 + #paramvar84 * 4 + #paramvar85 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * 4 + #paramvar73 * -2 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * 4 + #paramvar65 * -2 >= 0
gen constr of example:(X2(-1, 1) /\ X2(1, 1) => X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0))
constr: [#S_518] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 + #paramvar53 < 0) \/ (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 + #paramvar53 < 0) \/ #paramvar118 >= 0 /\ #paramvar115 >= 0 \/ #paramvar82 >= 0 /\ #paramvar79 >= 0 \/ #paramvar106 >= 0 /\ #paramvar103 >= 0 \/ #paramvar102 >= 0 /\ #paramvar99 >= 0 \/ #paramvar114 >= 0 /\ #paramvar111 >= 0 \/ #paramvar110 >= 0 /\ #paramvar107 >= 0 \/ #paramvar126 >= 0 /\ #paramvar123 >= 0 \/ #paramvar122 >= 0 /\ #paramvar119 >= 0 \/ #paramvar90 >= 0 /\ #paramvar87 >= 0 \/ #paramvar86 >= 0 /\ #paramvar83 >= 0 \/ #paramvar98 >= 0 /\ #paramvar95 >= 0 \/ #paramvar94 >= 0 /\ #paramvar91 >= 0
bounds constr: [#S_519] (if (#paramvar123 >= 0) then #paramvar123 else -#paramvar123) <= 1 /\ (if (#paramvar119 >= 0) then #paramvar119 else -#paramvar119) <= 1
bounds constr: [#S_520] (if (#paramvar124 >= 0) then #paramvar124 else -#paramvar124) <= 2 /\ (if (#paramvar120 >= 0) then #paramvar120 else -#paramvar120) <= 2
bounds constr: [#S_521] true
bounds constr: [#S_522] (if (#paramvar115 >= 0) then #paramvar115 else -#paramvar115) <= 0
bounds constr: [#S_523] (if (#paramvar117 >= 0) then #paramvar117 else -#paramvar117) <= 1
bounds constr: [#S_524] true
bounds constr: [#S_525] (if (#paramvar111 >= 0) then #paramvar111 else -#paramvar111) <= 1 /\ (if (#paramvar107 >= 0) then #paramvar107 else -#paramvar107) <= 1
bounds constr: [#S_526] true
bounds constr: [#S_527] true
bounds constr: [#S_528] (if (#paramvar103 >= 0) then #paramvar103 else -#paramvar103) <= 1 /\ (if (#paramvar99 >= 0) then #paramvar99 else -#paramvar99) <= 1
bounds constr: [#S_529] true
bounds constr: [#S_530] true
bounds constr: [#S_531] (if (#paramvar95 >= 0) then #paramvar95 else -#paramvar95) <= 1 /\ (if (#paramvar91 >= 0) then #paramvar91 else -#paramvar91) <= 1
bounds constr: [#S_532] true
bounds constr: [#S_533] true
bounds constr: [#S_534] (if (#paramvar87 >= 0) then #paramvar87 else -#paramvar87) <= 1 /\ (if (#paramvar83 >= 0) then #paramvar83 else -#paramvar83) <= 1
bounds constr: [#S_535] (if (#paramvar88 >= 0) then #paramvar88 else -#paramvar88) + (if (#paramvar89 >= 0) then #paramvar89 else -#paramvar89) <= 1 /\ (if (#paramvar84 >= 0) then #paramvar84 else -#paramvar84) + (if (#paramvar85 >= 0) then #paramvar85 else -#paramvar85) <= 1
bounds constr: [#S_536] true
bounds constr: [#S_537] (if (#paramvar79 >= 0) then #paramvar79 else -#paramvar79) <= 0
bounds constr: [#S_538] (if (#paramvar81 >= 0) then #paramvar81 else -#paramvar81) <= 1
bounds constr: [#S_539] true
bounds constr: [#S_540] (if (#paramvar71 >= 0) then #paramvar71 else -#paramvar71) <= 1 /\ (if (#paramvar63 >= 0) then #paramvar63 else -#paramvar63) <= 1
bounds constr: [#S_541] (if (#paramvar72 >= 0) then #paramvar72 else -#paramvar72) + (if (#paramvar73 >= 0) then #paramvar73 else -#paramvar73) <= 2 /\ (if (#paramvar64 >= 0) then #paramvar64 else -#paramvar64) + (if (#paramvar65 >= 0) then #paramvar65 else -#paramvar65) <= 2
bounds constr: [#S_542] true
bounds constr: [#S_543] (if (#paramvar57 >= 0) then #paramvar57 else -#paramvar57) <= 1 /\ (if (#paramvar51 >= 0) then #paramvar51 else -#paramvar51) <= 1
bounds constr: [#S_544] (if (#paramvar58 >= 0) then #paramvar58 else -#paramvar58) + (if (#paramvar59 >= 0) then #paramvar59 else -#paramvar59) <= 1 /\ (if (#paramvar52 >= 0) then #paramvar52 else -#paramvar52) + (if (#paramvar53 >= 0) then #paramvar53 else -#paramvar53) <= 1
bounds constr: [#S_545] true
bounds constr: [#S_546] (if (#paramvar47 >= 0) then #paramvar47 else -#paramvar47) <= 0
bounds constr: [#S_547] (if (#paramvar49 >= 0) then #paramvar49 else -#paramvar49) <= 1
bounds constr: [#S_548] true
constraints generated
sat
************** current phase of 11th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -x1 >= 0 \/ -1 + -x1 >= 0
X3(x1: int, x2: int) :=
  x2 = 0 /\ -1 + -x1 + x2 >= 0 \/ x2 != 0 /\ 1 + -x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 >= 0
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + x1 >= 0 \/ x1 + -x2 = 0 /\ -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 1 + -2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -1) /\ X90(0, 0) => X1(-1, 0));
(X2(-1, 0) /\ X96(0, -2) => X1(-1, -2));
(X2(-1, 1) /\ X94(0, 0) => X1(-1, 0));
(X2(0, -1) /\ X95(0, -1) => X1(0, -1));
(X2(0, 1) /\ X91(-2, -2) => X1(0, -2));
(X3(0, -1) /\ X3(1, -1) => X2(1, -1));
(X94(1, 2) => X3(1, 1));
(X95(3, 0) => X3(3, -1));
(X96(0, 1) => X3(0, 0))

************** current phase of 11th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (11): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (94): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(0, -1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 11th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-1) (-1))
refuting (X2 (-1) 0)
refuting (X2 (-1) 1)
refuting (X2 0 (-1))
refuting (X2 0 1)
refuting (X2 1 (-1))
refuting (X3 0 (-1))
refuting (X3 0 0)
refuting (X3 1 (-1))
refuting (X3 1 1)
refuting (X3 3 (-1))
refuting (X90 0 0)
refuting (X91 (-3) (-2))
refuting (X91 (-2) (-2))
refuting (X94 0 0)
refuting (X94 1 2)
refuting (X95 0 (-1))
refuting (X95 3 0)
refuting (X96 0 (-2))
refuting (X96 0 1)
proving (X1 0 (-2))
proving (X2 (-1) (-1))
proving (X2 (-1) 0)
proving (X2 (-1) 1)
proving (X2 0 (-1))
proving (X2 0 1)
proving (X2 1 (-1))
proving (X3 0 (-1))
proving (X3 0 0)
proving (X3 1 (-1))
proving (X3 1 1)
proving (X3 3 (-1))
proving (X90 0 0)
proving (X91 (-3) (-2))
proving (X91 (-2) (-2))
proving (X94 0 0)
proving (X94 1 2)
proving (X95 0 (-1))
proving (X95 3 0)
proving (X96 0 (-2))
proving (X96 0 1)
*** Example Instances obtained by Resolution:


************** current phase of 11th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (11): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (94): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(0, -1) => );
(X2(0, -1) /\ X95(1, 1) => );
(X2(0, -1) /\ X93($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 12th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (9):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
table:
FTFFFT_TF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
table:
FTFFTT_TFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (11):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
table:
FFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
table:
FTTFFTFFF___TF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
table:
FTFTF_TTFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
table:
FTFFTF__TFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (25):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFF
TTFTFFFFFFFFFTFFF__TFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
table:
FTFTFF_TTFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (20):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
table:
TTFTFFFTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTF
TFTTTTTTTTTTTTTFFTTT

gen constr of example:(X2(-1, -1) /\ X90(0, 0) => )
constr: [#S_549] #paramvar82 < 0 \/ #paramvar79 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + -#paramvar58 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + -#paramvar52 + -#paramvar53 < 0)
gen constr of example:(X2(-1, 0) /\ X96(0, -2) => )
constr: [#S_550] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 < 0) \/ (#paramvar126 > 0 \/ #paramvar123 + #paramvar125 * -2 < 0) /\ (#paramvar122 > 0 \/ #paramvar119 + #paramvar121 * -2 < 0)
gen constr of example:(X2(-1, 1) /\ X94(0, 0) => )
constr: [#S_551] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 + #paramvar53 < 0) \/ (#paramvar114 < 0 \/ #paramvar111 < 0) /\ (#paramvar110 < 0 \/ #paramvar107 < 0)
gen constr of example:(X2(0, -1) /\ X95(0, -1) => )
constr: [#S_552] #paramvar118 > 0 \/ #paramvar115 + -#paramvar117 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + -#paramvar53 < 0)
gen constr of example:(X2(0, 1) /\ X91(-2, -2) => )
constr: [#S_553] (#paramvar60 < 0 \/ #paramvar61 > 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 > 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar53 < 0) \/ (#paramvar90 < 0 \/ #paramvar87 + #paramvar88 * -2 + #paramvar89 * -2 < 0) /\ (#paramvar86 < 0 \/ #paramvar83 + #paramvar84 * -2 + #paramvar85 * -2 < 0)
gen constr of example:(X3(0, -1) /\ X3(1, -1) => X2(1, -1))
constr: [#S_554] (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 < 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + -#paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 < 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + -#paramvar65 < 0) \/ (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 < 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar72 + -#paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 < 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar64 + -#paramvar65 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 >= 0 /\ #paramvar62 <= 0 /\ #paramvar57 + #paramvar58 + -#paramvar59 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 >= 0 /\ #paramvar56 <= 0 /\ #paramvar51 + #paramvar52 + -#paramvar53 >= 0
gen constr of example:(X96(0, 1) => X3(0, 0))
constr: [#S_555] (#paramvar126 > 0 \/ #paramvar123 + #paramvar125 < 0) /\ (#paramvar122 > 0 \/ #paramvar119 + #paramvar121 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 >= 0
gen constr of example:(X94(1, 2) => X3(1, 1))
constr: [#S_556] (#paramvar114 > 0 \/ #paramvar111 + #paramvar112 + #paramvar113 * 2 < 0) /\ (#paramvar110 > 0 \/ #paramvar107 + #paramvar108 + #paramvar109 * 2 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 + #paramvar65 >= 0
gen constr of example:(X95(3, 0) => X3(3, -1))
constr: [#S_557] #paramvar118 > 0 \/ #paramvar115 + #paramvar116 * 3 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * 3 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * 3 + -#paramvar65 >= 0
bounds constr: [#S_558] (if (#paramvar123 >= 0) then #paramvar123 else -#paramvar123) <= 1 /\ (if (#paramvar119 >= 0) then #paramvar119 else -#paramvar119) <= 1
bounds constr: [#S_559] (if (#paramvar125 >= 0) then #paramvar125 else -#paramvar125) <= 2 /\ (if (#paramvar121 >= 0) then #paramvar121 else -#paramvar121) <= 2
bounds constr: [#S_560] true
bounds constr: [#S_561] (if (#paramvar115 >= 0) then #paramvar115 else -#paramvar115) <= 0
bounds constr: [#S_562] (if (#paramvar116 >= 0) then #paramvar116 else -#paramvar116) + (if (#paramvar117 >= 0) then #paramvar117 else -#paramvar117) <= 1
bounds constr: [#S_563] true
bounds constr: [#S_564] (if (#paramvar111 >= 0) then #paramvar111 else -#paramvar111) <= 1 /\ (if (#paramvar107 >= 0) then #paramvar107 else -#paramvar107) <= 1
bounds constr: [#S_565] (if (#paramvar112 >= 0) then #paramvar112 else -#paramvar112) + (if (#paramvar113 >= 0) then #paramvar113 else -#paramvar113) <= 1 /\ (if (#paramvar108 >= 0) then #paramvar108 else -#paramvar108) + (if (#paramvar109 >= 0) then #paramvar109 else -#paramvar109) <= 1
bounds constr: [#S_566] true
bounds constr: [#S_567] true
bounds constr: [#S_568] true
bounds constr: [#S_569] true
bounds constr: [#S_570] true
bounds constr: [#S_571] true
bounds constr: [#S_572] true
bounds constr: [#S_573] (if (#paramvar87 >= 0) then #paramvar87 else -#paramvar87) <= 1 /\ (if (#paramvar83 >= 0) then #paramvar83 else -#paramvar83) <= 1
bounds constr: [#S_574] (if (#paramvar88 >= 0) then #paramvar88 else -#paramvar88) + (if (#paramvar89 >= 0) then #paramvar89 else -#paramvar89) <= 1 /\ (if (#paramvar84 >= 0) then #paramvar84 else -#paramvar84) + (if (#paramvar85 >= 0) then #paramvar85 else -#paramvar85) <= 1
bounds constr: [#S_575] true
bounds constr: [#S_576] (if (#paramvar79 >= 0) then #paramvar79 else -#paramvar79) <= 0
bounds constr: [#S_577] true
bounds constr: [#S_578] true
bounds constr: [#S_579] (if (#paramvar71 >= 0) then #paramvar71 else -#paramvar71) <= 1 /\ (if (#paramvar63 >= 0) then #paramvar63 else -#paramvar63) <= 1
bounds constr: [#S_580] (if (#paramvar72 >= 0) then #paramvar72 else -#paramvar72) + (if (#paramvar73 >= 0) then #paramvar73 else -#paramvar73) <= 2 /\ (if (#paramvar64 >= 0) then #paramvar64 else -#paramvar64) + (if (#paramvar65 >= 0) then #paramvar65 else -#paramvar65) <= 2
bounds constr: [#S_581] true
bounds constr: [#S_582] (if (#paramvar57 >= 0) then #paramvar57 else -#paramvar57) <= 1 /\ (if (#paramvar51 >= 0) then #paramvar51 else -#paramvar51) <= 1
bounds constr: [#S_583] (if (#paramvar58 >= 0) then #paramvar58 else -#paramvar58) + (if (#paramvar59 >= 0) then #paramvar59 else -#paramvar59) <= 1 /\ (if (#paramvar52 >= 0) then #paramvar52 else -#paramvar52) + (if (#paramvar53 >= 0) then #paramvar53 else -#paramvar53) <= 1
bounds constr: [#S_584] true
bounds constr: [#S_585] true
bounds constr: [#S_586] true
bounds constr: [#S_587] true
constraints generated
sat
************** current phase of 12th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ 1 + x2 = 0 /\ -1 + -x1 >= 0 \/ x2 = 0 /\ -1 + -x1 >= 0
X3(x1: int, x2: int) :=
  1 + x2 = 0 /\ -1 + x1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ -1 + x1 >= 0 \/ x2 != 0 /\ 1 + x2 = 0 /\ -1 + -x1 + x2 = 0 /\ -1 + -x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 >= 0
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
( => X3(0, 1) \/ X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0));
(X2(-1, 0) /\ X96(1, 1) => X1(-1, 1));
(X2(-2, 0) /\ X91(-1, -1) => X1(-2, -1));
(X3(1, -1) /\ X3(3, -1) => X2(3, -1));
(X90(-2, -3) => X3(-2, -4));
(X91(-2, -2) => X3(-2, 1));
(X94(-1, -1) => X3(-1, 1));
(X95(-3, 0) => X3(-3, -1));
(X96(1, 1) => X3(1, 0))

************** current phase of 12th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (11): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (103): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(0, -1) => );
(X2(0, -1) /\ X95(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 12th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-1) 1)
  added as a negative example with: 
  add negative example(X1(-1, 1) => )
refuting (X2 (-2) 0)
refuting (X2 (-1) 0)
refuting (X2 3 (-1))
refuting (X3 (-3) (-1))
refuting (X3 (-2) (-4))
refuting (X3 (-2) 1)
refuting (X3 (-1) 1)
refuting (X3 0 1)
refuting (X3 1 (-1))
refuting (X3 1 0)
refuting (X3 3 (-1))
refuting (X90 (-2) (-3))
refuting (X90 0 0)
refuting (X91 (-2) (-2))
refuting (X91 (-1) (-1))
refuting (X91 0 0)
refuting (X92 0 0)
refuting (X93 0 0)
refuting (X94 (-1) (-1))
refuting (X94 0 0)
refuting (X95 (-3) 0)
refuting (X95 0 0)
refuting (X96 0 0)
refuting (X96 1 1)
proving (X1 (-1) 1)
proving (X2 (-2) 0)
proving (X2 (-1) 0)
proving (X2 3 (-1))
proving (X3 (-3) (-1))
proving (X3 (-2) (-4))
proving (X3 (-2) 1)
proving (X3 (-1) 1)
proving (X3 0 1)
proving (X3 1 (-1))
proving (X3 1 0)
proving (X3 3 (-1))
proving (X90 (-2) (-3))
proving (X90 0 0)
proving (X91 (-2) (-2))
proving (X91 (-1) (-1))
proving (X91 0 0)
proving (X92 0 0)
proving (X93 0 0)
proving (X94 (-1) (-1))
proving (X94 0 0)
proving (X95 (-3) 0)
proving (X95 0 0)
proving (X96 0 0)
proving (X96 1 1)
*** Example Instances obtained by Resolution:
(X1(-1, 1) => )

************** current phase of 12th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (12): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (103): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(0, -1) => );..]

*** labeling with SAT solving
************** current phase of 13th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
table:
FTFFFT_TFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
table:
FTFFTT_TFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (12):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
table:
FFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
table:
FTTFFTFFF___TF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
table:
FTFTF_TTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
table:
FTFFTF__TFFFFFT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (26):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFF
TTFTFFFFFFFFFTFFF__TFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
table:
FTFTFF_TTFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (21):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
table:
TTFTFFFTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFT
TFTTTTTTTTTTTTTFFTTTF

gen constr of example:(X1(-1, 1) => )
constr: [#S_588] #paramvar50 > 0 \/ #paramvar47 + -#paramvar48 + #paramvar49 < 0
gen constr of example:(X2(-2, 0) /\ X91(-1, -1) => )
constr: [#S_589] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 * -2 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 * -2 < 0) \/ (#paramvar90 < 0 \/ #paramvar87 + -#paramvar88 + -#paramvar89 < 0) /\ (#paramvar86 < 0 \/ #paramvar83 + -#paramvar84 + -#paramvar85 < 0)
gen constr of example:(X2(-1, 0) /\ X96(1, 1) => )
constr: [#S_590] (#paramvar60 > 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + -#paramvar58 < 0) /\ (#paramvar54 > 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + -#paramvar52 < 0) \/ (#paramvar126 < 0 \/ #paramvar123 + #paramvar124 + #paramvar125 < 0) /\ (#paramvar122 < 0 \/ #paramvar119 + #paramvar120 + #paramvar121 < 0)
gen constr of example:(X3(1, -1) /\ X3(3, -1) => X2(3, -1))
constr: [#S_591] (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 < 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar72 + -#paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 < 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar64 + -#paramvar65 < 0) \/ (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 < 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar72 * 3 + -#paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 < 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar64 * 3 + -#paramvar65 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 >= 0 /\ #paramvar62 <= 0 /\ #paramvar57 + #paramvar58 * 3 + -#paramvar59 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 >= 0 /\ #paramvar56 <= 0 /\ #paramvar51 + #paramvar52 * 3 + -#paramvar53 >= 0
gen constr of example:(X95(-3, 0) => X3(-3, -1))
constr: [#S_592] #paramvar118 > 0 \/ #paramvar115 + #paramvar116 * -3 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * -3 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * -3 + -#paramvar65 >= 0
gen constr of example:(X90(-2, -3) => X3(-2, -4))
constr: [#S_593] #paramvar82 > 0 \/ #paramvar79 + #paramvar80 * -2 + #paramvar81 * -3 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * -2 + #paramvar73 * -4 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * -2 + #paramvar65 * -4 >= 0
gen constr of example:(X91(-2, -2) => X3(-2, 1))
constr: [#S_594] (#paramvar90 < 0 \/ #paramvar87 + #paramvar88 * -2 + #paramvar89 * -2 < 0) /\ (#paramvar86 < 0 \/ #paramvar83 + #paramvar84 * -2 + #paramvar85 * -2 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * -2 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * -2 + #paramvar65 >= 0
gen constr of example:(X94(-1, -1) => X3(-1, 1))
constr: [#S_595] (#paramvar114 < 0 \/ #paramvar111 + -#paramvar112 + -#paramvar113 < 0) /\ (#paramvar110 < 0 \/ #paramvar107 + -#paramvar108 + -#paramvar109 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar72 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar64 + #paramvar65 >= 0
gen constr of example:(X96(1, 1) => X3(1, 0))
constr: [#S_596] (#paramvar126 < 0 \/ #paramvar123 + #paramvar124 + #paramvar125 < 0) /\ (#paramvar122 < 0 \/ #paramvar119 + #paramvar120 + #paramvar121 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 >= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 >= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 >= 0
gen constr of example:( => X3(0, 1) \/ X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0))
constr: [#S_597] #paramvar118 >= 0 /\ #paramvar115 >= 0 \/ #paramvar82 >= 0 /\ #paramvar79 >= 0 \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 >= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 >= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + #paramvar65 >= 0 \/ #paramvar106 >= 0 /\ #paramvar103 >= 0 \/ #paramvar102 >= 0 /\ #paramvar99 >= 0 \/ #paramvar114 >= 0 /\ #paramvar111 >= 0 \/ #paramvar110 >= 0 /\ #paramvar107 >= 0 \/ #paramvar126 >= 0 /\ #paramvar123 >= 0 \/ #paramvar122 >= 0 /\ #paramvar119 >= 0 \/ #paramvar90 >= 0 /\ #paramvar87 >= 0 \/ #paramvar86 >= 0 /\ #paramvar83 >= 0 \/ #paramvar98 >= 0 /\ #paramvar95 >= 0 \/ #paramvar94 >= 0 /\ #paramvar91 >= 0
bounds constr: [#S_598] (if (#paramvar123 >= 0) then #paramvar123 else -#paramvar123) <= 1 /\ (if (#paramvar119 >= 0) then #paramvar119 else -#paramvar119) <= 1
bounds constr: [#S_599] (if (#paramvar124 >= 0) then #paramvar124 else -#paramvar124) + (if (#paramvar125 >= 0) then #paramvar125 else -#paramvar125) <= 2 /\ (if (#paramvar120 >= 0) then #paramvar120 else -#paramvar120) + (if (#paramvar121 >= 0) then #paramvar121 else -#paramvar121) <= 2
bounds constr: [#S_600] true
bounds constr: [#S_601] (if (#paramvar115 >= 0) then #paramvar115 else -#paramvar115) <= 0
bounds constr: [#S_602] (if (#paramvar116 >= 0) then #paramvar116 else -#paramvar116) <= 1
bounds constr: [#S_603] true
bounds constr: [#S_604] (if (#paramvar111 >= 0) then #paramvar111 else -#paramvar111) <= 1 /\ (if (#paramvar107 >= 0) then #paramvar107 else -#paramvar107) <= 1
bounds constr: [#S_605] (if (#paramvar112 >= 0) then #paramvar112 else -#paramvar112) + (if (#paramvar113 >= 0) then #paramvar113 else -#paramvar113) <= 1 /\ (if (#paramvar108 >= 0) then #paramvar108 else -#paramvar108) + (if (#paramvar109 >= 0) then #paramvar109 else -#paramvar109) <= 1
bounds constr: [#S_606] true
bounds constr: [#S_607] (if (#paramvar103 >= 0) then #paramvar103 else -#paramvar103) <= 1 /\ (if (#paramvar99 >= 0) then #paramvar99 else -#paramvar99) <= 1
bounds constr: [#S_608] true
bounds constr: [#S_609] true
bounds constr: [#S_610] (if (#paramvar95 >= 0) then #paramvar95 else -#paramvar95) <= 1 /\ (if (#paramvar91 >= 0) then #paramvar91 else -#paramvar91) <= 1
bounds constr: [#S_611] true
bounds constr: [#S_612] true
bounds constr: [#S_613] (if (#paramvar87 >= 0) then #paramvar87 else -#paramvar87) <= 1 /\ (if (#paramvar83 >= 0) then #paramvar83 else -#paramvar83) <= 1
bounds constr: [#S_614] (if (#paramvar88 >= 0) then #paramvar88 else -#paramvar88) + (if (#paramvar89 >= 0) then #paramvar89 else -#paramvar89) <= 1 /\ (if (#paramvar84 >= 0) then #paramvar84 else -#paramvar84) + (if (#paramvar85 >= 0) then #paramvar85 else -#paramvar85) <= 1
bounds constr: [#S_615] true
bounds constr: [#S_616] (if (#paramvar79 >= 0) then #paramvar79 else -#paramvar79) <= 0
bounds constr: [#S_617] (if (#paramvar80 >= 0) then #paramvar80 else -#paramvar80) + (if (#paramvar81 >= 0) then #paramvar81 else -#paramvar81) <= 1
bounds constr: [#S_618] true
bounds constr: [#S_619] (if (#paramvar71 >= 0) then #paramvar71 else -#paramvar71) <= 1 /\ (if (#paramvar63 >= 0) then #paramvar63 else -#paramvar63) <= 1
bounds constr: [#S_620] (if (#paramvar72 >= 0) then #paramvar72 else -#paramvar72) + (if (#paramvar73 >= 0) then #paramvar73 else -#paramvar73) <= 2 /\ (if (#paramvar64 >= 0) then #paramvar64 else -#paramvar64) + (if (#paramvar65 >= 0) then #paramvar65 else -#paramvar65) <= 2
bounds constr: [#S_621] true
bounds constr: [#S_622] (if (#paramvar57 >= 0) then #paramvar57 else -#paramvar57) <= 1 /\ (if (#paramvar51 >= 0) then #paramvar51 else -#paramvar51) <= 1
bounds constr: [#S_623] (if (#paramvar58 >= 0) then #paramvar58 else -#paramvar58) + (if (#paramvar59 >= 0) then #paramvar59 else -#paramvar59) <= 1 /\ (if (#paramvar52 >= 0) then #paramvar52 else -#paramvar52) + (if (#paramvar53 >= 0) then #paramvar53 else -#paramvar53) <= 1
bounds constr: [#S_624] true
bounds constr: [#S_625] (if (#paramvar47 >= 0) then #paramvar47 else -#paramvar47) <= 0
bounds constr: [#S_626] (if (#paramvar48 >= 0) then #paramvar48 else -#paramvar48) + (if (#paramvar49 >= 0) then #paramvar49 else -#paramvar49) <= 1
bounds constr: [#S_627] true
constraints generated
sat
************** current phase of 13th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ 1 + x2 = 0 /\ x1 >= 0 \/ x2 = 0 /\ -1 + -x1 >= 0
X3(x1: int, x2: int) :=
  -1 + x1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ -1 + -2 * x2 >= 0 \/ x2 != 0 /\ 1 + x2 = 0 /\ -1 + -x1 + x2 = 0 /\ -1 + -x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x2 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(1, -1) /\ X90(1, 0) => X1(1, 0));
(X2(1, -1) /\ X95(0, 0) => X1(1, 0));
(X3(-3, -3) /\ X3(0, -3) => X2(0, -3));
(X90(3, -1) => X3(3, -2));
(X94(1, 1) => X3(1, 1))

************** current phase of 13th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (12): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (108): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(0, -1) => );..]

*** labeling with SAT solving
************** current phase of 13th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-1) 0)
refuting (X2 0 (-3))
refuting (X2 1 (-1))
refuting (X3 (-3) (-3))
refuting (X3 0 (-3))
refuting (X3 1 1)
refuting (X3 3 (-2))
refuting (X90 1 0)
refuting (X90 3 (-1))
refuting (X94 1 1)
refuting (X95 0 0)
refuting (X96 1 1)
proving (X1 (-1) 1)
proving (X2 (-1) 0)
proving (X2 0 (-3))
proving (X2 1 (-1))
proving (X3 (-3) (-3))
proving (X3 0 (-3))
proving (X3 1 1)
proving (X3 3 (-2))
proving (X90 1 0)
proving (X90 3 (-1))
proving (X94 1 1)
proving (X95 0 0)
proving (X96 1 1)
*** Example Instances obtained by Resolution:


************** current phase of 13th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (12): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (108): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(0, -1) => );..]

*** labeling with SAT solving
************** current phase of 14th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
table:
FTFFFT_TFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
table:
FTFFTT_TFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (12):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
table:
FFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
table:
FTTFFTFFF___TF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
table:
FTFTF_TTFFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
table:
FTFFTF__TFFFFFT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (29):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFT
TTFTFFFFFFFFFTFFF__TFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
table:
FTFTFF_TTFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (22):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
table:
TTFTFFFTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTT
TFTTTTTTTTTTTTTFFTTTFT

gen constr of example:(X2(1, -1) /\ X90(1, 0) => )
constr: [#S_628] #paramvar82 > 0 \/ #paramvar79 + #paramvar80 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + #paramvar58 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + #paramvar52 + -#paramvar53 < 0)
gen constr of example:(X2(1, -1) /\ X95(0, 0) => )
constr: [#S_629] #paramvar118 < 0 \/ #paramvar115 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + #paramvar58 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + #paramvar52 + -#paramvar53 < 0)
gen constr of example:(X3(-3, -3) /\ X3(0, -3) => X2(0, -3))
constr: [#S_630] (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 > 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar72 * -3 + #paramvar73 * -3 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 > 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar64 * -3 + #paramvar65 * -3 < 0) \/ (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 > 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + #paramvar73 * -3 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 > 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + #paramvar65 * -3 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 >= 0 /\ #paramvar62 >= 0 /\ #paramvar57 + #paramvar59 * -3 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 >= 0 /\ #paramvar56 >= 0 /\ #paramvar51 + #paramvar53 * -3 >= 0
gen constr of example:(X94(1, 1) => X3(1, 1))
constr: [#S_631] (#paramvar114 < 0 \/ #paramvar111 + #paramvar112 + #paramvar113 < 0) /\ (#paramvar110 < 0 \/ #paramvar107 + #paramvar108 + #paramvar109 < 0) \/ #paramvar74 <= 0 /\ #paramvar75 >= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 + #paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 >= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 + #paramvar65 >= 0
gen constr of example:(X90(3, -1) => X3(3, -2))
constr: [#S_632] #paramvar82 > 0 \/ #paramvar79 + #paramvar80 * 3 + -#paramvar81 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 >= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + #paramvar72 * 3 + #paramvar73 * -2 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 >= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + #paramvar64 * 3 + #paramvar65 * -2 >= 0
bounds constr: [#S_633] true
bounds constr: [#S_634] true
bounds constr: [#S_635] true
bounds constr: [#S_636] (if (#paramvar115 >= 0) then #paramvar115 else -#paramvar115) <= 0
bounds constr: [#S_637] true
bounds constr: [#S_638] true
bounds constr: [#S_639] (if (#paramvar111 >= 0) then #paramvar111 else -#paramvar111) <= 1 /\ (if (#paramvar107 >= 0) then #paramvar107 else -#paramvar107) <= 1
bounds constr: [#S_640] (if (#paramvar112 >= 0) then #paramvar112 else -#paramvar112) + (if (#paramvar113 >= 0) then #paramvar113 else -#paramvar113) <= 1 /\ (if (#paramvar108 >= 0) then #paramvar108 else -#paramvar108) + (if (#paramvar109 >= 0) then #paramvar109 else -#paramvar109) <= 1
bounds constr: [#S_641] true
bounds constr: [#S_642] true
bounds constr: [#S_643] true
bounds constr: [#S_644] true
bounds constr: [#S_645] true
bounds constr: [#S_646] true
bounds constr: [#S_647] true
bounds constr: [#S_648] true
bounds constr: [#S_649] true
bounds constr: [#S_650] true
bounds constr: [#S_651] (if (#paramvar79 >= 0) then #paramvar79 else -#paramvar79) <= 0
bounds constr: [#S_652] (if (#paramvar80 >= 0) then #paramvar80 else -#paramvar80) + (if (#paramvar81 >= 0) then #paramvar81 else -#paramvar81) <= 1
bounds constr: [#S_653] true
bounds constr: [#S_654] (if (#paramvar71 >= 0) then #paramvar71 else -#paramvar71) <= 1 /\ (if (#paramvar63 >= 0) then #paramvar63 else -#paramvar63) <= 1
bounds constr: [#S_655] (if (#paramvar72 >= 0) then #paramvar72 else -#paramvar72) + (if (#paramvar73 >= 0) then #paramvar73 else -#paramvar73) <= 2 /\ (if (#paramvar64 >= 0) then #paramvar64 else -#paramvar64) + (if (#paramvar65 >= 0) then #paramvar65 else -#paramvar65) <= 2
bounds constr: [#S_656] true
bounds constr: [#S_657] (if (#paramvar57 >= 0) then #paramvar57 else -#paramvar57) <= 1 /\ (if (#paramvar51 >= 0) then #paramvar51 else -#paramvar51) <= 1
bounds constr: [#S_658] (if (#paramvar58 >= 0) then #paramvar58 else -#paramvar58) + (if (#paramvar59 >= 0) then #paramvar59 else -#paramvar59) <= 1 /\ (if (#paramvar52 >= 0) then #paramvar52 else -#paramvar52) + (if (#paramvar53 >= 0) then #paramvar53 else -#paramvar53) <= 1
bounds constr: [#S_659] true
bounds constr: [#S_660] true
bounds constr: [#S_661] true
bounds constr: [#S_662] true
constraints generated
sat
************** current phase of 14th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ -1 + x1 >= 0 \/ x2 = 0 /\ -1 + x2 = 0 /\ -1 + -x2 >= 0
X3(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x1 + x2 != 0 /\ -1 + -x1 >= 0 \/ x2 != 0 /\ -1 + x1 + x2 != 0 /\ x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 >= 0 \/ x1 + -x2 = 0 /\ x1 + -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(1, -2) /\ X90(0, -1) => X1(1, -1));
(X2(1, 2) /\ X93(-2, -2) => X1(1, -2));
(X2(2, -1) /\ X95(2, 1) => X1(2, 1));
(X3(-1, -1) => X2(-1, -1));
(X90(-1, 1) => X3(-1, 0));
(X93(0, 0) => X3(0, 0));
(X95(0, 1) => X3(0, -1))

************** current phase of 14th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (12): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, 0) => )]
*** undecided (115): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(0, -1) => );..]

*** labeling with SAT solving
************** current phase of 14th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 1 (-2))
  added as a negative example with: 
  add negative example(X1(1, -2) => )
refuting (X1 1 (-1))
  added as a negative example with: 
  add negative example(X1(1, -1) => )
refuting (X1 2 1)
  added as a negative example with: 
  add negative example(X1(2, 1) => )
refuting (X2 (-1) (-1))
refuting (X2 1 (-2))
refuting (X2 1 2)
refuting (X2 2 (-1))
refuting (X3 (-1) (-1))
refuting (X3 (-1) 0)
refuting (X3 0 (-1))
refuting (X3 0 0)
refuting (X90 (-1) 1)
refuting (X90 0 (-1))
refuting (X93 (-2) (-2))
refuting (X93 0 0)
refuting (X95 0 1)
refuting (X95 2 1)
proving (X1 1 (-2))
proving (X1 1 (-1))
proving (X1 2 1)
proving (X2 (-1) (-1))
proving (X2 1 (-2))
proving (X2 1 2)
proving (X2 2 (-1))
proving (X3 (-1) (-1))
proving (X3 (-1) 0)
proving (X3 0 (-1))
proving (X3 0 0)
proving (X90 (-1) 1)
proving (X90 0 (-1))
proving (X93 (-2) (-2))
proving (X93 0 0)
proving (X95 0 1)
proving (X95 2 1)
*** Example Instances obtained by Resolution:
(X1(1, -2) => );
(X1(1, -1) => );
(X1(2, 1) => )

************** current phase of 14th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (15): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(2, 1) => )]
*** undecided (115): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(1, 1) => );
(X2(0, -1) /\ X95(0, -1) => );..]

*** labeling with SAT solving
************** current phase of 15th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
table:
FTFFFT_TFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
table:
FTFFTT_TFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (15):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
table:
FFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
table:
FTTFFTFFF___TF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
table:
FTFTF_TTFFFFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
table:
FTFFTF__TFFFFFT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (29):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFT
TTFTFFFFFFFFFTFFF__TFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (13):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
table:
FTFTFF_TTFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (24):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
table:
TTFTFFFTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTT
TFTTTTTTTTTTTTTFFTTTFTTF

gen constr of example:(X1(1, -2) => )
constr: [#S_663] #paramvar50 > 0 \/ #paramvar47 + #paramvar48 + #paramvar49 * -2 < 0
gen constr of example:(X1(1, -1) => )
constr: [#S_664] #paramvar50 > 0 \/ #paramvar47 + #paramvar48 + -#paramvar49 < 0
gen constr of example:(X1(2, 1) => )
constr: [#S_665] #paramvar50 > 0 \/ #paramvar47 + #paramvar48 * 2 + #paramvar49 < 0
gen constr of example:(X2(1, -2) /\ X90(0, -1) => )
constr: [#S_666] #paramvar82 > 0 \/ #paramvar79 + -#paramvar81 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 + #paramvar59 * -2 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 + #paramvar53 * -2 < 0)
gen constr of example:(X2(1, 2) /\ X93(-2, -2) => )
constr: [#S_667] (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 < 0 \/ #paramvar57 + #paramvar58 + #paramvar59 * 2 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 < 0 \/ #paramvar51 + #paramvar52 + #paramvar53 * 2 < 0) \/ (#paramvar106 < 0 \/ #paramvar103 + #paramvar104 * -2 + #paramvar105 * -2 < 0) /\ (#paramvar102 < 0 \/ #paramvar99 + #paramvar100 * -2 + #paramvar101 * -2 < 0)
gen constr of example:(X2(2, -1) /\ X95(2, 1) => )
constr: [#S_668] #paramvar118 > 0 \/ #paramvar115 + #paramvar116 * 2 + #paramvar117 < 0 \/ (#paramvar60 < 0 \/ #paramvar61 < 0 \/ #paramvar62 > 0 \/ #paramvar57 + #paramvar58 * 2 + -#paramvar59 < 0) /\ (#paramvar54 < 0 \/ #paramvar55 < 0 \/ #paramvar56 > 0 \/ #paramvar51 + #paramvar52 * 2 + -#paramvar53 < 0)
gen constr of example:(X3(-1, -1) => X2(-1, -1))
constr: [#S_669] (#paramvar74 > 0 \/ #paramvar75 > 0 \/ #paramvar76 < 0 \/ #paramvar77 > 0 \/ #paramvar78 > 0 \/ #paramvar71 + -#paramvar72 + -#paramvar73 < 0) /\ (#paramvar66 > 0 \/ #paramvar67 > 0 \/ #paramvar68 < 0 \/ #paramvar69 > 0 \/ #paramvar70 > 0 \/ #paramvar63 + -#paramvar64 + -#paramvar65 < 0) \/ #paramvar60 >= 0 /\ #paramvar61 >= 0 /\ #paramvar62 <= 0 /\ #paramvar57 + -#paramvar58 + -#paramvar59 >= 0 \/ #paramvar54 >= 0 /\ #paramvar55 >= 0 /\ #paramvar56 <= 0 /\ #paramvar51 + -#paramvar52 + -#paramvar53 >= 0
gen constr of example:(X90(-1, 1) => X3(-1, 0))
constr: [#S_670] #paramvar82 > 0 \/ #paramvar79 + -#paramvar80 + #paramvar81 < 0 \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 >= 0 /\ #paramvar71 + -#paramvar72 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 >= 0 /\ #paramvar63 + -#paramvar64 >= 0
gen constr of example:(X95(0, 1) => X3(0, -1))
constr: [#S_671] #paramvar118 > 0 \/ #paramvar115 + #paramvar117 < 0 \/ #paramvar74 <= 0 /\ #paramvar75 <= 0 /\ #paramvar76 >= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 + -#paramvar73 >= 0 \/ #paramvar66 <= 0 /\ #paramvar67 <= 0 /\ #paramvar68 >= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 + -#paramvar65 >= 0
gen constr of example:(X93(0, 0) => X3(0, 0))
constr: [#S_672] (#paramvar106 < 0 \/ #paramvar103 < 0) /\ (#paramvar102 < 0 \/ #paramvar99 < 0) \/ #paramvar74 >= 0 /\ #paramvar75 <= 0 /\ #paramvar76 <= 0 /\ #paramvar77 <= 0 /\ #paramvar78 <= 0 /\ #paramvar71 >= 0 \/ #paramvar66 >= 0 /\ #paramvar67 <= 0 /\ #paramvar68 <= 0 /\ #paramvar69 <= 0 /\ #paramvar70 <= 0 /\ #paramvar63 >= 0
bounds constr: [#S_673] true
bounds constr: [#S_674] true
bounds constr: [#S_675] true
bounds constr: [#S_676] (if (#paramvar115 >= 0) then #paramvar115 else -#paramvar115) <= 0
bounds constr: [#S_677] (if (#paramvar116 >= 0) then #paramvar116 else -#paramvar116) + (if (#paramvar117 >= 0) then #paramvar117 else -#paramvar117) <= 1
bounds constr: [#S_678] true
bounds constr: [#S_679] true
bounds constr: [#S_680] true
bounds constr: [#S_681] true
bounds constr: [#S_682] (if (#paramvar103 >= 0) then #paramvar103 else -#paramvar103) <= 1 /\ (if (#paramvar99 >= 0) then #paramvar99 else -#paramvar99) <= 1
bounds constr: [#S_683] (if (#paramvar104 >= 0) then #paramvar104 else -#paramvar104) + (if (#paramvar105 >= 0) then #paramvar105 else -#paramvar105) <= 2 /\ (if (#paramvar100 >= 0) then #paramvar100 else -#paramvar100) + (if (#paramvar101 >= 0) then #paramvar101 else -#paramvar101) <= 2
bounds constr: [#S_684] true
bounds constr: [#S_685] true
bounds constr: [#S_686] true
bounds constr: [#S_687] true
bounds constr: [#S_688] true
bounds constr: [#S_689] true
bounds constr: [#S_690] true
bounds constr: [#S_691] (if (#paramvar79 >= 0) then #paramvar79 else -#paramvar79) <= 0
bounds constr: [#S_692] (if (#paramvar80 >= 0) then #paramvar80 else -#paramvar80) + (if (#paramvar81 >= 0) then #paramvar81 else -#paramvar81) <= 1
bounds constr: [#S_693] true
bounds constr: [#S_694] (if (#paramvar71 >= 0) then #paramvar71 else -#paramvar71) <= 1 /\ (if (#paramvar63 >= 0) then #paramvar63 else -#paramvar63) <= 1
bounds constr: [#S_695] (if (#paramvar72 >= 0) then #paramvar72 else -#paramvar72) + (if (#paramvar73 >= 0) then #paramvar73 else -#paramvar73) <= 2 /\ (if (#paramvar64 >= 0) then #paramvar64 else -#paramvar64) + (if (#paramvar65 >= 0) then #paramvar65 else -#paramvar65) <= 2
bounds constr: [#S_696] true
bounds constr: [#S_697] (if (#paramvar57 >= 0) then #paramvar57 else -#paramvar57) <= 1 /\ (if (#paramvar51 >= 0) then #paramvar51 else -#paramvar51) <= 1
bounds constr: [#S_698] (if (#paramvar58 >= 0) then #paramvar58 else -#paramvar58) + (if (#paramvar59 >= 0) then #paramvar59 else -#paramvar59) <= 1 /\ (if (#paramvar52 >= 0) then #paramvar52 else -#paramvar52) + (if (#paramvar53 >= 0) then #paramvar53 else -#paramvar53) <= 1
bounds constr: [#S_699] true
bounds constr: [#S_700] (if (#paramvar47 >= 0) then #paramvar47 else -#paramvar47) <= 0
bounds constr: [#S_701] (if (#paramvar48 >= 0) then #paramvar48 else -#paramvar48) + (if (#paramvar49 >= 0) then #paramvar49 else -#paramvar49) <= 1
bounds constr: [#S_702] true
constraints generated
unsat, reason:|#S_345|,|#S_347|,|#S_364|,|#S_375|,|#S_398|,|#S_399|,|#S_437|,|#S_471|,|#S_514|,|#S_552|,|#S_669|,|#S_671|
************* increasing number_of_conj of X2***************
************* increasing number_of_conj of X3***************
************* increasing number_of_disj of X95***************
************* increasing upper_bound_coeff of X95***************
************* increasing upper_bound_const of X95***************
[X1](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X2](x1: int, x2: int)
depth: 0, #quals: 3, #terms: 0
[X3](x1: int, x2: int)
depth: 0, #quals: 5, #terms: 0
[X90](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X91](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X92](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X93](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X94](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X95](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X96](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
templates generated
solver initialized

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
table:
FTFFFT_TFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (10):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
table:
FTFFTT_TFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (15):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
table:
FFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
table:
FTTFFTFFF___TF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
table:
FTFTF_TTFFFFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
table:
FTFFTF__TFFFFFT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (29):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFT
TTFTFFFFFFFFFTFFF__TFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (14):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
table:
FTFTFF_TTFFFF_


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (24):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
table:
TTFTFFFTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTT
TFTTTTTTTTTTTTTFFTTTFTTF

gen constr of example:(X1(-4, -3) => )
constr: [#S_703] #paramvar130 > 0 \/ #paramvar127 + #paramvar128 * -4 + #paramvar129 * -3 < 0
gen constr of example:(X1(-3, -2) => )
constr: [#S_704] #paramvar130 > 0 \/ #paramvar127 + #paramvar128 * -3 + #paramvar129 * -2 < 0
gen constr of example:(X1(-2, -1) => )
constr: [#S_705] #paramvar130 > 0 \/ #paramvar127 + #paramvar128 * -2 + -#paramvar129 < 0
gen constr of example:(X1(-1, -2) => )
constr: [#S_706] #paramvar130 > 0 \/ #paramvar127 + -#paramvar128 + #paramvar129 * -2 < 0
gen constr of example:(X1(-1, 0) => )
constr: [#S_707] #paramvar130 > 0 \/ #paramvar127 + -#paramvar128 < 0
gen constr of example:(X1(-1, 1) => )
constr: [#S_708] #paramvar130 > 0 \/ #paramvar127 + -#paramvar128 + #paramvar129 < 0
gen constr of example:(X1(-1, 2) => )
constr: [#S_709] #paramvar130 > 0 \/ #paramvar127 + -#paramvar128 + #paramvar129 * 2 < 0
gen constr of example:(X1(-1, 3) => )
constr: [#S_710] #paramvar130 > 0 \/ #paramvar127 + -#paramvar128 + #paramvar129 * 3 < 0
gen constr of example:(X1(0, -2) => )
constr: [#S_711] #paramvar130 > 0 \/ #paramvar127 + #paramvar129 * -2 < 0
gen constr of example:(X1(0, -1) => )
constr: [#S_712] #paramvar130 > 0 \/ #paramvar127 + -#paramvar129 < 0
gen constr of example:(X1(0, 1) => )
constr: [#S_713] #paramvar130 > 0 \/ #paramvar127 + #paramvar129 < 0
gen constr of example:(X1(1, -2) => )
constr: [#S_714] #paramvar130 > 0 \/ #paramvar127 + #paramvar128 + #paramvar129 * -2 < 0
gen constr of example:(X1(1, -1) => )
constr: [#S_715] #paramvar130 > 0 \/ #paramvar127 + #paramvar128 + -#paramvar129 < 0
gen constr of example:(X1(1, 0) => )
constr: [#S_716] #paramvar130 > 0 \/ #paramvar127 + #paramvar128 < 0
gen constr of example:(X1(2, 1) => )
constr: [#S_717] #paramvar130 > 0 \/ #paramvar127 + #paramvar128 * 2 + #paramvar129 < 0
gen constr of example:(X2(-4, 2) /\ X91(0, -3) => )
constr: [#S_718] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 * -4 + #paramvar145 * 2 < 0 \/ #paramvar140 + #paramvar141 * -4 + #paramvar142 * 2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 * -4 + #paramvar136 * 2 < 0 \/ #paramvar131 + #paramvar132 * -4 + #paramvar133 * 2 < 0) \/ (#paramvar182 > 0 \/ #paramvar179 + #paramvar181 * -3 < 0) /\ (#paramvar178 > 0 \/ #paramvar175 + #paramvar177 * -3 < 0)
gen constr of example:(X2(-3, 2) /\ X93(0, -2) => )
constr: [#S_719] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 * -3 + #paramvar145 * 2 < 0 \/ #paramvar140 + #paramvar141 * -3 + #paramvar142 * 2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 * -3 + #paramvar136 * 2 < 0 \/ #paramvar131 + #paramvar132 * -3 + #paramvar133 * 2 < 0) \/ (#paramvar198 > 0 \/ #paramvar195 + #paramvar197 * -2 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + #paramvar193 * -2 < 0)
gen constr of example:(X2(-2, 0) /\ X91(-1, -1) => )
constr: [#S_720] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 * -2 < 0 \/ #paramvar140 + #paramvar141 * -2 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 * -2 < 0 \/ #paramvar131 + #paramvar132 * -2 < 0) \/ (#paramvar182 < 0 \/ #paramvar179 + -#paramvar180 + -#paramvar181 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 + -#paramvar176 + -#paramvar177 < 0)
gen constr of example:(X2(-2, 1) /\ X94(0, -1) => )
constr: [#S_721] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 * -2 + #paramvar145 < 0 \/ #paramvar140 + #paramvar141 * -2 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 * -2 + #paramvar136 < 0 \/ #paramvar131 + #paramvar132 * -2 + #paramvar133 < 0) \/ (#paramvar206 > 0 \/ #paramvar203 + -#paramvar205 < 0) /\ (#paramvar202 > 0 \/ #paramvar199 + -#paramvar201 < 0)
gen constr of example:(X2(-1, -1) /\ X90(0, 0) => )
constr: [#S_722] #paramvar174 < 0 \/ #paramvar171 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar144 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar141 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar135 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar132 + -#paramvar133 < 0)
gen constr of example:(X2(-1, -1) /\ X95(0, 0) => )
constr: [#S_723] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar144 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar141 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar135 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar132 + -#paramvar133 < 0) \/ (#paramvar214 < 0 \/ #paramvar211 < 0) /\ (#paramvar210 < 0 \/ #paramvar207 < 0)
gen constr of example:(X2(-1, 0) /\ X92(1, 0) => )
constr: [#S_724] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 < 0 \/ #paramvar140 + -#paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 < 0 \/ #paramvar131 + -#paramvar132 < 0) \/ (#paramvar190 > 0 \/ #paramvar187 + #paramvar188 < 0) /\ (#paramvar186 > 0 \/ #paramvar183 + #paramvar184 < 0)
gen constr of example:(X2(-1, 0) /\ X93(1, 0) => )
constr: [#S_725] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 < 0 \/ #paramvar140 + -#paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 < 0 \/ #paramvar131 + -#paramvar132 < 0) \/ (#paramvar198 > 0 \/ #paramvar195 + #paramvar196 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + #paramvar192 < 0)
gen constr of example:(X2(-1, 0) /\ X96(0, -2) => )
constr: [#S_726] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 < 0 \/ #paramvar140 + -#paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 < 0 \/ #paramvar131 + -#paramvar132 < 0) \/ (#paramvar222 > 0 \/ #paramvar219 + #paramvar221 * -2 < 0) /\ (#paramvar218 > 0 \/ #paramvar215 + #paramvar217 * -2 < 0)
gen constr of example:(X2(-1, 0) /\ X96(1, 0) => )
constr: [#S_727] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 < 0 \/ #paramvar140 + -#paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 < 0 \/ #paramvar131 + -#paramvar132 < 0) \/ (#paramvar222 > 0 \/ #paramvar219 + #paramvar220 < 0) /\ (#paramvar218 > 0 \/ #paramvar215 + #paramvar216 < 0)
gen constr of example:(X2(-1, 0) /\ X96(1, 1) => )
constr: [#S_728] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 < 0 \/ #paramvar140 + -#paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 < 0 \/ #paramvar131 + -#paramvar132 < 0) \/ (#paramvar222 < 0 \/ #paramvar219 + #paramvar220 + #paramvar221 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 + #paramvar216 + #paramvar217 < 0)
gen constr of example:(X2(-1, 1) /\ X90(0, 2) => )
constr: [#S_729] #paramvar174 > 0 \/ #paramvar171 + #paramvar173 * 2 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 < 0)
gen constr of example:(X2(-1, 1) /\ X94(0, 0) => )
constr: [#S_730] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 < 0) \/ (#paramvar206 < 0 \/ #paramvar203 < 0) /\ (#paramvar202 < 0 \/ #paramvar199 < 0)
gen constr of example:(X2(-1, 2) /\ X90(0, 3) => )
constr: [#S_731] #paramvar174 > 0 \/ #paramvar171 + #paramvar173 * 3 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 * 2 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 * 2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 * 2 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 * 2 < 0)
gen constr of example:(X2(-1, 2) /\ X92(2, 2) => )
constr: [#S_732] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 * 2 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 * 2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 * 2 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 * 2 < 0) \/ (#paramvar190 < 0 \/ #paramvar187 + #paramvar188 * 2 + #paramvar189 * 2 < 0) /\ (#paramvar186 < 0 \/ #paramvar183 + #paramvar184 * 2 + #paramvar185 * 2 < 0)
gen constr of example:(X2(0, -2) /\ X91(1, 1) => )
constr: [#S_733] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 * -2 < 0 \/ #paramvar140 + #paramvar142 * -2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 * -2 < 0 \/ #paramvar131 + #paramvar133 * -2 < 0) \/ (#paramvar182 < 0 \/ #paramvar179 + #paramvar180 + #paramvar181 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 + #paramvar176 + #paramvar177 < 0)
gen constr of example:(X2(0, -2) /\ X91($1, 1) => )
constr: [#S_734] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 * -2 < 0 \/ #paramvar140 + #paramvar142 * -2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 * -2 < 0 \/ #paramvar131 + #paramvar133 * -2 < 0) \/ (#paramvar182 > 0 \/ #paramvar179 + #paramvar181 < 0) /\ (#paramvar178 > 0 \/ #paramvar175 + #paramvar177 < 0)
gen constr of example:(X2(0, -1) /\ X92(-1, -1) => )
constr: [#S_735] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar133 < 0) \/ (#paramvar190 < 0 \/ #paramvar187 + -#paramvar188 + -#paramvar189 < 0) /\ (#paramvar186 < 0 \/ #paramvar183 + -#paramvar184 + -#paramvar185 < 0)
gen constr of example:(X2(0, -1) /\ X93(1, 1) => )
constr: [#S_736] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar133 < 0) \/ (#paramvar198 < 0 \/ #paramvar195 + #paramvar196 + #paramvar197 < 0) /\ (#paramvar194 < 0 \/ #paramvar191 + #paramvar192 + #paramvar193 < 0)
gen constr of example:(X2(0, -1) /\ X95(0, -1) => )
constr: [#S_737] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar133 < 0) \/ (#paramvar214 > 0 \/ #paramvar211 + -#paramvar213 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + -#paramvar209 < 0)
gen constr of example:(X2(0, -1) /\ X95(1, 1) => )
constr: [#S_738] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar133 < 0) \/ (#paramvar214 < 0 \/ #paramvar211 + #paramvar212 + #paramvar213 < 0) /\ (#paramvar210 < 0 \/ #paramvar207 + #paramvar208 + #paramvar209 < 0)
gen constr of example:(X2(0, -1) /\ X93($1, 1) => )
constr: [#S_739] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar133 < 0) \/ (#paramvar198 > 0 \/ #paramvar195 + #paramvar197 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + #paramvar193 < 0)
gen constr of example:(X2(0, -1) /\ X95($1, 1) => )
constr: [#S_740] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar133 < 0) \/ (#paramvar214 > 0 \/ #paramvar211 + #paramvar213 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + #paramvar209 < 0)
gen constr of example:(X2(0, 0) /\ X90(1, 1) => )
constr: [#S_741] #paramvar174 < 0 \/ #paramvar171 + #paramvar172 + #paramvar173 < 0 \/ (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 < 0 \/ #paramvar140 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 < 0 \/ #paramvar131 < 0)
gen constr of example:(X2(0, 0) /\ X96(-1, -1) => )
constr: [#S_742] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 < 0 \/ #paramvar140 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 < 0 \/ #paramvar131 < 0) \/ (#paramvar222 < 0 \/ #paramvar219 + -#paramvar220 + -#paramvar221 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 + -#paramvar216 + -#paramvar217 < 0)
gen constr of example:(X2(0, 0) /\ X96(1, 1) => )
constr: [#S_743] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 < 0 \/ #paramvar140 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 < 0 \/ #paramvar131 < 0) \/ (#paramvar222 < 0 \/ #paramvar219 + #paramvar220 + #paramvar221 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 + #paramvar216 + #paramvar217 < 0)
gen constr of example:(X2(0, 0) /\ X90($1, 1) => )
constr: [#S_744] #paramvar174 > 0 \/ #paramvar171 + #paramvar173 < 0 \/ (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 < 0 \/ #paramvar140 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 < 0 \/ #paramvar131 < 0)
gen constr of example:(X2(0, 0) /\ X91($1, -1) => )
constr: [#S_745] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 < 0 \/ #paramvar140 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 < 0 \/ #paramvar131 < 0) \/ (#paramvar182 > 0 \/ #paramvar179 + -#paramvar181 < 0) /\ (#paramvar178 > 0 \/ #paramvar175 + -#paramvar177 < 0)
gen constr of example:(X2(0, 0) /\ X96($1, 1) => )
constr: [#S_746] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 < 0 \/ #paramvar140 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 < 0 \/ #paramvar131 < 0) \/ (#paramvar222 > 0 \/ #paramvar219 + #paramvar221 < 0) /\ (#paramvar218 > 0 \/ #paramvar215 + #paramvar217 < 0)
gen constr of example:(X2(0, 1) /\ X91(-3, -2) => )
constr: [#S_747] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 < 0 \/ #paramvar140 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 < 0 \/ #paramvar131 + #paramvar133 < 0) \/ (#paramvar182 > 0 \/ #paramvar179 + #paramvar180 * -3 + #paramvar181 * -2 < 0) /\ (#paramvar178 > 0 \/ #paramvar175 + #paramvar176 * -3 + #paramvar177 * -2 < 0)
gen constr of example:(X2(0, 1) /\ X91(-2, -2) => )
constr: [#S_748] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 < 0 \/ #paramvar140 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 < 0 \/ #paramvar131 + #paramvar133 < 0) \/ (#paramvar182 < 0 \/ #paramvar179 + #paramvar180 * -2 + #paramvar181 * -2 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 + #paramvar176 * -2 + #paramvar177 * -2 < 0)
gen constr of example:(X2(0, 1) /\ X92(1, 1) => )
constr: [#S_749] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 < 0 \/ #paramvar140 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 < 0 \/ #paramvar131 + #paramvar133 < 0) \/ (#paramvar190 < 0 \/ #paramvar187 + #paramvar188 + #paramvar189 < 0) /\ (#paramvar186 < 0 \/ #paramvar183 + #paramvar184 + #paramvar185 < 0)
gen constr of example:(X2(0, 1) /\ X93(-1, -1) => )
constr: [#S_750] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 < 0 \/ #paramvar140 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 < 0 \/ #paramvar131 + #paramvar133 < 0) \/ (#paramvar198 < 0 \/ #paramvar195 + -#paramvar196 + -#paramvar197 < 0) /\ (#paramvar194 < 0 \/ #paramvar191 + -#paramvar192 + -#paramvar193 < 0)
gen constr of example:(X2(0, 1) /\ X94(1, 1) => )
constr: [#S_751] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 < 0 \/ #paramvar140 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 < 0 \/ #paramvar131 + #paramvar133 < 0) \/ (#paramvar206 < 0 \/ #paramvar203 + #paramvar204 + #paramvar205 < 0) /\ (#paramvar202 < 0 \/ #paramvar199 + #paramvar200 + #paramvar201 < 0)
gen constr of example:(X2(0, 1) /\ X92($1, 1) => )
constr: [#S_752] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 < 0 \/ #paramvar140 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 < 0 \/ #paramvar131 + #paramvar133 < 0) \/ (#paramvar190 > 0 \/ #paramvar187 + #paramvar189 < 0) /\ (#paramvar186 > 0 \/ #paramvar183 + #paramvar185 < 0)
gen constr of example:(X2(0, 1) /\ X93($1, -1) => )
constr: [#S_753] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 < 0 \/ #paramvar140 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 < 0 \/ #paramvar131 + #paramvar133 < 0) \/ (#paramvar198 > 0 \/ #paramvar195 + -#paramvar197 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + -#paramvar193 < 0)
gen constr of example:(X2(0, 1) /\ X94($1, 1) => )
constr: [#S_754] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 < 0 \/ #paramvar140 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 < 0 \/ #paramvar131 + #paramvar133 < 0) \/ (#paramvar206 > 0 \/ #paramvar203 + #paramvar205 < 0) /\ (#paramvar202 > 0 \/ #paramvar199 + #paramvar201 < 0)
gen constr of example:(X2(1, -2) /\ X90(0, -1) => )
constr: [#S_755] #paramvar174 > 0 \/ #paramvar171 + -#paramvar173 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 + #paramvar145 * -2 < 0 \/ #paramvar140 + #paramvar141 + #paramvar142 * -2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 + #paramvar136 * -2 < 0 \/ #paramvar131 + #paramvar132 + #paramvar133 * -2 < 0)
gen constr of example:(X2(1, -1) /\ X90(0, 0) => )
constr: [#S_756] #paramvar174 < 0 \/ #paramvar171 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + #paramvar144 + -#paramvar145 < 0 \/ #paramvar140 + #paramvar141 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + #paramvar135 + -#paramvar136 < 0 \/ #paramvar131 + #paramvar132 + -#paramvar133 < 0)
gen constr of example:(X2(1, -1) /\ X90(1, 0) => )
constr: [#S_757] #paramvar174 > 0 \/ #paramvar171 + #paramvar172 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + #paramvar144 + -#paramvar145 < 0 \/ #paramvar140 + #paramvar141 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + #paramvar135 + -#paramvar136 < 0 \/ #paramvar131 + #paramvar132 + -#paramvar133 < 0)
gen constr of example:(X2(1, -1) /\ X91(0, 0) => )
constr: [#S_758] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + #paramvar144 + -#paramvar145 < 0 \/ #paramvar140 + #paramvar141 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + #paramvar135 + -#paramvar136 < 0 \/ #paramvar131 + #paramvar132 + -#paramvar133 < 0) \/ (#paramvar182 < 0 \/ #paramvar179 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 < 0)
gen constr of example:(X2(1, -1) /\ X95(0, 0) => )
constr: [#S_759] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + #paramvar144 + -#paramvar145 < 0 \/ #paramvar140 + #paramvar141 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + #paramvar135 + -#paramvar136 < 0 \/ #paramvar131 + #paramvar132 + -#paramvar133 < 0) \/ (#paramvar214 < 0 \/ #paramvar211 < 0) /\ (#paramvar210 < 0 \/ #paramvar207 < 0)
gen constr of example:(X2(1, 0) /\ X92(1, 0) => )
constr: [#S_760] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 < 0 \/ #paramvar140 + #paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 < 0 \/ #paramvar131 + #paramvar132 < 0) \/ (#paramvar190 > 0 \/ #paramvar187 + #paramvar188 < 0) /\ (#paramvar186 > 0 \/ #paramvar183 + #paramvar184 < 0)
gen constr of example:(X2(1, 0) /\ X93($1, 0) => )
constr: [#S_761] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 < 0 \/ #paramvar140 + #paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 < 0 \/ #paramvar131 + #paramvar132 < 0) \/ (#paramvar198 < 0 \/ #paramvar195 < 0) /\ (#paramvar194 < 0 \/ #paramvar191 < 0)
gen constr of example:(X2(1, 1) /\ X94(1, 0) => )
constr: [#S_762] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 + #paramvar145 < 0 \/ #paramvar140 + #paramvar141 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 + #paramvar136 < 0 \/ #paramvar131 + #paramvar132 + #paramvar133 < 0) \/ (#paramvar206 > 0 \/ #paramvar203 + #paramvar204 < 0) /\ (#paramvar202 > 0 \/ #paramvar199 + #paramvar200 < 0)
gen constr of example:(X2(1, 2) /\ X93(-2, -2) => )
constr: [#S_763] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 + #paramvar145 * 2 < 0 \/ #paramvar140 + #paramvar141 + #paramvar142 * 2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 + #paramvar136 * 2 < 0 \/ #paramvar131 + #paramvar132 + #paramvar133 * 2 < 0) \/ (#paramvar198 < 0 \/ #paramvar195 + #paramvar196 * -2 + #paramvar197 * -2 < 0) /\ (#paramvar194 < 0 \/ #paramvar191 + #paramvar192 * -2 + #paramvar193 * -2 < 0)
gen constr of example:(X2(2, -1) /\ X95(2, 1) => )
constr: [#S_764] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + #paramvar144 * 2 + -#paramvar145 < 0 \/ #paramvar140 + #paramvar141 * 2 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + #paramvar135 * 2 + -#paramvar136 < 0 \/ #paramvar131 + #paramvar132 * 2 + -#paramvar133 < 0) \/ (#paramvar214 > 0 \/ #paramvar211 + #paramvar212 * 2 + #paramvar213 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + #paramvar208 * 2 + #paramvar209 < 0)
gen constr of example:(X3(-2, 0) => X2(-2, 0))
constr: [#S_765] (#paramvar166 < 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 * -2 < 0 \/ #paramvar160 + #paramvar161 * -2 < 0) /\ (#paramvar155 < 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 * -2 < 0 \/ #paramvar149 + #paramvar150 * -2 < 0) \/ #paramvar146 <= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 * -2 >= 0 /\ #paramvar140 + #paramvar141 * -2 >= 0 \/ #paramvar137 <= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 * -2 >= 0 /\ #paramvar131 + #paramvar132 * -2 >= 0
gen constr of example:(X3(-2, 3) => X2(-2, 3))
constr: [#S_766] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 < 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 * -2 + #paramvar165 * 3 < 0 \/ #paramvar160 + #paramvar161 * -2 + #paramvar162 * 3 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 < 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 * -2 + #paramvar154 * 3 < 0 \/ #paramvar149 + #paramvar150 * -2 + #paramvar151 * 3 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 * -2 + #paramvar145 * 3 >= 0 /\ #paramvar140 + #paramvar141 * -2 + #paramvar142 * 3 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 * -2 + #paramvar136 * 3 >= 0 /\ #paramvar131 + #paramvar132 * -2 + #paramvar133 * 3 >= 0
gen constr of example:(X3(-1, -1) => X2(-1, -1))
constr: [#S_767] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 < 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + -#paramvar164 + -#paramvar165 < 0 \/ #paramvar160 + -#paramvar161 + -#paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 < 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + -#paramvar153 + -#paramvar154 < 0 \/ #paramvar149 + -#paramvar150 + -#paramvar151 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 <= 0 /\ #paramvar143 + -#paramvar144 + -#paramvar145 >= 0 /\ #paramvar140 + -#paramvar141 + -#paramvar142 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 <= 0 /\ #paramvar134 + -#paramvar135 + -#paramvar136 >= 0 /\ #paramvar131 + -#paramvar132 + -#paramvar133 >= 0
gen constr of example:(X3(-3, -3) /\ X3(0, -3) => X2(0, -3))
constr: [#S_768] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 * -3 + #paramvar165 * -3 < 0 \/ #paramvar160 + #paramvar161 * -3 + #paramvar162 * -3 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 * -3 + #paramvar154 * -3 < 0 \/ #paramvar149 + #paramvar150 * -3 + #paramvar151 * -3 < 0) \/ (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar165 * -3 < 0 \/ #paramvar160 + #paramvar162 * -3 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar154 * -3 < 0 \/ #paramvar149 + #paramvar151 * -3 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar145 * -3 >= 0 /\ #paramvar140 + #paramvar142 * -3 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar136 * -3 >= 0 /\ #paramvar131 + #paramvar133 * -3 >= 0
gen constr of example:(X3(0, -1) => X2(0, -1))
constr: [#S_769] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 < 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + -#paramvar165 < 0 \/ #paramvar160 + -#paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 < 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + -#paramvar154 < 0 \/ #paramvar149 + -#paramvar151 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 <= 0 /\ #paramvar143 + -#paramvar145 >= 0 /\ #paramvar140 + -#paramvar142 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 <= 0 /\ #paramvar134 + -#paramvar136 >= 0 /\ #paramvar131 + -#paramvar133 >= 0
gen constr of example:(X3(0, 0) => X2(0, 0))
constr: [#S_770] (#paramvar166 < 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 < 0 \/ #paramvar160 < 0) /\ (#paramvar155 < 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 < 0 \/ #paramvar149 < 0) \/ #paramvar146 <= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 >= 0 /\ #paramvar140 >= 0 \/ #paramvar137 <= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 >= 0 /\ #paramvar131 >= 0
gen constr of example:(X3(0, -1) /\ X3(1, -1) => X2(1, -1))
constr: [#S_771] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 < 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + -#paramvar165 < 0 \/ #paramvar160 + -#paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 < 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + -#paramvar154 < 0 \/ #paramvar149 + -#paramvar151 < 0) \/ (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 < 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 + -#paramvar165 < 0 \/ #paramvar160 + #paramvar161 + -#paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 < 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 + -#paramvar154 < 0 \/ #paramvar149 + #paramvar150 + -#paramvar151 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 <= 0 /\ #paramvar143 + #paramvar144 + -#paramvar145 >= 0 /\ #paramvar140 + #paramvar141 + -#paramvar142 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 <= 0 /\ #paramvar134 + #paramvar135 + -#paramvar136 >= 0 /\ #paramvar131 + #paramvar132 + -#paramvar133 >= 0
gen constr of example:(X3(0, 1) /\ X3(1, 1) => X2(1, 1))
constr: [#S_772] (#paramvar166 > 0 \/ #paramvar167 < 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 + #paramvar165 < 0 \/ #paramvar160 + #paramvar161 + #paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 < 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 + #paramvar154 < 0 \/ #paramvar149 + #paramvar150 + #paramvar151 < 0) \/ (#paramvar166 > 0 \/ #paramvar167 < 0 \/ #paramvar168 > 0 \/ #paramvar169 < 0 \/ #paramvar170 < 0 \/ #paramvar163 + #paramvar165 < 0 \/ #paramvar160 + #paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 < 0 \/ #paramvar157 > 0 \/ #paramvar158 < 0 \/ #paramvar159 < 0 \/ #paramvar152 + #paramvar154 < 0 \/ #paramvar149 + #paramvar151 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 <= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 + #paramvar145 >= 0 /\ #paramvar140 + #paramvar141 + #paramvar142 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 <= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 + #paramvar136 >= 0 /\ #paramvar131 + #paramvar132 + #paramvar133 >= 0
gen constr of example:(X3(1, 2) => X2(1, 2))
constr: [#S_773] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 < 0 \/ #paramvar163 + #paramvar164 + #paramvar165 * 2 < 0 \/ #paramvar160 + #paramvar161 + #paramvar162 * 2 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 < 0 \/ #paramvar152 + #paramvar153 + #paramvar154 * 2 < 0 \/ #paramvar149 + #paramvar150 + #paramvar151 * 2 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 + #paramvar145 * 2 >= 0 /\ #paramvar140 + #paramvar141 + #paramvar142 * 2 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 + #paramvar136 * 2 >= 0 /\ #paramvar131 + #paramvar132 + #paramvar133 * 2 >= 0
gen constr of example:(X3(1, -1) /\ X3(3, -1) => X2(3, -1))
constr: [#S_774] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 < 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 + -#paramvar165 < 0 \/ #paramvar160 + #paramvar161 + -#paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 < 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 + -#paramvar154 < 0 \/ #paramvar149 + #paramvar150 + -#paramvar151 < 0) \/ (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 < 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 * 3 + -#paramvar165 < 0 \/ #paramvar160 + #paramvar161 * 3 + -#paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 < 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 * 3 + -#paramvar154 < 0 \/ #paramvar149 + #paramvar150 * 3 + -#paramvar151 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 <= 0 /\ #paramvar143 + #paramvar144 * 3 + -#paramvar145 >= 0 /\ #paramvar140 + #paramvar141 * 3 + -#paramvar142 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 <= 0 /\ #paramvar134 + #paramvar135 * 3 + -#paramvar136 >= 0 /\ #paramvar131 + #paramvar132 * 3 + -#paramvar133 >= 0
gen constr of example:(X3(1, 3) /\ X3(3, 3) => X2(3, 3))
constr: [#S_775] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 + #paramvar165 * 3 < 0 \/ #paramvar160 + #paramvar161 + #paramvar162 * 3 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 + #paramvar154 * 3 < 0 \/ #paramvar149 + #paramvar150 + #paramvar151 * 3 < 0) \/ (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 * 3 + #paramvar165 * 3 < 0 \/ #paramvar160 + #paramvar161 * 3 + #paramvar162 * 3 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 * 3 + #paramvar154 * 3 < 0 \/ #paramvar149 + #paramvar150 * 3 + #paramvar151 * 3 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 * 3 + #paramvar145 * 3 >= 0 /\ #paramvar140 + #paramvar141 * 3 + #paramvar142 * 3 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 * 3 + #paramvar136 * 3 >= 0 /\ #paramvar131 + #paramvar132 * 3 + #paramvar133 * 3 >= 0
gen constr of example:(X91(-3, 1) => X3(-3, -2))
constr: [#S_776] (#paramvar182 > 0 \/ #paramvar179 + #paramvar180 * -3 + #paramvar181 < 0) /\ (#paramvar178 > 0 \/ #paramvar175 + #paramvar176 * -3 + #paramvar177 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 * -3 + #paramvar165 * -2 >= 0 /\ #paramvar160 + #paramvar161 * -3 + #paramvar162 * -2 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 * -3 + #paramvar154 * -2 >= 0 /\ #paramvar149 + #paramvar150 * -3 + #paramvar151 * -2 >= 0
gen constr of example:(X95(-3, -4) => X3(-3, -1))
constr: [#S_777] (#paramvar214 > 0 \/ #paramvar211 + #paramvar212 * -3 + #paramvar213 * -4 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + #paramvar208 * -3 + #paramvar209 * -4 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -3 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -3 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -3 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -3 + -#paramvar151 >= 0
gen constr of example:(X95(-3, 0) => X3(-3, -1))
constr: [#S_778] (#paramvar214 > 0 \/ #paramvar211 + #paramvar212 * -3 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + #paramvar208 * -3 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -3 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -3 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -3 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -3 + -#paramvar151 >= 0
gen constr of example:(X90(-2, -3) => X3(-2, -4))
constr: [#S_779] #paramvar174 > 0 \/ #paramvar171 + #paramvar172 * -2 + #paramvar173 * -3 < 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -2 + #paramvar165 * -4 >= 0 /\ #paramvar160 + #paramvar161 * -2 + #paramvar162 * -4 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -2 + #paramvar154 * -4 >= 0 /\ #paramvar149 + #paramvar150 * -2 + #paramvar151 * -4 >= 0
gen constr of example:(X90(-2, 0) => X3(-2, -1))
constr: [#S_780] #paramvar174 > 0 \/ #paramvar171 + #paramvar172 * -2 < 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 * -2 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -2 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 * -2 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -2 + -#paramvar151 >= 0
gen constr of example:(X91(-2, 0) => X3(-2, -1))
constr: [#S_781] (#paramvar182 > 0 \/ #paramvar179 + #paramvar180 * -2 < 0) /\ (#paramvar178 > 0 \/ #paramvar175 + #paramvar176 * -2 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 * -2 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -2 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 * -2 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -2 + -#paramvar151 >= 0
gen constr of example:(X95(-2, -2) => X3(-2, -1))
constr: [#S_782] (#paramvar214 < 0 \/ #paramvar211 + #paramvar212 * -2 + #paramvar213 * -2 < 0) /\ (#paramvar210 < 0 \/ #paramvar207 + #paramvar208 * -2 + #paramvar209 * -2 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 * -2 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -2 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 * -2 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -2 + -#paramvar151 >= 0
gen constr of example:(X95(-2, 0) => X3(-2, -1))
constr: [#S_783] (#paramvar214 > 0 \/ #paramvar211 + #paramvar212 * -2 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + #paramvar208 * -2 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 * -2 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -2 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 * -2 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -2 + -#paramvar151 >= 0
gen constr of example:(X92(-2, 0) => X3(-2, 0))
constr: [#S_784] (#paramvar190 > 0 \/ #paramvar187 + #paramvar188 * -2 < 0) /\ (#paramvar186 > 0 \/ #paramvar183 + #paramvar184 * -2 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -2 >= 0 /\ #paramvar160 + #paramvar161 * -2 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -2 >= 0 /\ #paramvar149 + #paramvar150 * -2 >= 0
gen constr of example:(X96(-2, -3) => X3(-2, 0))
constr: [#S_785] (#paramvar222 > 0 \/ #paramvar219 + #paramvar220 * -2 + #paramvar221 * -3 < 0) /\ (#paramvar218 > 0 \/ #paramvar215 + #paramvar216 * -2 + #paramvar217 * -3 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -2 >= 0 /\ #paramvar160 + #paramvar161 * -2 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -2 >= 0 /\ #paramvar149 + #paramvar150 * -2 >= 0
gen constr of example:(X91(-2, -2) => X3(-2, 1))
constr: [#S_786] (#paramvar182 < 0 \/ #paramvar179 + #paramvar180 * -2 + #paramvar181 * -2 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 + #paramvar176 * -2 + #paramvar177 * -2 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -2 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -2 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -2 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -2 + #paramvar151 >= 0
gen constr of example:(X93(-2, -1) => X3(-2, 1))
constr: [#S_787] (#paramvar198 > 0 \/ #paramvar195 + #paramvar196 * -2 + -#paramvar197 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + #paramvar192 * -2 + -#paramvar193 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -2 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -2 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -2 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -2 + #paramvar151 >= 0
gen constr of example:(X90(-1, -1) => X3(-1, -2))
constr: [#S_788] #paramvar174 < 0 \/ #paramvar171 + -#paramvar172 + -#paramvar173 < 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar164 + #paramvar165 * -2 >= 0 /\ #paramvar160 + -#paramvar161 + #paramvar162 * -2 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar153 + #paramvar154 * -2 >= 0 /\ #paramvar149 + -#paramvar150 + #paramvar151 * -2 >= 0
gen constr of example:(X92(-1, -1) => X3(-1, -1))
constr: [#S_789] (#paramvar190 < 0 \/ #paramvar187 + -#paramvar188 + -#paramvar189 < 0) /\ (#paramvar186 < 0 \/ #paramvar183 + -#paramvar184 + -#paramvar185 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar164 + -#paramvar165 >= 0 /\ #paramvar160 + -#paramvar161 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar153 + -#paramvar154 >= 0 /\ #paramvar149 + -#paramvar150 + -#paramvar151 >= 0
gen constr of example:(X95(-1, -1) => X3(-1, -1))
constr: [#S_790] (#paramvar214 < 0 \/ #paramvar211 + -#paramvar212 + -#paramvar213 < 0) /\ (#paramvar210 < 0 \/ #paramvar207 + -#paramvar208 + -#paramvar209 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar164 + -#paramvar165 >= 0 /\ #paramvar160 + -#paramvar161 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar153 + -#paramvar154 >= 0 /\ #paramvar149 + -#paramvar150 + -#paramvar151 >= 0
gen constr of example:(X90(-1, 1) => X3(-1, 0))
constr: [#S_791] #paramvar174 > 0 \/ #paramvar171 + -#paramvar172 + #paramvar173 < 0 \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + -#paramvar164 >= 0 /\ #paramvar160 + -#paramvar161 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + -#paramvar153 >= 0 /\ #paramvar149 + -#paramvar150 >= 0
gen constr of example:(X92(-1, 0) => X3(-1, 0))
constr: [#S_792] (#paramvar190 > 0 \/ #paramvar187 + -#paramvar188 < 0) /\ (#paramvar186 > 0 \/ #paramvar183 + -#paramvar184 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + -#paramvar164 >= 0 /\ #paramvar160 + -#paramvar161 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + -#paramvar153 >= 0 /\ #paramvar149 + -#paramvar150 >= 0
gen constr of example:(X93(-1, 0) => X3(-1, 0))
constr: [#S_793] (#paramvar198 > 0 \/ #paramvar195 + -#paramvar196 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + -#paramvar192 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + -#paramvar164 >= 0 /\ #paramvar160 + -#paramvar161 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + -#paramvar153 >= 0 /\ #paramvar149 + -#paramvar150 >= 0
gen constr of example:(X96(-1, -1) => X3(-1, 0))
constr: [#S_794] (#paramvar222 < 0 \/ #paramvar219 + -#paramvar220 + -#paramvar221 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 + -#paramvar216 + -#paramvar217 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + -#paramvar164 >= 0 /\ #paramvar160 + -#paramvar161 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + -#paramvar153 >= 0 /\ #paramvar149 + -#paramvar150 >= 0
gen constr of example:(X96(-1, 0) => X3(-1, 0))
constr: [#S_795] (#paramvar222 > 0 \/ #paramvar219 + -#paramvar220 < 0) /\ (#paramvar218 > 0 \/ #paramvar215 + -#paramvar216 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + -#paramvar164 >= 0 /\ #paramvar160 + -#paramvar161 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + -#paramvar153 >= 0 /\ #paramvar149 + -#paramvar150 >= 0
gen constr of example:(X93(-1, -1) => X3(-1, 1))
constr: [#S_796] (#paramvar198 < 0 \/ #paramvar195 + -#paramvar196 + -#paramvar197 < 0) /\ (#paramvar194 < 0 \/ #paramvar191 + -#paramvar192 + -#paramvar193 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar164 + #paramvar165 >= 0 /\ #paramvar160 + -#paramvar161 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar153 + #paramvar154 >= 0 /\ #paramvar149 + -#paramvar150 + #paramvar151 >= 0
gen constr of example:(X94(-1, -2) => X3(-1, 1))
constr: [#S_797] (#paramvar206 > 0 \/ #paramvar203 + -#paramvar204 + #paramvar205 * -2 < 0) /\ (#paramvar202 > 0 \/ #paramvar199 + -#paramvar200 + #paramvar201 * -2 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar164 + #paramvar165 >= 0 /\ #paramvar160 + -#paramvar161 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar153 + #paramvar154 >= 0 /\ #paramvar149 + -#paramvar150 + #paramvar151 >= 0
gen constr of example:(X94(-1, -1) => X3(-1, 1))
constr: [#S_798] (#paramvar206 < 0 \/ #paramvar203 + -#paramvar204 + -#paramvar205 < 0) /\ (#paramvar202 < 0 \/ #paramvar199 + -#paramvar200 + -#paramvar201 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar164 + #paramvar165 >= 0 /\ #paramvar160 + -#paramvar161 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar153 + #paramvar154 >= 0 /\ #paramvar149 + -#paramvar150 + #paramvar151 >= 0
gen constr of example:(X90(0, 0) => X3(0, -1))
constr: [#S_799] #paramvar174 < 0 \/ #paramvar171 < 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar165 >= 0 /\ #paramvar160 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar154 >= 0 /\ #paramvar149 + -#paramvar151 >= 0
gen constr of example:(X91(0, 0) => X3(0, -1))
constr: [#S_800] (#paramvar182 < 0 \/ #paramvar179 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar165 >= 0 /\ #paramvar160 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar154 >= 0 /\ #paramvar149 + -#paramvar151 >= 0
gen constr of example:(X93(0, 1) => X3(0, -1))
constr: [#S_801] (#paramvar198 > 0 \/ #paramvar195 + #paramvar197 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + #paramvar193 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar165 >= 0 /\ #paramvar160 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar154 >= 0 /\ #paramvar149 + -#paramvar151 >= 0
gen constr of example:(X95(0, -1) => X3(0, -1))
constr: [#S_802] (#paramvar214 > 0 \/ #paramvar211 + -#paramvar213 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + -#paramvar209 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar165 >= 0 /\ #paramvar160 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar154 >= 0 /\ #paramvar149 + -#paramvar151 >= 0
gen constr of example:(X95(0, 1) => X3(0, -1))
constr: [#S_803] (#paramvar214 > 0 \/ #paramvar211 + #paramvar213 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + #paramvar209 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar165 >= 0 /\ #paramvar160 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar154 >= 0 /\ #paramvar149 + -#paramvar151 >= 0
gen constr of example:(X95(0, $1) => X3(0, -1))
constr: [#S_804] (#paramvar214 < 0 \/ #paramvar211 < 0) /\ (#paramvar210 < 0 \/ #paramvar207 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + -#paramvar165 >= 0 /\ #paramvar160 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + -#paramvar154 >= 0 /\ #paramvar149 + -#paramvar151 >= 0
gen constr of example:(X92(0, 0) => X3(0, 0))
constr: [#S_805] (#paramvar190 < 0 \/ #paramvar187 < 0) /\ (#paramvar186 < 0 \/ #paramvar183 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 >= 0 /\ #paramvar160 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 >= 0 /\ #paramvar149 >= 0
gen constr of example:(X93(0, 0) => X3(0, 0))
constr: [#S_806] (#paramvar198 < 0 \/ #paramvar195 < 0) /\ (#paramvar194 < 0 \/ #paramvar191 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 >= 0 /\ #paramvar160 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 >= 0 /\ #paramvar149 >= 0
gen constr of example:(X96(0, 0) => X3(0, 0))
constr: [#S_807] (#paramvar222 < 0 \/ #paramvar219 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 >= 0 /\ #paramvar160 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 >= 0 /\ #paramvar149 >= 0
gen constr of example:(X96(0, 1) => X3(0, 0))
constr: [#S_808] (#paramvar222 > 0 \/ #paramvar219 + #paramvar221 < 0) /\ (#paramvar218 > 0 \/ #paramvar215 + #paramvar217 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 >= 0 /\ #paramvar160 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 >= 0 /\ #paramvar149 >= 0
gen constr of example:(X91(0, -2) => X3(0, 1))
constr: [#S_809] (#paramvar182 > 0 \/ #paramvar179 + #paramvar181 * -2 < 0) /\ (#paramvar178 > 0 \/ #paramvar175 + #paramvar177 * -2 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar151 >= 0
gen constr of example:(X94(0, -1) => X3(0, 1))
constr: [#S_810] (#paramvar206 > 0 \/ #paramvar203 + -#paramvar205 < 0) /\ (#paramvar202 > 0 \/ #paramvar199 + -#paramvar201 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar151 >= 0
gen constr of example:(X94(0, 0) => X3(0, 1))
constr: [#S_811] (#paramvar206 < 0 \/ #paramvar203 < 0) /\ (#paramvar202 < 0 \/ #paramvar199 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar151 >= 0
gen constr of example:(X94(0, 1) => X3(0, 1))
constr: [#S_812] (#paramvar206 > 0 \/ #paramvar203 + #paramvar205 < 0) /\ (#paramvar202 > 0 \/ #paramvar199 + #paramvar201 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar151 >= 0
gen constr of example:(X90(0, 3) => X3(0, 2))
constr: [#S_813] #paramvar174 > 0 \/ #paramvar171 + #paramvar173 * 3 < 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar165 * 2 >= 0 /\ #paramvar160 + #paramvar162 * 2 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar154 * 2 >= 0 /\ #paramvar149 + #paramvar151 * 2 >= 0
gen constr of example:(X90(1, 0) => X3(1, -1))
constr: [#S_814] #paramvar174 > 0 \/ #paramvar171 + #paramvar172 < 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 + -#paramvar151 >= 0
gen constr of example:(X95(1, 0) => X3(1, -1))
constr: [#S_815] (#paramvar214 > 0 \/ #paramvar211 + #paramvar212 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + #paramvar208 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 + -#paramvar151 >= 0
gen constr of example:(X96(1, 0) => X3(1, 0))
constr: [#S_816] (#paramvar222 > 0 \/ #paramvar219 + #paramvar220 < 0) /\ (#paramvar218 > 0 \/ #paramvar215 + #paramvar216 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 >= 0 /\ #paramvar160 + #paramvar161 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 >= 0 /\ #paramvar149 + #paramvar150 >= 0
gen constr of example:(X96(1, 1) => X3(1, 0))
constr: [#S_817] (#paramvar222 < 0 \/ #paramvar219 + #paramvar220 + #paramvar221 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 + #paramvar216 + #paramvar217 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 >= 0 /\ #paramvar160 + #paramvar161 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 >= 0 /\ #paramvar149 + #paramvar150 >= 0
gen constr of example:(X92(1, 1) => X3(1, 1))
constr: [#S_818] (#paramvar190 < 0 \/ #paramvar187 + #paramvar188 + #paramvar189 < 0) /\ (#paramvar186 < 0 \/ #paramvar183 + #paramvar184 + #paramvar185 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar161 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar150 + #paramvar151 >= 0
gen constr of example:(X94(1, 1) => X3(1, 1))
constr: [#S_819] (#paramvar206 < 0 \/ #paramvar203 + #paramvar204 + #paramvar205 < 0) /\ (#paramvar202 < 0 \/ #paramvar199 + #paramvar200 + #paramvar201 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar161 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar150 + #paramvar151 >= 0
gen constr of example:(X94(1, 2) => X3(1, 1))
constr: [#S_820] (#paramvar206 > 0 \/ #paramvar203 + #paramvar204 + #paramvar205 * 2 < 0) /\ (#paramvar202 > 0 \/ #paramvar199 + #paramvar200 + #paramvar201 * 2 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar161 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar150 + #paramvar151 >= 0
gen constr of example:(X92(2, 0) => X3(2, 0))
constr: [#S_821] (#paramvar190 > 0 \/ #paramvar187 + #paramvar188 * 2 < 0) /\ (#paramvar186 > 0 \/ #paramvar183 + #paramvar184 * 2 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * 2 >= 0 /\ #paramvar160 + #paramvar161 * 2 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * 2 >= 0 /\ #paramvar149 + #paramvar150 * 2 >= 0
gen constr of example:(X93(2, 0) => X3(2, 0))
constr: [#S_822] (#paramvar198 > 0 \/ #paramvar195 + #paramvar196 * 2 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + #paramvar192 * 2 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * 2 >= 0 /\ #paramvar160 + #paramvar161 * 2 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * 2 >= 0 /\ #paramvar149 + #paramvar150 * 2 >= 0
gen constr of example:(X90(3, -1) => X3(3, -2))
constr: [#S_823] #paramvar174 > 0 \/ #paramvar171 + #paramvar172 * 3 + -#paramvar173 < 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * 3 + #paramvar165 * -2 >= 0 /\ #paramvar160 + #paramvar161 * 3 + #paramvar162 * -2 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * 3 + #paramvar154 * -2 >= 0 /\ #paramvar149 + #paramvar150 * 3 + #paramvar151 * -2 >= 0
gen constr of example:(X91(3, 0) => X3(3, -1))
constr: [#S_824] (#paramvar182 > 0 \/ #paramvar179 + #paramvar180 * 3 < 0) /\ (#paramvar178 > 0 \/ #paramvar175 + #paramvar176 * 3 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * 3 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * 3 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * 3 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * 3 + -#paramvar151 >= 0
gen constr of example:(X95(3, 0) => X3(3, -1))
constr: [#S_825] (#paramvar214 > 0 \/ #paramvar211 + #paramvar212 * 3 < 0) /\ (#paramvar210 > 0 \/ #paramvar207 + #paramvar208 * 3 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * 3 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * 3 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * 3 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * 3 + -#paramvar151 >= 0
gen constr of example:(X91(4, 1) => X3(4, -2))
constr: [#S_826] (#paramvar182 > 0 \/ #paramvar179 + #paramvar180 * 4 + #paramvar181 < 0) /\ (#paramvar178 > 0 \/ #paramvar175 + #paramvar176 * 4 + #paramvar177 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * 4 + #paramvar165 * -2 >= 0 /\ #paramvar160 + #paramvar161 * 4 + #paramvar162 * -2 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * 4 + #paramvar154 * -2 >= 0 /\ #paramvar149 + #paramvar150 * 4 + #paramvar151 * -2 >= 0
gen constr of example:(X3($1, 1) /\ X3($2, 1) => X2($1, 1))
constr: [#S_827] (#paramvar166 > 0 \/ #paramvar167 < 0 \/ #paramvar168 > 0 \/ #paramvar169 < 0 \/ #paramvar170 < 0 \/ #paramvar163 + #paramvar165 < 0 \/ #paramvar160 + #paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 < 0 \/ #paramvar157 > 0 \/ #paramvar158 < 0 \/ #paramvar159 < 0 \/ #paramvar152 + #paramvar154 < 0 \/ #paramvar149 + #paramvar151 < 0) \/ (#paramvar166 > 0 \/ #paramvar167 < 0 \/ #paramvar168 > 0 \/ #paramvar169 < 0 \/ #paramvar170 < 0 \/ #paramvar163 + #paramvar165 < 0 \/ #paramvar160 + #paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 < 0 \/ #paramvar157 > 0 \/ #paramvar158 < 0 \/ #paramvar159 < 0 \/ #paramvar152 + #paramvar154 < 0 \/ #paramvar149 + #paramvar151 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 <= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar145 >= 0 /\ #paramvar140 + #paramvar142 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 <= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar136 >= 0 /\ #paramvar131 + #paramvar133 >= 0
gen constr of example:(X2(-1, 3) => X3(-2, -1) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_828] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 * 3 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 * 3 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 * 3 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 * 3 < 0) \/ #paramvar174 >= 0 /\ #paramvar171 + #paramvar172 * -2 + #paramvar173 * -2 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 * -2 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -2 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 * -2 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -2 + -#paramvar151 >= 0 \/ #paramvar182 >= 0 /\ #paramvar179 + #paramvar180 * -2 + #paramvar181 * -2 >= 0 \/ #paramvar178 >= 0 /\ #paramvar175 + #paramvar176 * -2 + #paramvar177 * -2 >= 0 \/ #paramvar190 >= 0 /\ #paramvar187 + #paramvar188 * -2 + #paramvar189 * -2 >= 0 \/ #paramvar186 >= 0 /\ #paramvar183 + #paramvar184 * -2 + #paramvar185 * -2 >= 0 \/ #paramvar198 >= 0 /\ #paramvar195 + #paramvar196 * -2 + #paramvar197 * -2 >= 0 \/ #paramvar194 >= 0 /\ #paramvar191 + #paramvar192 * -2 + #paramvar193 * -2 >= 0 \/ #paramvar206 >= 0 /\ #paramvar203 + #paramvar204 * -2 + #paramvar205 * -2 >= 0 \/ #paramvar202 >= 0 /\ #paramvar199 + #paramvar200 * -2 + #paramvar201 * -2 >= 0 \/ #paramvar214 >= 0 /\ #paramvar211 + #paramvar212 * -2 + #paramvar213 * -2 >= 0 \/ #paramvar210 >= 0 /\ #paramvar207 + #paramvar208 * -2 + #paramvar209 * -2 >= 0 \/ #paramvar222 >= 0 /\ #paramvar219 + #paramvar220 * -2 + #paramvar221 * -2 >= 0 \/ #paramvar218 >= 0 /\ #paramvar215 + #paramvar216 * -2 + #paramvar217 * -2 >= 0
gen constr of example:( => X3(0, 1) \/ X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0))
constr: [#S_829] #paramvar174 >= 0 /\ #paramvar171 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar151 >= 0 \/ #paramvar182 >= 0 /\ #paramvar179 >= 0 \/ #paramvar178 >= 0 /\ #paramvar175 >= 0 \/ #paramvar190 >= 0 /\ #paramvar187 >= 0 \/ #paramvar186 >= 0 /\ #paramvar183 >= 0 \/ #paramvar198 >= 0 /\ #paramvar195 >= 0 \/ #paramvar194 >= 0 /\ #paramvar191 >= 0 \/ #paramvar206 >= 0 /\ #paramvar203 >= 0 \/ #paramvar202 >= 0 /\ #paramvar199 >= 0 \/ #paramvar214 >= 0 /\ #paramvar211 >= 0 \/ #paramvar210 >= 0 /\ #paramvar207 >= 0 \/ #paramvar222 >= 0 /\ #paramvar219 >= 0 \/ #paramvar218 >= 0 /\ #paramvar215 >= 0
gen constr of example:( => X3(1, 0) \/ X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_830] #paramvar174 >= 0 /\ #paramvar171 + #paramvar172 + #paramvar173 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 + #paramvar165 * 2 >= 0 /\ #paramvar160 + #paramvar161 + #paramvar162 * 2 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 + #paramvar154 * 2 >= 0 /\ #paramvar149 + #paramvar150 + #paramvar151 * 2 >= 0 \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 >= 0 /\ #paramvar160 + #paramvar161 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 >= 0 /\ #paramvar149 + #paramvar150 >= 0 \/ #paramvar182 >= 0 /\ #paramvar179 + #paramvar180 + #paramvar181 >= 0 \/ #paramvar178 >= 0 /\ #paramvar175 + #paramvar176 + #paramvar177 >= 0 \/ #paramvar190 >= 0 /\ #paramvar187 + #paramvar188 + #paramvar189 >= 0 \/ #paramvar186 >= 0 /\ #paramvar183 + #paramvar184 + #paramvar185 >= 0 \/ #paramvar198 >= 0 /\ #paramvar195 + #paramvar196 + #paramvar197 >= 0 \/ #paramvar194 >= 0 /\ #paramvar191 + #paramvar192 + #paramvar193 >= 0 \/ #paramvar206 >= 0 /\ #paramvar203 + #paramvar204 + #paramvar205 >= 0 \/ #paramvar202 >= 0 /\ #paramvar199 + #paramvar200 + #paramvar201 >= 0 \/ #paramvar214 >= 0 /\ #paramvar211 + #paramvar212 + #paramvar213 >= 0 \/ #paramvar210 >= 0 /\ #paramvar207 + #paramvar208 + #paramvar209 >= 0 \/ #paramvar222 >= 0 /\ #paramvar219 + #paramvar220 + #paramvar221 >= 0 \/ #paramvar218 >= 0 /\ #paramvar215 + #paramvar216 + #paramvar217 >= 0
gen constr of example:(X2(0, 0) => X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_831] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 < 0 \/ #paramvar140 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 < 0 \/ #paramvar131 < 0) \/ #paramvar174 >= 0 /\ #paramvar171 + #paramvar172 + #paramvar173 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 + #paramvar165 * 2 >= 0 /\ #paramvar160 + #paramvar161 + #paramvar162 * 2 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 + #paramvar154 * 2 >= 0 /\ #paramvar149 + #paramvar150 + #paramvar151 * 2 >= 0 \/ #paramvar182 >= 0 /\ #paramvar179 + #paramvar180 + #paramvar181 >= 0 \/ #paramvar178 >= 0 /\ #paramvar175 + #paramvar176 + #paramvar177 >= 0 \/ #paramvar190 >= 0 /\ #paramvar187 + #paramvar188 + #paramvar189 >= 0 \/ #paramvar186 >= 0 /\ #paramvar183 + #paramvar184 + #paramvar185 >= 0 \/ #paramvar198 >= 0 /\ #paramvar195 + #paramvar196 + #paramvar197 >= 0 \/ #paramvar194 >= 0 /\ #paramvar191 + #paramvar192 + #paramvar193 >= 0 \/ #paramvar206 >= 0 /\ #paramvar203 + #paramvar204 + #paramvar205 >= 0 \/ #paramvar202 >= 0 /\ #paramvar199 + #paramvar200 + #paramvar201 >= 0 \/ #paramvar214 >= 0 /\ #paramvar211 + #paramvar212 + #paramvar213 >= 0 \/ #paramvar210 >= 0 /\ #paramvar207 + #paramvar208 + #paramvar209 >= 0 \/ #paramvar222 >= 0 /\ #paramvar219 + #paramvar220 + #paramvar221 >= 0 \/ #paramvar218 >= 0 /\ #paramvar215 + #paramvar216 + #paramvar217 >= 0
gen constr of example:(X2(-1, 1) /\ X2(1, 1) => X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0))
constr: [#S_832] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 < 0) \/ (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 + #paramvar145 < 0 \/ #paramvar140 + #paramvar141 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 + #paramvar136 < 0 \/ #paramvar131 + #paramvar132 + #paramvar133 < 0) \/ #paramvar174 >= 0 /\ #paramvar171 >= 0 \/ #paramvar182 >= 0 /\ #paramvar179 >= 0 \/ #paramvar178 >= 0 /\ #paramvar175 >= 0 \/ #paramvar190 >= 0 /\ #paramvar187 >= 0 \/ #paramvar186 >= 0 /\ #paramvar183 >= 0 \/ #paramvar198 >= 0 /\ #paramvar195 >= 0 \/ #paramvar194 >= 0 /\ #paramvar191 >= 0 \/ #paramvar206 >= 0 /\ #paramvar203 >= 0 \/ #paramvar202 >= 0 /\ #paramvar199 >= 0 \/ #paramvar214 >= 0 /\ #paramvar211 >= 0 \/ #paramvar210 >= 0 /\ #paramvar207 >= 0 \/ #paramvar222 >= 0 /\ #paramvar219 >= 0 \/ #paramvar218 >= 0 /\ #paramvar215 >= 0
bounds constr: [#S_833] (if (#paramvar219 >= 0) then #paramvar219 else -#paramvar219) <= 1 /\ (if (#paramvar215 >= 0) then #paramvar215 else -#paramvar215) <= 1
bounds constr: [#S_834] (if (#paramvar220 >= 0) then #paramvar220 else -#paramvar220) + (if (#paramvar221 >= 0) then #paramvar221 else -#paramvar221) <= 2 /\ (if (#paramvar216 >= 0) then #paramvar216 else -#paramvar216) + (if (#paramvar217 >= 0) then #paramvar217 else -#paramvar217) <= 2
bounds constr: [#S_835] true
bounds constr: [#S_836] (if (#paramvar211 >= 0) then #paramvar211 else -#paramvar211) <= 1 /\ (if (#paramvar207 >= 0) then #paramvar207 else -#paramvar207) <= 1
bounds constr: [#S_837] (if (#paramvar212 >= 0) then #paramvar212 else -#paramvar212) + (if (#paramvar213 >= 0) then #paramvar213 else -#paramvar213) <= 2 /\ (if (#paramvar208 >= 0) then #paramvar208 else -#paramvar208) + (if (#paramvar209 >= 0) then #paramvar209 else -#paramvar209) <= 2
bounds constr: [#S_838] true
bounds constr: [#S_839] (if (#paramvar203 >= 0) then #paramvar203 else -#paramvar203) <= 1 /\ (if (#paramvar199 >= 0) then #paramvar199 else -#paramvar199) <= 1
bounds constr: [#S_840] (if (#paramvar204 >= 0) then #paramvar204 else -#paramvar204) + (if (#paramvar205 >= 0) then #paramvar205 else -#paramvar205) <= 1 /\ (if (#paramvar200 >= 0) then #paramvar200 else -#paramvar200) + (if (#paramvar201 >= 0) then #paramvar201 else -#paramvar201) <= 1
bounds constr: [#S_841] true
bounds constr: [#S_842] (if (#paramvar195 >= 0) then #paramvar195 else -#paramvar195) <= 1 /\ (if (#paramvar191 >= 0) then #paramvar191 else -#paramvar191) <= 1
bounds constr: [#S_843] (if (#paramvar196 >= 0) then #paramvar196 else -#paramvar196) + (if (#paramvar197 >= 0) then #paramvar197 else -#paramvar197) <= 2 /\ (if (#paramvar192 >= 0) then #paramvar192 else -#paramvar192) + (if (#paramvar193 >= 0) then #paramvar193 else -#paramvar193) <= 2
bounds constr: [#S_844] true
bounds constr: [#S_845] (if (#paramvar187 >= 0) then #paramvar187 else -#paramvar187) <= 1 /\ (if (#paramvar183 >= 0) then #paramvar183 else -#paramvar183) <= 1
bounds constr: [#S_846] (if (#paramvar188 >= 0) then #paramvar188 else -#paramvar188) + (if (#paramvar189 >= 0) then #paramvar189 else -#paramvar189) <= 2 /\ (if (#paramvar184 >= 0) then #paramvar184 else -#paramvar184) + (if (#paramvar185 >= 0) then #paramvar185 else -#paramvar185) <= 2
bounds constr: [#S_847] true
bounds constr: [#S_848] (if (#paramvar179 >= 0) then #paramvar179 else -#paramvar179) <= 1 /\ (if (#paramvar175 >= 0) then #paramvar175 else -#paramvar175) <= 1
bounds constr: [#S_849] (if (#paramvar180 >= 0) then #paramvar180 else -#paramvar180) + (if (#paramvar181 >= 0) then #paramvar181 else -#paramvar181) <= 1 /\ (if (#paramvar176 >= 0) then #paramvar176 else -#paramvar176) + (if (#paramvar177 >= 0) then #paramvar177 else -#paramvar177) <= 1
bounds constr: [#S_850] true
bounds constr: [#S_851] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_852] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_853] true
bounds constr: [#S_854] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_855] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) + (if (#paramvar165 >= 0) then #paramvar165 else -#paramvar165) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) + (if (#paramvar162 >= 0) then #paramvar162 else -#paramvar162) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) + (if (#paramvar154 >= 0) then #paramvar154 else -#paramvar154) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) + (if (#paramvar151 >= 0) then #paramvar151 else -#paramvar151) <= 2
bounds constr: [#S_856] true
bounds constr: [#S_857] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_858] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_859] true
bounds constr: [#S_860] (if (#paramvar127 >= 0) then #paramvar127 else -#paramvar127) <= 0
bounds constr: [#S_861] (if (#paramvar128 >= 0) then #paramvar128 else -#paramvar128) + (if (#paramvar129 >= 0) then #paramvar129 else -#paramvar129) <= 1
bounds constr: [#S_862] true
constraints generated
sat
************** current phase of 15th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ 1 + x2 = 0 /\ -x1 >= 0 /\ x1 >= 0
X3(x1: int, x2: int) :=
  1 + x1 + x2 >= 0 /\ -1 + -x1 + -x2 >= 0 \/ x2 != 0 /\ -1 + x1 + -x2 >= 0 /\ -1 + -x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x1 >= 0 \/ x1 + -x2 = 0 /\ 1 + -x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 + -x2 >= 0
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  false
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
( => X3(2, -1) \/ X3(2, 3) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X2(0, -1) /\ X93(-1, 1) => X1(0, 1));
(X2(0, -1) => X1(0, 2) \/ X3(2, 3) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X3(1, -3) => X2(1, -3));
(X93(-2, 0) => X3(-2, 0))

************** current phase of 15th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (15): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(2, 1) => )]
*** undecided (120): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(-1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 15th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 0 2)
  added as a negative example with: 
  add negative example(X1(0, 2) => )
refuting (X2 0 (-1))
refuting (X2 1 (-3))
refuting (X2 1 (-2))
refuting (X2 1 2)
refuting (X2 2 (-1))
refuting (X3 (-2) 0)
refuting (X3 1 (-3))
refuting (X3 2 (-1))
refuting (X3 2 3)
refuting (X90 0 (-1))
refuting (X90 2 2)
refuting (X91 2 2)
refuting (X92 2 2)
refuting (X93 (-2) (-2))
refuting (X93 (-2) 0)
refuting (X93 (-1) 1)
refuting (X93 2 2)
refuting (X94 2 2)
refuting (X95 2 1)
refuting (X95 2 2)
refuting (X96 2 2)
proving (X1 0 2)
proving (X1 1 (-2))
proving (X1 1 (-1))
proving (X1 2 1)
proving (X2 0 (-1))
proving (X2 1 (-3))
proving (X2 1 (-2))
proving (X2 1 2)
proving (X2 2 (-1))
proving (X3 (-2) 0)
proving (X3 1 (-3))
proving (X3 2 (-1))
proving (X3 2 3)
proving (X90 0 (-1))
proving (X90 2 2)
proving (X91 2 2)
proving (X92 2 2)
proving (X93 (-2) (-2))
proving (X93 (-2) 0)
proving (X93 (-1) 1)
proving (X93 2 2)
proving (X94 2 2)
proving (X95 2 1)
proving (X95 2 2)
proving (X96 2 2)
*** Example Instances obtained by Resolution:
(X1(0, 2) => )

************** current phase of 15th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (16): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(2, 1) => )]
*** undecided (120): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(-1, 1) => );
(X2(0, -1) /\ X93(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 16th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
table:
FTFFFT_TFTT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (16):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
table:
FFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
table:
FTTFFTFFF___TFFFT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
table:
FTFTF_TTFFFFFFT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (32):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFT


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (25):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFT

gen constr of example:(X1(0, 2) => )
constr: [#S_863] #paramvar130 > 0 \/ #paramvar127 + #paramvar129 * 2 < 0
gen constr of example:(X2(0, -1) /\ X93(-1, 1) => )
constr: [#S_864] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar133 < 0) \/ (#paramvar198 > 0 \/ #paramvar195 + -#paramvar196 + #paramvar197 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + -#paramvar192 + #paramvar193 < 0)
gen constr of example:(X3(1, -3) => X2(1, -3))
constr: [#S_865] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 + #paramvar165 * -3 < 0 \/ #paramvar160 + #paramvar161 + #paramvar162 * -3 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 + #paramvar154 * -3 < 0 \/ #paramvar149 + #paramvar150 + #paramvar151 * -3 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 + #paramvar145 * -3 >= 0 /\ #paramvar140 + #paramvar141 + #paramvar142 * -3 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 + #paramvar136 * -3 >= 0 /\ #paramvar131 + #paramvar132 + #paramvar133 * -3 >= 0
gen constr of example:(X93(-2, 0) => X3(-2, 0))
constr: [#S_866] (#paramvar198 > 0 \/ #paramvar195 + #paramvar196 * -2 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + #paramvar192 * -2 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -2 >= 0 /\ #paramvar160 + #paramvar161 * -2 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -2 >= 0 /\ #paramvar149 + #paramvar150 * -2 >= 0
gen constr of example:( => X3(2, -1) \/ X3(2, 3) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_867] #paramvar174 >= 0 /\ #paramvar171 + #paramvar172 * 2 + #paramvar173 * 2 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 * 2 + #paramvar165 * 3 >= 0 /\ #paramvar160 + #paramvar161 * 2 + #paramvar162 * 3 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 * 2 + #paramvar154 * 3 >= 0 /\ #paramvar149 + #paramvar150 * 2 + #paramvar151 * 3 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 >= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * 2 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * 2 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 >= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * 2 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * 2 + -#paramvar151 >= 0 \/ #paramvar182 >= 0 /\ #paramvar179 + #paramvar180 * 2 + #paramvar181 * 2 >= 0 \/ #paramvar178 >= 0 /\ #paramvar175 + #paramvar176 * 2 + #paramvar177 * 2 >= 0 \/ #paramvar190 >= 0 /\ #paramvar187 + #paramvar188 * 2 + #paramvar189 * 2 >= 0 \/ #paramvar186 >= 0 /\ #paramvar183 + #paramvar184 * 2 + #paramvar185 * 2 >= 0 \/ #paramvar198 >= 0 /\ #paramvar195 + #paramvar196 * 2 + #paramvar197 * 2 >= 0 \/ #paramvar194 >= 0 /\ #paramvar191 + #paramvar192 * 2 + #paramvar193 * 2 >= 0 \/ #paramvar206 >= 0 /\ #paramvar203 + #paramvar204 * 2 + #paramvar205 * 2 >= 0 \/ #paramvar202 >= 0 /\ #paramvar199 + #paramvar200 * 2 + #paramvar201 * 2 >= 0 \/ #paramvar214 >= 0 /\ #paramvar211 + #paramvar212 * 2 + #paramvar213 * 2 >= 0 \/ #paramvar210 >= 0 /\ #paramvar207 + #paramvar208 * 2 + #paramvar209 * 2 >= 0 \/ #paramvar222 >= 0 /\ #paramvar219 + #paramvar220 * 2 + #paramvar221 * 2 >= 0 \/ #paramvar218 >= 0 /\ #paramvar215 + #paramvar216 * 2 + #paramvar217 * 2 >= 0
gen constr of example:(X2(0, -1) => X3(2, 3) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_868] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar133 < 0) \/ #paramvar174 >= 0 /\ #paramvar171 + #paramvar172 * 2 + #paramvar173 * 2 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 * 2 + #paramvar165 * 3 >= 0 /\ #paramvar160 + #paramvar161 * 2 + #paramvar162 * 3 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 * 2 + #paramvar154 * 3 >= 0 /\ #paramvar149 + #paramvar150 * 2 + #paramvar151 * 3 >= 0 \/ #paramvar182 >= 0 /\ #paramvar179 + #paramvar180 * 2 + #paramvar181 * 2 >= 0 \/ #paramvar178 >= 0 /\ #paramvar175 + #paramvar176 * 2 + #paramvar177 * 2 >= 0 \/ #paramvar190 >= 0 /\ #paramvar187 + #paramvar188 * 2 + #paramvar189 * 2 >= 0 \/ #paramvar186 >= 0 /\ #paramvar183 + #paramvar184 * 2 + #paramvar185 * 2 >= 0 \/ #paramvar198 >= 0 /\ #paramvar195 + #paramvar196 * 2 + #paramvar197 * 2 >= 0 \/ #paramvar194 >= 0 /\ #paramvar191 + #paramvar192 * 2 + #paramvar193 * 2 >= 0 \/ #paramvar206 >= 0 /\ #paramvar203 + #paramvar204 * 2 + #paramvar205 * 2 >= 0 \/ #paramvar202 >= 0 /\ #paramvar199 + #paramvar200 * 2 + #paramvar201 * 2 >= 0 \/ #paramvar214 >= 0 /\ #paramvar211 + #paramvar212 * 2 + #paramvar213 * 2 >= 0 \/ #paramvar210 >= 0 /\ #paramvar207 + #paramvar208 * 2 + #paramvar209 * 2 >= 0 \/ #paramvar222 >= 0 /\ #paramvar219 + #paramvar220 * 2 + #paramvar221 * 2 >= 0 \/ #paramvar218 >= 0 /\ #paramvar215 + #paramvar216 * 2 + #paramvar217 * 2 >= 0
bounds constr: [#S_869] (if (#paramvar219 >= 0) then #paramvar219 else -#paramvar219) <= 1 /\ (if (#paramvar215 >= 0) then #paramvar215 else -#paramvar215) <= 1
bounds constr: [#S_870] (if (#paramvar220 >= 0) then #paramvar220 else -#paramvar220) + (if (#paramvar221 >= 0) then #paramvar221 else -#paramvar221) <= 2 /\ (if (#paramvar216 >= 0) then #paramvar216 else -#paramvar216) + (if (#paramvar217 >= 0) then #paramvar217 else -#paramvar217) <= 2
bounds constr: [#S_871] true
bounds constr: [#S_872] (if (#paramvar211 >= 0) then #paramvar211 else -#paramvar211) <= 1 /\ (if (#paramvar207 >= 0) then #paramvar207 else -#paramvar207) <= 1
bounds constr: [#S_873] (if (#paramvar212 >= 0) then #paramvar212 else -#paramvar212) + (if (#paramvar213 >= 0) then #paramvar213 else -#paramvar213) <= 2 /\ (if (#paramvar208 >= 0) then #paramvar208 else -#paramvar208) + (if (#paramvar209 >= 0) then #paramvar209 else -#paramvar209) <= 2
bounds constr: [#S_874] true
bounds constr: [#S_875] (if (#paramvar203 >= 0) then #paramvar203 else -#paramvar203) <= 1 /\ (if (#paramvar199 >= 0) then #paramvar199 else -#paramvar199) <= 1
bounds constr: [#S_876] (if (#paramvar204 >= 0) then #paramvar204 else -#paramvar204) + (if (#paramvar205 >= 0) then #paramvar205 else -#paramvar205) <= 1 /\ (if (#paramvar200 >= 0) then #paramvar200 else -#paramvar200) + (if (#paramvar201 >= 0) then #paramvar201 else -#paramvar201) <= 1
bounds constr: [#S_877] true
bounds constr: [#S_878] (if (#paramvar195 >= 0) then #paramvar195 else -#paramvar195) <= 1 /\ (if (#paramvar191 >= 0) then #paramvar191 else -#paramvar191) <= 1
bounds constr: [#S_879] (if (#paramvar196 >= 0) then #paramvar196 else -#paramvar196) + (if (#paramvar197 >= 0) then #paramvar197 else -#paramvar197) <= 2 /\ (if (#paramvar192 >= 0) then #paramvar192 else -#paramvar192) + (if (#paramvar193 >= 0) then #paramvar193 else -#paramvar193) <= 2
bounds constr: [#S_880] true
bounds constr: [#S_881] (if (#paramvar187 >= 0) then #paramvar187 else -#paramvar187) <= 1 /\ (if (#paramvar183 >= 0) then #paramvar183 else -#paramvar183) <= 1
bounds constr: [#S_882] (if (#paramvar188 >= 0) then #paramvar188 else -#paramvar188) + (if (#paramvar189 >= 0) then #paramvar189 else -#paramvar189) <= 2 /\ (if (#paramvar184 >= 0) then #paramvar184 else -#paramvar184) + (if (#paramvar185 >= 0) then #paramvar185 else -#paramvar185) <= 2
bounds constr: [#S_883] true
bounds constr: [#S_884] (if (#paramvar179 >= 0) then #paramvar179 else -#paramvar179) <= 1 /\ (if (#paramvar175 >= 0) then #paramvar175 else -#paramvar175) <= 1
bounds constr: [#S_885] (if (#paramvar180 >= 0) then #paramvar180 else -#paramvar180) + (if (#paramvar181 >= 0) then #paramvar181 else -#paramvar181) <= 1 /\ (if (#paramvar176 >= 0) then #paramvar176 else -#paramvar176) + (if (#paramvar177 >= 0) then #paramvar177 else -#paramvar177) <= 1
bounds constr: [#S_886] true
bounds constr: [#S_887] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_888] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_889] true
bounds constr: [#S_890] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_891] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) + (if (#paramvar165 >= 0) then #paramvar165 else -#paramvar165) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) + (if (#paramvar162 >= 0) then #paramvar162 else -#paramvar162) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) + (if (#paramvar154 >= 0) then #paramvar154 else -#paramvar154) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) + (if (#paramvar151 >= 0) then #paramvar151 else -#paramvar151) <= 2
bounds constr: [#S_892] true
bounds constr: [#S_893] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_894] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_895] true
bounds constr: [#S_896] (if (#paramvar127 >= 0) then #paramvar127 else -#paramvar127) <= 0
bounds constr: [#S_897] (if (#paramvar129 >= 0) then #paramvar129 else -#paramvar129) <= 1
bounds constr: [#S_898] true
constraints generated
sat
************** current phase of 16th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  1 + x2 != 0 /\ -1 + -x2 >= 0 /\ -x2 >= 0 \/ x2 != 0 /\ 1 + x2 = 0 /\ x1 >= 0 /\ -x1 >= 0
X3(x1: int, x2: int) :=
  1 + -x1 + x2 >= 0 /\ -1 + x1 + -x2 >= 0 \/ -1 + x2 = 0 /\ -1 + -2 * x2 >= 0 /\ -1 + -x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  false
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-2, -2) /\ X90(-1, -1) => X1(-2, -1));
(X3(1, 0) => X2(1, 0));
(X96(2, 2) => X3(2, 0))

************** current phase of 16th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (16): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(2, 1) => )]
*** undecided (123): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(-1, 1) => );..]

*** labeling with SAT solving
************** current phase of 16th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-2) (-2))
refuting (X2 0 (-1))
refuting (X2 1 0)
refuting (X3 1 0)
refuting (X3 2 0)
refuting (X3 2 3)
refuting (X90 (-1) (-1))
refuting (X90 2 2)
refuting (X91 2 2)
refuting (X92 2 2)
refuting (X93 2 2)
refuting (X94 2 2)
refuting (X95 2 2)
refuting (X96 2 2)
proving (X1 0 2)
proving (X2 (-2) (-2))
proving (X2 0 (-1))
proving (X2 1 0)
proving (X3 1 0)
proving (X3 2 0)
proving (X3 2 3)
proving (X90 (-1) (-1))
proving (X90 2 2)
proving (X91 2 2)
proving (X92 2 2)
proving (X93 2 2)
proving (X94 2 2)
proving (X95 2 2)
proving (X96 2 2)
*** Example Instances obtained by Resolution:


************** current phase of 16th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (16): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(2, 1) => )]
*** undecided (123): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(-1, 1) => );..]

*** labeling with SAT solving
************** current phase of 17th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
table:
FTFFFT_TFTT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (16):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
table:
FFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
table:
FTTFFTFFF___TFFFT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
table:
FTFTF_TTFFFFFFT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (32):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFT


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (26):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTT

gen constr of example:(X2(-2, -2) /\ X90(-1, -1) => )
constr: [#S_899] #paramvar174 < 0 \/ #paramvar171 + -#paramvar172 + -#paramvar173 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 * -2 + #paramvar145 * -2 < 0 \/ #paramvar140 + #paramvar141 * -2 + #paramvar142 * -2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 * -2 + #paramvar136 * -2 < 0 \/ #paramvar131 + #paramvar132 * -2 + #paramvar133 * -2 < 0)
gen constr of example:(X3(1, 0) => X2(1, 0))
constr: [#S_900] (#paramvar166 < 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 < 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 < 0 \/ #paramvar160 + #paramvar161 < 0) /\ (#paramvar155 < 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 < 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 < 0 \/ #paramvar149 + #paramvar150 < 0) \/ #paramvar146 <= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 >= 0 /\ #paramvar140 + #paramvar141 >= 0 \/ #paramvar137 <= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 >= 0 /\ #paramvar131 + #paramvar132 >= 0
gen constr of example:(X96(2, 2) => X3(2, 0))
constr: [#S_901] (#paramvar222 < 0 \/ #paramvar219 + #paramvar220 * 2 + #paramvar221 * 2 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 + #paramvar216 * 2 + #paramvar217 * 2 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * 2 >= 0 /\ #paramvar160 + #paramvar161 * 2 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * 2 >= 0 /\ #paramvar149 + #paramvar150 * 2 >= 0
bounds constr: [#S_902] (if (#paramvar219 >= 0) then #paramvar219 else -#paramvar219) <= 1 /\ (if (#paramvar215 >= 0) then #paramvar215 else -#paramvar215) <= 1
bounds constr: [#S_903] (if (#paramvar220 >= 0) then #paramvar220 else -#paramvar220) + (if (#paramvar221 >= 0) then #paramvar221 else -#paramvar221) <= 2 /\ (if (#paramvar216 >= 0) then #paramvar216 else -#paramvar216) + (if (#paramvar217 >= 0) then #paramvar217 else -#paramvar217) <= 2
bounds constr: [#S_904] true
bounds constr: [#S_905] true
bounds constr: [#S_906] true
bounds constr: [#S_907] true
bounds constr: [#S_908] true
bounds constr: [#S_909] true
bounds constr: [#S_910] true
bounds constr: [#S_911] true
bounds constr: [#S_912] true
bounds constr: [#S_913] true
bounds constr: [#S_914] true
bounds constr: [#S_915] true
bounds constr: [#S_916] true
bounds constr: [#S_917] true
bounds constr: [#S_918] true
bounds constr: [#S_919] true
bounds constr: [#S_920] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_921] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_922] true
bounds constr: [#S_923] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_924] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) <= 2
bounds constr: [#S_925] true
bounds constr: [#S_926] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_927] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_928] true
bounds constr: [#S_929] true
bounds constr: [#S_930] true
bounds constr: [#S_931] true
constraints generated
sat
************** current phase of 17th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x1 >= 0
X2(x1: int, x2: int) :=
  1 + x2 != 0 /\ -x2 >= 0 /\ -1 + x1 >= 0 \/ x2 != 0 /\ 1 + x2 = 0 /\ x1 >= 0 /\ -x1 >= 0
X3(x1: int, x2: int) :=
  -1 + -x1 + -x2 >= 0 /\ -1 + x1 + -x2 >= 0 \/ x2 = 0 /\ 1 + -2 * x2 >= 0 /\ -1 + x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  false
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(1, -2) /\ X90(-1, -1) => X1(1, -1));
(X2(1, 0) /\ X96(2, 2) => X1(1, 2));
(X3(-1, -2) => X2(-1, -2))

************** current phase of 17th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (16): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(2, 1) => )]
*** undecided (126): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(-1, 1) => );..]

*** labeling with SAT solving
************** current phase of 17th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 1 2)
  added as a negative example with: 
  add negative example(X1(1, 2) => )
refuting (X2 (-1) (-2))
refuting (X2 1 (-2))
refuting (X2 1 0)
refuting (X3 (-1) (-2))
refuting (X90 (-1) (-1))
refuting (X96 2 2)
proving (X1 1 2)
proving (X2 (-1) (-2))
proving (X2 1 (-2))
proving (X2 1 0)
proving (X3 (-1) (-2))
proving (X90 (-1) (-1))
proving (X96 2 2)
*** Example Instances obtained by Resolution:
(X1(1, 2) => )

************** current phase of 17th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (126): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(-1, 1) => );..]

*** labeling with SAT solving
************** current phase of 18th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
table:
FTFFFT_TFTT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (17):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
table:
FFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
table:
FTFFTFF_TTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
table:
FTTFFTFFF___TFFFT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
table:
FTFTF_TTFFFFFFT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (32):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFT


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (27):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTT

gen constr of example:(X1(1, 2) => )
constr: [#S_932] #paramvar130 > 0 \/ #paramvar127 + #paramvar128 + #paramvar129 * 2 < 0
gen constr of example:(X2(1, -2) /\ X90(-1, -1) => )
constr: [#S_933] #paramvar174 < 0 \/ #paramvar171 + -#paramvar172 + -#paramvar173 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 + #paramvar145 * -2 < 0 \/ #paramvar140 + #paramvar141 + #paramvar142 * -2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 + #paramvar136 * -2 < 0 \/ #paramvar131 + #paramvar132 + #paramvar133 * -2 < 0)
gen constr of example:(X2(1, 0) /\ X96(2, 2) => )
constr: [#S_934] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 < 0 \/ #paramvar140 + #paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 < 0 \/ #paramvar131 + #paramvar132 < 0) \/ (#paramvar222 < 0 \/ #paramvar219 + #paramvar220 * 2 + #paramvar221 * 2 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 + #paramvar216 * 2 + #paramvar217 * 2 < 0)
gen constr of example:(X3(-1, -2) => X2(-1, -2))
constr: [#S_935] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + -#paramvar164 + #paramvar165 * -2 < 0 \/ #paramvar160 + -#paramvar161 + #paramvar162 * -2 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + -#paramvar153 + #paramvar154 * -2 < 0 \/ #paramvar149 + -#paramvar150 + #paramvar151 * -2 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + -#paramvar144 + #paramvar145 * -2 >= 0 /\ #paramvar140 + -#paramvar141 + #paramvar142 * -2 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + -#paramvar135 + #paramvar136 * -2 >= 0 /\ #paramvar131 + -#paramvar132 + #paramvar133 * -2 >= 0
bounds constr: [#S_936] (if (#paramvar219 >= 0) then #paramvar219 else -#paramvar219) <= 1 /\ (if (#paramvar215 >= 0) then #paramvar215 else -#paramvar215) <= 1
bounds constr: [#S_937] (if (#paramvar220 >= 0) then #paramvar220 else -#paramvar220) + (if (#paramvar221 >= 0) then #paramvar221 else -#paramvar221) <= 2 /\ (if (#paramvar216 >= 0) then #paramvar216 else -#paramvar216) + (if (#paramvar217 >= 0) then #paramvar217 else -#paramvar217) <= 2
bounds constr: [#S_938] true
bounds constr: [#S_939] true
bounds constr: [#S_940] true
bounds constr: [#S_941] true
bounds constr: [#S_942] true
bounds constr: [#S_943] true
bounds constr: [#S_944] true
bounds constr: [#S_945] true
bounds constr: [#S_946] true
bounds constr: [#S_947] true
bounds constr: [#S_948] true
bounds constr: [#S_949] true
bounds constr: [#S_950] true
bounds constr: [#S_951] true
bounds constr: [#S_952] true
bounds constr: [#S_953] true
bounds constr: [#S_954] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_955] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_956] true
bounds constr: [#S_957] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_958] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) + (if (#paramvar165 >= 0) then #paramvar165 else -#paramvar165) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) + (if (#paramvar162 >= 0) then #paramvar162 else -#paramvar162) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) + (if (#paramvar154 >= 0) then #paramvar154 else -#paramvar154) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) + (if (#paramvar151 >= 0) then #paramvar151 else -#paramvar151) <= 2
bounds constr: [#S_959] true
bounds constr: [#S_960] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_961] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_962] true
bounds constr: [#S_963] (if (#paramvar127 >= 0) then #paramvar127 else -#paramvar127) <= 0
bounds constr: [#S_964] (if (#paramvar128 >= 0) then #paramvar128 else -#paramvar128) + (if (#paramvar129 >= 0) then #paramvar129 else -#paramvar129) <= 1
bounds constr: [#S_965] true
constraints generated
sat
************** current phase of 18th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x1 >= 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ 1 + -x2 >= 0 /\ -1 + x1 >= 0 \/ 1 + x2 = 0 /\ x1 >= 0 /\ -x1 >= 0
X3(x1: int, x2: int) :=
  1 + x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ -1 + x1 + -x2 >= 0 \/ x2 = 0 /\ -1 + x2 = 0 /\ -1 + -2 * x2 >= 0 /\ -1 + x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + x1 >= 0 \/ x1 + -x2 = 0 /\ 1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0 \/ x1 + -x2 != 0 /\ -1 + 2 * x2 >= 0
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  false
X96(x1: int, x2: int) :=
  false

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
( => X3(-2, -1) \/ X3(-2, 3) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2));
(X2(0, -1) => X1(0, -2) \/ X3(-2, 3) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2));
(X2(1, 0) /\ X91(-1, -1) => X1(1, -1));
(X2(2, 0) /\ X90(1, 1) => X1(2, 1));
(X90(1, 1) => X3(1, 0));
(X91(1, 1) => X3(1, -2));
(X92(1, 2) => X3(1, 2))

************** current phase of 18th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (133): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(-1, 1) => );..]

*** labeling with SAT solving
************** current phase of 18th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 0 (-1))
refuting (X2 1 0)
refuting (X2 2 0)
refuting (X3 (-2) (-1))
refuting (X3 (-2) 3)
refuting (X3 1 (-2))
refuting (X3 1 0)
refuting (X3 1 2)
refuting (X90 (-2) (-2))
refuting (X90 1 1)
refuting (X91 (-2) (-2))
refuting (X91 (-1) (-1))
refuting (X91 1 1)
refuting (X92 (-2) (-2))
refuting (X92 1 2)
refuting (X93 (-2) (-2))
refuting (X94 (-2) (-2))
refuting (X95 (-2) (-2))
refuting (X96 (-2) (-2))
refuting (X96 2 2)
proving (X1 1 2)
proving (X2 0 (-1))
proving (X2 1 0)
proving (X2 2 0)
proving (X3 (-2) (-1))
proving (X3 (-2) 3)
proving (X3 1 (-2))
proving (X3 1 0)
proving (X3 1 2)
proving (X90 (-2) (-2))
proving (X90 1 1)
proving (X91 (-2) (-2))
proving (X91 (-1) (-1))
proving (X91 1 1)
proving (X92 (-2) (-2))
proving (X92 1 2)
proving (X93 (-2) (-2))
proving (X94 (-2) (-2))
proving (X95 (-2) (-2))
proving (X96 (-2) (-2))
proving (X96 2 2)
*** Example Instances obtained by Resolution:


************** current phase of 18th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (133): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );
(X2(0, -1) /\ X92(-1, -1) => );
(X2(0, -1) /\ X93(-1, 1) => );..]

*** labeling with SAT solving
************** current phase of 19th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
table:
FTFFFT_TFTT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (17):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
table:
FFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
table:
FTFFTFF_TTTF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
table:
FTTFFTFFF___TFFFT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
table:
FTFTF_TTFFFFFFT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (33):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (28):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTF
TTTFTTTFFTFTTTTTTTTFTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTT

gen constr of example:(X2(1, 0) /\ X91(-1, -1) => )
constr: [#S_966] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 < 0 \/ #paramvar140 + #paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 < 0 \/ #paramvar131 + #paramvar132 < 0) \/ (#paramvar182 < 0 \/ #paramvar179 + -#paramvar180 + -#paramvar181 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 + -#paramvar176 + -#paramvar177 < 0)
gen constr of example:(X2(2, 0) /\ X90(1, 1) => )
constr: [#S_967] #paramvar174 < 0 \/ #paramvar171 + #paramvar172 + #paramvar173 < 0 \/ (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 * 2 < 0 \/ #paramvar140 + #paramvar141 * 2 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 * 2 < 0 \/ #paramvar131 + #paramvar132 * 2 < 0)
gen constr of example:(X91(1, 1) => X3(1, -2))
constr: [#S_968] (#paramvar182 < 0 \/ #paramvar179 + #paramvar180 + #paramvar181 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 + #paramvar176 + #paramvar177 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 + #paramvar165 * -2 >= 0 /\ #paramvar160 + #paramvar161 + #paramvar162 * -2 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 + #paramvar154 * -2 >= 0 /\ #paramvar149 + #paramvar150 + #paramvar151 * -2 >= 0
gen constr of example:(X90(1, 1) => X3(1, 0))
constr: [#S_969] #paramvar174 < 0 \/ #paramvar171 + #paramvar172 + #paramvar173 < 0 \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 >= 0 /\ #paramvar160 + #paramvar161 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 >= 0 /\ #paramvar149 + #paramvar150 >= 0
gen constr of example:(X92(1, 2) => X3(1, 2))
constr: [#S_970] (#paramvar190 > 0 \/ #paramvar187 + #paramvar188 + #paramvar189 * 2 < 0) /\ (#paramvar186 > 0 \/ #paramvar183 + #paramvar184 + #paramvar185 * 2 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 + #paramvar165 * 2 >= 0 /\ #paramvar160 + #paramvar161 + #paramvar162 * 2 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 + #paramvar154 * 2 >= 0 /\ #paramvar149 + #paramvar150 + #paramvar151 * 2 >= 0
gen constr of example:( => X3(-2, -1) \/ X3(-2, 3) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_971] #paramvar174 >= 0 /\ #paramvar171 + #paramvar172 * -2 + #paramvar173 * -2 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -2 + #paramvar165 * 3 >= 0 /\ #paramvar160 + #paramvar161 * -2 + #paramvar162 * 3 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -2 + #paramvar154 * 3 >= 0 /\ #paramvar149 + #paramvar150 * -2 + #paramvar151 * 3 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 >= 0 /\ #paramvar163 + #paramvar164 * -2 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -2 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 >= 0 /\ #paramvar152 + #paramvar153 * -2 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -2 + -#paramvar151 >= 0 \/ #paramvar182 >= 0 /\ #paramvar179 + #paramvar180 * -2 + #paramvar181 * -2 >= 0 \/ #paramvar178 >= 0 /\ #paramvar175 + #paramvar176 * -2 + #paramvar177 * -2 >= 0 \/ #paramvar190 >= 0 /\ #paramvar187 + #paramvar188 * -2 + #paramvar189 * -2 >= 0 \/ #paramvar186 >= 0 /\ #paramvar183 + #paramvar184 * -2 + #paramvar185 * -2 >= 0 \/ #paramvar198 >= 0 /\ #paramvar195 + #paramvar196 * -2 + #paramvar197 * -2 >= 0 \/ #paramvar194 >= 0 /\ #paramvar191 + #paramvar192 * -2 + #paramvar193 * -2 >= 0 \/ #paramvar206 >= 0 /\ #paramvar203 + #paramvar204 * -2 + #paramvar205 * -2 >= 0 \/ #paramvar202 >= 0 /\ #paramvar199 + #paramvar200 * -2 + #paramvar201 * -2 >= 0 \/ #paramvar214 >= 0 /\ #paramvar211 + #paramvar212 * -2 + #paramvar213 * -2 >= 0 \/ #paramvar210 >= 0 /\ #paramvar207 + #paramvar208 * -2 + #paramvar209 * -2 >= 0 \/ #paramvar222 >= 0 /\ #paramvar219 + #paramvar220 * -2 + #paramvar221 * -2 >= 0 \/ #paramvar218 >= 0 /\ #paramvar215 + #paramvar216 * -2 + #paramvar217 * -2 >= 0
gen constr of example:(X2(0, -1) => X3(-2, 3) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_972] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 > 0 \/ #paramvar143 + -#paramvar145 < 0 \/ #paramvar140 + -#paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 > 0 \/ #paramvar134 + -#paramvar136 < 0 \/ #paramvar131 + -#paramvar133 < 0) \/ #paramvar174 >= 0 /\ #paramvar171 + #paramvar172 * -2 + #paramvar173 * -2 >= 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 >= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -2 + #paramvar165 * 3 >= 0 /\ #paramvar160 + #paramvar161 * -2 + #paramvar162 * 3 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 >= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -2 + #paramvar154 * 3 >= 0 /\ #paramvar149 + #paramvar150 * -2 + #paramvar151 * 3 >= 0 \/ #paramvar182 >= 0 /\ #paramvar179 + #paramvar180 * -2 + #paramvar181 * -2 >= 0 \/ #paramvar178 >= 0 /\ #paramvar175 + #paramvar176 * -2 + #paramvar177 * -2 >= 0 \/ #paramvar190 >= 0 /\ #paramvar187 + #paramvar188 * -2 + #paramvar189 * -2 >= 0 \/ #paramvar186 >= 0 /\ #paramvar183 + #paramvar184 * -2 + #paramvar185 * -2 >= 0 \/ #paramvar198 >= 0 /\ #paramvar195 + #paramvar196 * -2 + #paramvar197 * -2 >= 0 \/ #paramvar194 >= 0 /\ #paramvar191 + #paramvar192 * -2 + #paramvar193 * -2 >= 0 \/ #paramvar206 >= 0 /\ #paramvar203 + #paramvar204 * -2 + #paramvar205 * -2 >= 0 \/ #paramvar202 >= 0 /\ #paramvar199 + #paramvar200 * -2 + #paramvar201 * -2 >= 0 \/ #paramvar214 >= 0 /\ #paramvar211 + #paramvar212 * -2 + #paramvar213 * -2 >= 0 \/ #paramvar210 >= 0 /\ #paramvar207 + #paramvar208 * -2 + #paramvar209 * -2 >= 0 \/ #paramvar222 >= 0 /\ #paramvar219 + #paramvar220 * -2 + #paramvar221 * -2 >= 0 \/ #paramvar218 >= 0 /\ #paramvar215 + #paramvar216 * -2 + #paramvar217 * -2 >= 0
bounds constr: [#S_973] (if (#paramvar219 >= 0) then #paramvar219 else -#paramvar219) <= 1 /\ (if (#paramvar215 >= 0) then #paramvar215 else -#paramvar215) <= 1
bounds constr: [#S_974] (if (#paramvar220 >= 0) then #paramvar220 else -#paramvar220) + (if (#paramvar221 >= 0) then #paramvar221 else -#paramvar221) <= 2 /\ (if (#paramvar216 >= 0) then #paramvar216 else -#paramvar216) + (if (#paramvar217 >= 0) then #paramvar217 else -#paramvar217) <= 2
bounds constr: [#S_975] true
bounds constr: [#S_976] (if (#paramvar211 >= 0) then #paramvar211 else -#paramvar211) <= 1 /\ (if (#paramvar207 >= 0) then #paramvar207 else -#paramvar207) <= 1
bounds constr: [#S_977] (if (#paramvar212 >= 0) then #paramvar212 else -#paramvar212) + (if (#paramvar213 >= 0) then #paramvar213 else -#paramvar213) <= 2 /\ (if (#paramvar208 >= 0) then #paramvar208 else -#paramvar208) + (if (#paramvar209 >= 0) then #paramvar209 else -#paramvar209) <= 2
bounds constr: [#S_978] true
bounds constr: [#S_979] (if (#paramvar203 >= 0) then #paramvar203 else -#paramvar203) <= 1 /\ (if (#paramvar199 >= 0) then #paramvar199 else -#paramvar199) <= 1
bounds constr: [#S_980] (if (#paramvar204 >= 0) then #paramvar204 else -#paramvar204) + (if (#paramvar205 >= 0) then #paramvar205 else -#paramvar205) <= 1 /\ (if (#paramvar200 >= 0) then #paramvar200 else -#paramvar200) + (if (#paramvar201 >= 0) then #paramvar201 else -#paramvar201) <= 1
bounds constr: [#S_981] true
bounds constr: [#S_982] (if (#paramvar195 >= 0) then #paramvar195 else -#paramvar195) <= 1 /\ (if (#paramvar191 >= 0) then #paramvar191 else -#paramvar191) <= 1
bounds constr: [#S_983] (if (#paramvar196 >= 0) then #paramvar196 else -#paramvar196) + (if (#paramvar197 >= 0) then #paramvar197 else -#paramvar197) <= 2 /\ (if (#paramvar192 >= 0) then #paramvar192 else -#paramvar192) + (if (#paramvar193 >= 0) then #paramvar193 else -#paramvar193) <= 2
bounds constr: [#S_984] true
bounds constr: [#S_985] (if (#paramvar187 >= 0) then #paramvar187 else -#paramvar187) <= 1 /\ (if (#paramvar183 >= 0) then #paramvar183 else -#paramvar183) <= 1
bounds constr: [#S_986] (if (#paramvar188 >= 0) then #paramvar188 else -#paramvar188) + (if (#paramvar189 >= 0) then #paramvar189 else -#paramvar189) <= 2 /\ (if (#paramvar184 >= 0) then #paramvar184 else -#paramvar184) + (if (#paramvar185 >= 0) then #paramvar185 else -#paramvar185) <= 2
bounds constr: [#S_987] true
bounds constr: [#S_988] (if (#paramvar179 >= 0) then #paramvar179 else -#paramvar179) <= 1 /\ (if (#paramvar175 >= 0) then #paramvar175 else -#paramvar175) <= 1
bounds constr: [#S_989] (if (#paramvar180 >= 0) then #paramvar180 else -#paramvar180) + (if (#paramvar181 >= 0) then #paramvar181 else -#paramvar181) <= 1 /\ (if (#paramvar176 >= 0) then #paramvar176 else -#paramvar176) + (if (#paramvar177 >= 0) then #paramvar177 else -#paramvar177) <= 1
bounds constr: [#S_990] true
bounds constr: [#S_991] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_992] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_993] true
bounds constr: [#S_994] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_995] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) + (if (#paramvar165 >= 0) then #paramvar165 else -#paramvar165) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) + (if (#paramvar162 >= 0) then #paramvar162 else -#paramvar162) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) + (if (#paramvar154 >= 0) then #paramvar154 else -#paramvar154) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) + (if (#paramvar151 >= 0) then #paramvar151 else -#paramvar151) <= 2
bounds constr: [#S_996] true
bounds constr: [#S_997] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_998] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_999] true
bounds constr: [#S_1000] true
bounds constr: [#S_1001] true
bounds constr: [#S_1002] true
constraints generated
sat
************** current phase of 19th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ 1 + x2 != 0 /\ -1 + -x1 >= 0 /\ 1 + x1 >= 0 \/ -1 + x2 != 0 /\ 1 + x2 = 0 /\ x1 >= 0 /\ -x1 >= 0
X3(x1: int, x2: int) :=
  -1 + x1 + x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ -1 + -2 * x1 >= 0 /\ -1 + x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 >= 0
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + -x2 >= 0
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  false
X96(x1: int, x2: int) :=
  false

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -2) /\ X90(-1, -1) => X1(-1, -1));
(X2(-1, 1) /\ X91(-2, -2) => X1(-1, -2));
(X2(-1, 2) /\ X93(-1, -2) => X1(-1, -2));
(X3(-1, -3) /\ X3(-2, -3) => X2(-2, -3));
(X93(-3, -1) => X3(-3, 1))

************** current phase of 19th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (138): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(-1, 2) /\ X93(-1, -2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 19th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-1) (-1))
refuting (X2 (-2) (-3))
refuting (X2 (-1) (-2))
refuting (X2 (-1) 1)
refuting (X2 (-1) 2)
refuting (X3 (-3) 1)
refuting (X3 (-2) (-3))
refuting (X3 (-1) (-3))
refuting (X90 (-1) (-1))
refuting (X91 (-2) (-2))
refuting (X93 (-3) (-1))
refuting (X93 (-1) (-2))
proving (X1 (-1) (-1))
proving (X2 (-2) (-3))
proving (X2 (-1) (-2))
proving (X2 (-1) 1)
proving (X2 (-1) 2)
proving (X3 (-3) 1)
proving (X3 (-2) (-3))
proving (X3 (-1) (-3))
proving (X90 (-1) (-1))
proving (X91 (-2) (-2))
proving (X93 (-3) (-1))
proving (X93 (-1) (-2))
*** Example Instances obtained by Resolution:


************** current phase of 19th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (138): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(-1, 2) /\ X93(-1, -2) => );
(X2(0, -2) /\ X91(1, 1) => );
(X2(0, -2) /\ X91($1, 1) => );..]

*** labeling with SAT solving
************** current phase of 20th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
table:
FTFFFT_TFTT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (18):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
table:
FFFFFFFFFFFFFFFFFT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
table:
FTFFTFF_TTTF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
table:
FTTFFTFFF___TFFFTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
table:
FTFTF_TTFFFFFFT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (36):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (29):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTT

gen constr of example:(X2(-1, 1) /\ X91(-2, -2) => )
constr: [#S_1003] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 < 0) \/ (#paramvar182 < 0 \/ #paramvar179 + #paramvar180 * -2 + #paramvar181 * -2 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 + #paramvar176 * -2 + #paramvar177 * -2 < 0)
gen constr of example:(X2(-1, 2) /\ X93(-1, -2) => )
constr: [#S_1004] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 * 2 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 * 2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 * 2 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 * 2 < 0) \/ (#paramvar198 > 0 \/ #paramvar195 + -#paramvar196 + #paramvar197 * -2 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + -#paramvar192 + #paramvar193 * -2 < 0)
gen constr of example:(X2(-1, -2) /\ X90(-1, -1) => X1(-1, -1))
constr: [#S_1005] #paramvar174 < 0 \/ #paramvar171 + -#paramvar172 + -#paramvar173 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 * -2 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 * -2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 * -2 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 * -2 < 0) \/ #paramvar130 >= 0 /\ #paramvar127 + -#paramvar128 + -#paramvar129 >= 0
gen constr of example:(X3(-1, -3) /\ X3(-2, -3) => X2(-2, -3))
constr: [#S_1006] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 * -2 + #paramvar165 * -3 < 0 \/ #paramvar160 + #paramvar161 * -2 + #paramvar162 * -3 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 * -2 + #paramvar154 * -3 < 0 \/ #paramvar149 + #paramvar150 * -2 + #paramvar151 * -3 < 0) \/ (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + -#paramvar164 + #paramvar165 * -3 < 0 \/ #paramvar160 + -#paramvar161 + #paramvar162 * -3 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + -#paramvar153 + #paramvar154 * -3 < 0 \/ #paramvar149 + -#paramvar150 + #paramvar151 * -3 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 * -2 + #paramvar145 * -3 >= 0 /\ #paramvar140 + #paramvar141 * -2 + #paramvar142 * -3 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 * -2 + #paramvar136 * -3 >= 0 /\ #paramvar131 + #paramvar132 * -2 + #paramvar133 * -3 >= 0
gen constr of example:(X93(-3, -1) => X3(-3, 1))
constr: [#S_1007] (#paramvar198 > 0 \/ #paramvar195 + #paramvar196 * -3 + -#paramvar197 < 0) /\ (#paramvar194 > 0 \/ #paramvar191 + #paramvar192 * -3 + -#paramvar193 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -3 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -3 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -3 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -3 + #paramvar151 >= 0
bounds constr: [#S_1008] true
bounds constr: [#S_1009] true
bounds constr: [#S_1010] true
bounds constr: [#S_1011] true
bounds constr: [#S_1012] true
bounds constr: [#S_1013] true
bounds constr: [#S_1014] true
bounds constr: [#S_1015] true
bounds constr: [#S_1016] true
bounds constr: [#S_1017] (if (#paramvar195 >= 0) then #paramvar195 else -#paramvar195) <= 1 /\ (if (#paramvar191 >= 0) then #paramvar191 else -#paramvar191) <= 1
bounds constr: [#S_1018] (if (#paramvar196 >= 0) then #paramvar196 else -#paramvar196) + (if (#paramvar197 >= 0) then #paramvar197 else -#paramvar197) <= 2 /\ (if (#paramvar192 >= 0) then #paramvar192 else -#paramvar192) + (if (#paramvar193 >= 0) then #paramvar193 else -#paramvar193) <= 2
bounds constr: [#S_1019] true
bounds constr: [#S_1020] true
bounds constr: [#S_1021] true
bounds constr: [#S_1022] true
bounds constr: [#S_1023] (if (#paramvar179 >= 0) then #paramvar179 else -#paramvar179) <= 1 /\ (if (#paramvar175 >= 0) then #paramvar175 else -#paramvar175) <= 1
bounds constr: [#S_1024] (if (#paramvar180 >= 0) then #paramvar180 else -#paramvar180) + (if (#paramvar181 >= 0) then #paramvar181 else -#paramvar181) <= 1 /\ (if (#paramvar176 >= 0) then #paramvar176 else -#paramvar176) + (if (#paramvar177 >= 0) then #paramvar177 else -#paramvar177) <= 1
bounds constr: [#S_1025] true
bounds constr: [#S_1026] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_1027] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_1028] true
bounds constr: [#S_1029] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_1030] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) + (if (#paramvar165 >= 0) then #paramvar165 else -#paramvar165) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) + (if (#paramvar162 >= 0) then #paramvar162 else -#paramvar162) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) + (if (#paramvar154 >= 0) then #paramvar154 else -#paramvar154) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) + (if (#paramvar151 >= 0) then #paramvar151 else -#paramvar151) <= 2
bounds constr: [#S_1031] true
bounds constr: [#S_1032] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_1033] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_1034] true
bounds constr: [#S_1035] (if (#paramvar127 >= 0) then #paramvar127 else -#paramvar127) <= 0
bounds constr: [#S_1036] (if (#paramvar128 >= 0) then #paramvar128 else -#paramvar128) + (if (#paramvar129 >= 0) then #paramvar129 else -#paramvar129) <= 1
bounds constr: [#S_1037] true
constraints generated
sat
************** current phase of 20th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ 1 + x2 != 0 /\ -1 + -x1 >= 0 /\ 1 + x1 >= 0 \/ 1 + x2 = 0 /\ x1 >= 0 /\ -x1 >= 0
X3(x1: int, x2: int) :=
  x2 != 0 /\ 1 + x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ 1 + -x1 + x2 >= 0 \/ -1 + x1 + x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x2 >= 0
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  false
X96(x1: int, x2: int) :=
  false

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -2) /\ X91(1, 1) => X1(-1, 1));
(X2(-1, -3) /\ X90(-2, -2) => X1(-1, -2));
(X3(1, -2) => X2(1, -2))

************** current phase of 20th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (141): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(-1, 2) /\ X93(-1, -2) => );..]

*** labeling with SAT solving
************** current phase of 20th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-1) (-3))
refuting (X2 (-1) (-2))
refuting (X2 1 (-2))
refuting (X3 1 (-2))
refuting (X90 (-2) (-2))
refuting (X91 1 1)
proving (X2 (-1) (-3))
proving (X2 (-1) (-2))
proving (X2 1 (-2))
proving (X3 1 (-2))
proving (X90 (-2) (-2))
proving (X91 1 1)
*** Example Instances obtained by Resolution:


************** current phase of 20th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (141): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );
(X2(-1, 2) /\ X92(2, 2) => );
(X2(-1, 2) /\ X93(-1, -2) => );..]

*** labeling with SAT solving
************** current phase of 21st iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
table:
FTFFFT_TFTT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (18):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
table:
FFFFFFFFFFFFFFFFFT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
table:
FTFFTFF_TTTF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
table:
FTTFFTFFF___TFFFTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
table:
FTFTF_TTFFFFFFT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (36):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (30):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTT

gen constr of example:(X2(-1, -3) /\ X90(-2, -2) => )
constr: [#S_1038] #paramvar174 < 0 \/ #paramvar171 + #paramvar172 * -2 + #paramvar173 * -2 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 * -3 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 * -3 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 * -3 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 * -3 < 0)
gen constr of example:(X2(-1, -2) /\ X91(1, 1) => )
constr: [#S_1039] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 * -2 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 * -2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 * -2 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 * -2 < 0) \/ (#paramvar182 < 0 \/ #paramvar179 + #paramvar180 + #paramvar181 < 0) /\ (#paramvar178 < 0 \/ #paramvar175 + #paramvar176 + #paramvar177 < 0)
gen constr of example:(X3(1, -2) => X2(1, -2))
constr: [#S_1040] (#paramvar166 > 0 \/ #paramvar167 > 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 + #paramvar165 * -2 < 0 \/ #paramvar160 + #paramvar161 + #paramvar162 * -2 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 > 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 + #paramvar154 * -2 < 0 \/ #paramvar149 + #paramvar150 + #paramvar151 * -2 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 >= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 + #paramvar145 * -2 >= 0 /\ #paramvar140 + #paramvar141 + #paramvar142 * -2 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 >= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 + #paramvar136 * -2 >= 0 /\ #paramvar131 + #paramvar132 + #paramvar133 * -2 >= 0
bounds constr: [#S_1041] true
bounds constr: [#S_1042] true
bounds constr: [#S_1043] true
bounds constr: [#S_1044] true
bounds constr: [#S_1045] true
bounds constr: [#S_1046] true
bounds constr: [#S_1047] true
bounds constr: [#S_1048] true
bounds constr: [#S_1049] true
bounds constr: [#S_1050] true
bounds constr: [#S_1051] true
bounds constr: [#S_1052] true
bounds constr: [#S_1053] true
bounds constr: [#S_1054] true
bounds constr: [#S_1055] true
bounds constr: [#S_1056] (if (#paramvar179 >= 0) then #paramvar179 else -#paramvar179) <= 1 /\ (if (#paramvar175 >= 0) then #paramvar175 else -#paramvar175) <= 1
bounds constr: [#S_1057] (if (#paramvar180 >= 0) then #paramvar180 else -#paramvar180) + (if (#paramvar181 >= 0) then #paramvar181 else -#paramvar181) <= 1 /\ (if (#paramvar176 >= 0) then #paramvar176 else -#paramvar176) + (if (#paramvar177 >= 0) then #paramvar177 else -#paramvar177) <= 1
bounds constr: [#S_1058] true
bounds constr: [#S_1059] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_1060] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_1061] true
bounds constr: [#S_1062] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_1063] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) + (if (#paramvar165 >= 0) then #paramvar165 else -#paramvar165) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) + (if (#paramvar162 >= 0) then #paramvar162 else -#paramvar162) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) + (if (#paramvar154 >= 0) then #paramvar154 else -#paramvar154) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) + (if (#paramvar151 >= 0) then #paramvar151 else -#paramvar151) <= 2
bounds constr: [#S_1064] true
bounds constr: [#S_1065] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_1066] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_1067] true
bounds constr: [#S_1068] true
bounds constr: [#S_1069] true
bounds constr: [#S_1070] true
constraints generated
sat
************** current phase of 21st iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  1 + x2 != 0 /\ -1 + -x2 >= 0 /\ -x1 >= 0 \/ x2 != 0 /\ 1 + x2 != 0 /\ x1 >= 0 /\ x2 >= 0
X3(x1: int, x2: int) :=
  x2 != 0 /\ 1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ 1 + -2 * x1 >= 0 /\ 1 + -x1 >= 0 \/ -1 + -x1 + x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -1 + -x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0 \/ x1 + -x2 = 0 /\ -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -2) /\ X93(2, 2) => X1(-1, 2));
(X2(-1, -3) /\ X90(-3, -2) => X1(-1, -2));
(X2(0, 1) /\ X94(-1, -1) => X1(0, -1));
(X3(-1, 1) /\ X3(0, 1) => X2(-1, 1));
(X90(-3, 0) => X3(-3, -1));
(X93(1, 1) => X3(1, -1));
(X95(1, 1) => X3(1, -1))

************** current phase of 21st iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (148): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );..]

*** labeling with SAT solving
************** current phase of 21st iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-1) (-3))
refuting (X2 (-1) (-2))
refuting (X2 (-1) 1)
refuting (X2 0 1)
refuting (X3 (-3) (-1))
refuting (X3 (-1) 1)
refuting (X3 0 1)
refuting (X3 1 (-1))
refuting (X90 (-3) (-2))
refuting (X90 (-3) 0)
refuting (X93 1 1)
refuting (X93 2 2)
refuting (X94 (-1) (-1))
refuting (X95 1 1)
proving (X2 (-1) (-3))
proving (X2 (-1) (-2))
proving (X2 (-1) 1)
proving (X2 0 1)
proving (X3 (-3) (-1))
proving (X3 (-1) 1)
proving (X3 0 1)
proving (X3 1 (-1))
proving (X90 (-3) (-2))
proving (X90 (-3) 0)
proving (X93 1 1)
proving (X93 2 2)
proving (X94 (-1) (-1))
proving (X95 1 1)
*** Example Instances obtained by Resolution:


************** current phase of 21st iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (148): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );..]

*** labeling with SAT solving
************** current phase of 22nd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
table:
FTFFFT_TFTT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (18):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
table:
FFFFFFFFFFFFFFFFFT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
table:
FTFFTFF_TTTF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
table:
FTTFFTFFF___TFFFTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
table:
FTFTF_TTFFFFFFTFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (36):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (30):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTT

gen constr of example:(X2(-1, -3) /\ X90(-3, -2) => )
constr: [#S_1071] #paramvar174 > 0 \/ #paramvar171 + #paramvar172 * -3 + #paramvar173 * -2 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 * -3 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 * -3 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 * -3 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 * -3 < 0)
gen constr of example:(X2(-1, -2) /\ X93(2, 2) => )
constr: [#S_1072] (#paramvar146 < 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + -#paramvar144 + #paramvar145 * -2 < 0 \/ #paramvar140 + -#paramvar141 + #paramvar142 * -2 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + -#paramvar135 + #paramvar136 * -2 < 0 \/ #paramvar131 + -#paramvar132 + #paramvar133 * -2 < 0) \/ (#paramvar198 < 0 \/ #paramvar195 + #paramvar196 * 2 + #paramvar197 * 2 < 0) /\ (#paramvar194 < 0 \/ #paramvar191 + #paramvar192 * 2 + #paramvar193 * 2 < 0)
gen constr of example:(X2(0, 1) /\ X94(-1, -1) => )
constr: [#S_1073] (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar145 < 0 \/ #paramvar140 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar136 < 0 \/ #paramvar131 + #paramvar133 < 0) \/ (#paramvar206 < 0 \/ #paramvar203 + -#paramvar204 + -#paramvar205 < 0) /\ (#paramvar202 < 0 \/ #paramvar199 + -#paramvar200 + -#paramvar201 < 0)
gen constr of example:(X3(-1, 1) /\ X3(0, 1) => X2(-1, 1))
constr: [#S_1074] (#paramvar166 > 0 \/ #paramvar167 < 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + -#paramvar164 + #paramvar165 < 0 \/ #paramvar160 + -#paramvar161 + #paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 < 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + -#paramvar153 + #paramvar154 < 0 \/ #paramvar149 + -#paramvar150 + #paramvar151 < 0) \/ (#paramvar166 > 0 \/ #paramvar167 < 0 \/ #paramvar168 > 0 \/ #paramvar169 < 0 \/ #paramvar170 < 0 \/ #paramvar163 + #paramvar165 < 0 \/ #paramvar160 + #paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 < 0 \/ #paramvar157 > 0 \/ #paramvar158 < 0 \/ #paramvar159 < 0 \/ #paramvar152 + #paramvar154 < 0 \/ #paramvar149 + #paramvar151 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 <= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + -#paramvar144 + #paramvar145 >= 0 /\ #paramvar140 + -#paramvar141 + #paramvar142 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 <= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + -#paramvar135 + #paramvar136 >= 0 /\ #paramvar131 + -#paramvar132 + #paramvar133 >= 0
gen constr of example:(X90(-3, 0) => X3(-3, -1))
constr: [#S_1075] #paramvar174 > 0 \/ #paramvar171 + #paramvar172 * -3 < 0 \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -3 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -3 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -3 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -3 + -#paramvar151 >= 0
gen constr of example:(X93(1, 1) => X3(1, -1))
constr: [#S_1076] (#paramvar198 < 0 \/ #paramvar195 + #paramvar196 + #paramvar197 < 0) /\ (#paramvar194 < 0 \/ #paramvar191 + #paramvar192 + #paramvar193 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 + -#paramvar151 >= 0
gen constr of example:(X95(1, 1) => X3(1, -1))
constr: [#S_1077] (#paramvar214 < 0 \/ #paramvar211 + #paramvar212 + #paramvar213 < 0) /\ (#paramvar210 < 0 \/ #paramvar207 + #paramvar208 + #paramvar209 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 <= 0 /\ #paramvar168 >= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 + -#paramvar165 >= 0 /\ #paramvar160 + #paramvar161 + -#paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 <= 0 /\ #paramvar157 >= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 + -#paramvar154 >= 0 /\ #paramvar149 + #paramvar150 + -#paramvar151 >= 0
bounds constr: [#S_1078] true
bounds constr: [#S_1079] true
bounds constr: [#S_1080] true
bounds constr: [#S_1081] (if (#paramvar211 >= 0) then #paramvar211 else -#paramvar211) <= 1 /\ (if (#paramvar207 >= 0) then #paramvar207 else -#paramvar207) <= 1
bounds constr: [#S_1082] (if (#paramvar212 >= 0) then #paramvar212 else -#paramvar212) + (if (#paramvar213 >= 0) then #paramvar213 else -#paramvar213) <= 2 /\ (if (#paramvar208 >= 0) then #paramvar208 else -#paramvar208) + (if (#paramvar209 >= 0) then #paramvar209 else -#paramvar209) <= 2
bounds constr: [#S_1083] true
bounds constr: [#S_1084] (if (#paramvar203 >= 0) then #paramvar203 else -#paramvar203) <= 1 /\ (if (#paramvar199 >= 0) then #paramvar199 else -#paramvar199) <= 1
bounds constr: [#S_1085] (if (#paramvar204 >= 0) then #paramvar204 else -#paramvar204) + (if (#paramvar205 >= 0) then #paramvar205 else -#paramvar205) <= 1 /\ (if (#paramvar200 >= 0) then #paramvar200 else -#paramvar200) + (if (#paramvar201 >= 0) then #paramvar201 else -#paramvar201) <= 1
bounds constr: [#S_1086] true
bounds constr: [#S_1087] (if (#paramvar195 >= 0) then #paramvar195 else -#paramvar195) <= 1 /\ (if (#paramvar191 >= 0) then #paramvar191 else -#paramvar191) <= 1
bounds constr: [#S_1088] (if (#paramvar196 >= 0) then #paramvar196 else -#paramvar196) + (if (#paramvar197 >= 0) then #paramvar197 else -#paramvar197) <= 2 /\ (if (#paramvar192 >= 0) then #paramvar192 else -#paramvar192) + (if (#paramvar193 >= 0) then #paramvar193 else -#paramvar193) <= 2
bounds constr: [#S_1089] true
bounds constr: [#S_1090] true
bounds constr: [#S_1091] true
bounds constr: [#S_1092] true
bounds constr: [#S_1093] true
bounds constr: [#S_1094] true
bounds constr: [#S_1095] true
bounds constr: [#S_1096] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_1097] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_1098] true
bounds constr: [#S_1099] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_1100] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) + (if (#paramvar165 >= 0) then #paramvar165 else -#paramvar165) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) + (if (#paramvar162 >= 0) then #paramvar162 else -#paramvar162) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) + (if (#paramvar154 >= 0) then #paramvar154 else -#paramvar154) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) + (if (#paramvar151 >= 0) then #paramvar151 else -#paramvar151) <= 2
bounds constr: [#S_1101] true
bounds constr: [#S_1102] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_1103] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_1104] true
bounds constr: [#S_1105] true
bounds constr: [#S_1106] true
bounds constr: [#S_1107] true
constraints generated
sat
************** current phase of 22nd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ 1 + -x1 >= 0 /\ -1 + x1 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ -x1 >= 0 /\ x1 >= 0
X3(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x1 + x2 != 0 /\ 1 + -2 * x1 >= 0 /\ 1 + x1 + x2 >= 0 \/ x2 = 0 /\ -1 + x1 + x2 = 0 /\ -1 + x1 + -x2 >= 0 /\ -1 + x1 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x2 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  -1 + -x1 >= 0 \/ -1 + -x1 >= 0
X95(x1: int, x2: int) :=
  false
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(1, 0) /\ X90(1, 1) => X1(1, 1));
(X3(-1, 1) => X2(-1, 1));
(X90(2, 2) => X3(2, 1));
(X94(-3, $1) => X3(-3, 1))

************** current phase of 22nd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (152): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );..]

*** labeling with SAT solving
************** current phase of 22nd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X94 (-3) $1)
proving (X94 (-3) $1)
refuting (X1 1 1)
refuting (X2 (-1) 1)
refuting (X2 1 0)
refuting (X3 (-3) 1)
refuting (X3 (-1) 1)
refuting (X3 2 1)
refuting (X90 1 1)
refuting (X90 2 2)
proving (X1 1 1)
proving (X2 (-1) 1)
proving (X2 1 0)
proving (X3 (-3) 1)
proving (X3 (-1) 1)
proving (X3 2 1)
proving (X90 1 1)
proving (X90 2 2)
*** Example Instances obtained by Resolution:


************** current phase of 22nd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (152): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );..]

*** labeling with SAT solving
************** current phase of 23rd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
table:
FTFFFT_TFTTF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (19):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
table:
FFFFFFFFFFFFFFFFFTT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
table:
FTFFTFF_TTTF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
table:
FTTFFTFFF___TFFFTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
table:
FTFTF_TTFFFFFFTFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (37):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFT
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (30):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTT

gen constr of example:(X2(1, 0) /\ X90(1, 1) => X1(1, 1))
constr: [#S_1108] #paramvar174 < 0 \/ #paramvar171 + #paramvar172 + #paramvar173 < 0 \/ (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 < 0 \/ #paramvar140 + #paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 < 0 \/ #paramvar131 + #paramvar132 < 0) \/ #paramvar130 >= 0 /\ #paramvar127 + #paramvar128 + #paramvar129 >= 0
gen constr of example:(X3(-1, 1) => X2(-1, 1))
constr: [#S_1109] (#paramvar166 > 0 \/ #paramvar167 < 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + -#paramvar164 + #paramvar165 < 0 \/ #paramvar160 + -#paramvar161 + #paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 < 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + -#paramvar153 + #paramvar154 < 0 \/ #paramvar149 + -#paramvar150 + #paramvar151 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 <= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + -#paramvar144 + #paramvar145 >= 0 /\ #paramvar140 + -#paramvar141 + #paramvar142 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 <= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + -#paramvar135 + #paramvar136 >= 0 /\ #paramvar131 + -#paramvar132 + #paramvar133 >= 0
gen constr of example:(X94(-3, $1) => X3(-3, 1))
constr: [#S_1110] (#paramvar206 > 0 \/ #paramvar203 + #paramvar204 * -3 < 0) /\ (#paramvar202 > 0 \/ #paramvar199 + #paramvar200 * -3 < 0) \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -3 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * -3 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -3 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * -3 + #paramvar151 >= 0
gen constr of example:(X90(2, 2) => X3(2, 1))
constr: [#S_1111] #paramvar174 < 0 \/ #paramvar171 + #paramvar172 * 2 + #paramvar173 * 2 < 0 \/ #paramvar166 <= 0 /\ #paramvar167 >= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * 2 + #paramvar165 >= 0 /\ #paramvar160 + #paramvar161 * 2 + #paramvar162 >= 0 \/ #paramvar155 <= 0 /\ #paramvar156 >= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * 2 + #paramvar154 >= 0 /\ #paramvar149 + #paramvar150 * 2 + #paramvar151 >= 0
bounds constr: [#S_1112] true
bounds constr: [#S_1113] true
bounds constr: [#S_1114] true
bounds constr: [#S_1115] true
bounds constr: [#S_1116] true
bounds constr: [#S_1117] true
bounds constr: [#S_1118] (if (#paramvar203 >= 0) then #paramvar203 else -#paramvar203) <= 1 /\ (if (#paramvar199 >= 0) then #paramvar199 else -#paramvar199) <= 1
bounds constr: [#S_1119] (if (#paramvar204 >= 0) then #paramvar204 else -#paramvar204) <= 1 /\ (if (#paramvar200 >= 0) then #paramvar200 else -#paramvar200) <= 1
bounds constr: [#S_1120] true
bounds constr: [#S_1121] true
bounds constr: [#S_1122] true
bounds constr: [#S_1123] true
bounds constr: [#S_1124] true
bounds constr: [#S_1125] true
bounds constr: [#S_1126] true
bounds constr: [#S_1127] true
bounds constr: [#S_1128] true
bounds constr: [#S_1129] true
bounds constr: [#S_1130] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_1131] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_1132] true
bounds constr: [#S_1133] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_1134] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) + (if (#paramvar165 >= 0) then #paramvar165 else -#paramvar165) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) + (if (#paramvar162 >= 0) then #paramvar162 else -#paramvar162) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) + (if (#paramvar154 >= 0) then #paramvar154 else -#paramvar154) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) + (if (#paramvar151 >= 0) then #paramvar151 else -#paramvar151) <= 2
bounds constr: [#S_1135] true
bounds constr: [#S_1136] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_1137] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_1138] true
bounds constr: [#S_1139] (if (#paramvar127 >= 0) then #paramvar127 else -#paramvar127) <= 0
bounds constr: [#S_1140] (if (#paramvar128 >= 0) then #paramvar128 else -#paramvar128) + (if (#paramvar129 >= 0) then #paramvar129 else -#paramvar129) <= 1
bounds constr: [#S_1141] true
constraints generated
sat
************** current phase of 23rd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  1 + x2 != 0 /\ -1 + x1 >= 0 /\ 1 + -x1 >= 0 \/ x2 != 0 /\ -x1 >= 0 /\ x1 >= 0
X3(x1: int, x2: int) :=
  1 + x2 != 0 /\ -1 + x1 + x2 >= 0 /\ -1 + x1 + -x2 >= 0 \/ -1 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x2 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  false
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(1, 0) /\ X96(-1, -1) => X1(1, -1));
(X2(1, 1) /\ X90(2, 2) => X1(1, 2));
(X3(-2, 1) /\ X3(2, 1) => X2(-2, 1));
(X96(-2, -2) => X3(-2, 0))

************** current phase of 23rd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (156): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );..]

*** labeling with SAT solving
************** current phase of 23rd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-2) 1)
refuting (X2 1 0)
refuting (X2 1 1)
refuting (X3 (-2) 0)
refuting (X3 (-2) 1)
refuting (X3 2 1)
refuting (X90 2 2)
refuting (X96 (-2) (-2))
refuting (X96 (-1) (-1))
proving (X2 (-2) 1)
proving (X2 1 0)
proving (X2 1 1)
proving (X3 (-2) 0)
proving (X3 (-2) 1)
proving (X3 2 1)
proving (X90 2 2)
proving (X96 (-2) (-2))
proving (X96 (-1) (-1))
*** Example Instances obtained by Resolution:


************** current phase of 23rd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (156): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );
(X2(-1, 1) /\ X94(0, 0) => );
(X2(-1, 2) /\ X90(0, 3) => );..]

*** labeling with SAT solving
************** current phase of 24th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
table:
FTFFFT_TFTTF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (19):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
table:
FFFFFFFFFFFFFFFFFTT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
table:
FTFFTFF_TTTF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
table:
FTTFFTFFF___TFFFTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
table:
FTFTF_TTFFFFFFTFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (37):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFT
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (30):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTT

gen constr of example:(X2(1, 0) /\ X96(-1, -1) => )
constr: [#S_1142] (#paramvar146 > 0 \/ #paramvar147 < 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 < 0 \/ #paramvar140 + #paramvar141 < 0) /\ (#paramvar137 > 0 \/ #paramvar138 < 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 < 0 \/ #paramvar131 + #paramvar132 < 0) \/ (#paramvar222 < 0 \/ #paramvar219 + -#paramvar220 + -#paramvar221 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 + -#paramvar216 + -#paramvar217 < 0)
gen constr of example:(X2(1, 1) /\ X90(2, 2) => )
constr: [#S_1143] #paramvar174 < 0 \/ #paramvar171 + #paramvar172 * 2 + #paramvar173 * 2 < 0 \/ (#paramvar146 < 0 \/ #paramvar147 > 0 \/ #paramvar148 < 0 \/ #paramvar143 + #paramvar144 + #paramvar145 < 0 \/ #paramvar140 + #paramvar141 + #paramvar142 < 0) /\ (#paramvar137 < 0 \/ #paramvar138 > 0 \/ #paramvar139 < 0 \/ #paramvar134 + #paramvar135 + #paramvar136 < 0 \/ #paramvar131 + #paramvar132 + #paramvar133 < 0)
gen constr of example:(X3(-2, 1) /\ X3(2, 1) => X2(-2, 1))
constr: [#S_1144] (#paramvar166 > 0 \/ #paramvar167 < 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 * -2 + #paramvar165 < 0 \/ #paramvar160 + #paramvar161 * -2 + #paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 < 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 * -2 + #paramvar154 < 0 \/ #paramvar149 + #paramvar150 * -2 + #paramvar151 < 0) \/ (#paramvar166 > 0 \/ #paramvar167 < 0 \/ #paramvar168 > 0 \/ #paramvar169 > 0 \/ #paramvar170 > 0 \/ #paramvar163 + #paramvar164 * 2 + #paramvar165 < 0 \/ #paramvar160 + #paramvar161 * 2 + #paramvar162 < 0) /\ (#paramvar155 > 0 \/ #paramvar156 < 0 \/ #paramvar157 > 0 \/ #paramvar158 > 0 \/ #paramvar159 > 0 \/ #paramvar152 + #paramvar153 * 2 + #paramvar154 < 0 \/ #paramvar149 + #paramvar150 * 2 + #paramvar151 < 0) \/ #paramvar146 >= 0 /\ #paramvar147 <= 0 /\ #paramvar148 >= 0 /\ #paramvar143 + #paramvar144 * -2 + #paramvar145 >= 0 /\ #paramvar140 + #paramvar141 * -2 + #paramvar142 >= 0 \/ #paramvar137 >= 0 /\ #paramvar138 <= 0 /\ #paramvar139 >= 0 /\ #paramvar134 + #paramvar135 * -2 + #paramvar136 >= 0 /\ #paramvar131 + #paramvar132 * -2 + #paramvar133 >= 0
gen constr of example:(X96(-2, -2) => X3(-2, 0))
constr: [#S_1145] (#paramvar222 < 0 \/ #paramvar219 + #paramvar220 * -2 + #paramvar221 * -2 < 0) /\ (#paramvar218 < 0 \/ #paramvar215 + #paramvar216 * -2 + #paramvar217 * -2 < 0) \/ #paramvar166 >= 0 /\ #paramvar167 <= 0 /\ #paramvar168 <= 0 /\ #paramvar169 <= 0 /\ #paramvar170 <= 0 /\ #paramvar163 + #paramvar164 * -2 >= 0 /\ #paramvar160 + #paramvar161 * -2 >= 0 \/ #paramvar155 >= 0 /\ #paramvar156 <= 0 /\ #paramvar157 <= 0 /\ #paramvar158 <= 0 /\ #paramvar159 <= 0 /\ #paramvar152 + #paramvar153 * -2 >= 0 /\ #paramvar149 + #paramvar150 * -2 >= 0
bounds constr: [#S_1146] (if (#paramvar219 >= 0) then #paramvar219 else -#paramvar219) <= 1 /\ (if (#paramvar215 >= 0) then #paramvar215 else -#paramvar215) <= 1
bounds constr: [#S_1147] (if (#paramvar220 >= 0) then #paramvar220 else -#paramvar220) + (if (#paramvar221 >= 0) then #paramvar221 else -#paramvar221) <= 2 /\ (if (#paramvar216 >= 0) then #paramvar216 else -#paramvar216) + (if (#paramvar217 >= 0) then #paramvar217 else -#paramvar217) <= 2
bounds constr: [#S_1148] true
bounds constr: [#S_1149] true
bounds constr: [#S_1150] true
bounds constr: [#S_1151] true
bounds constr: [#S_1152] true
bounds constr: [#S_1153] true
bounds constr: [#S_1154] true
bounds constr: [#S_1155] true
bounds constr: [#S_1156] true
bounds constr: [#S_1157] true
bounds constr: [#S_1158] true
bounds constr: [#S_1159] true
bounds constr: [#S_1160] true
bounds constr: [#S_1161] true
bounds constr: [#S_1162] true
bounds constr: [#S_1163] true
bounds constr: [#S_1164] (if (#paramvar171 >= 0) then #paramvar171 else -#paramvar171) <= 0
bounds constr: [#S_1165] (if (#paramvar172 >= 0) then #paramvar172 else -#paramvar172) + (if (#paramvar173 >= 0) then #paramvar173 else -#paramvar173) <= 1
bounds constr: [#S_1166] true
bounds constr: [#S_1167] (if (#paramvar163 >= 0) then #paramvar163 else -#paramvar163) <= 1 /\ (if (#paramvar160 >= 0) then #paramvar160 else -#paramvar160) <= 1 /\ (if (#paramvar152 >= 0) then #paramvar152 else -#paramvar152) <= 1 /\ (if (#paramvar149 >= 0) then #paramvar149 else -#paramvar149) <= 1
bounds constr: [#S_1168] (if (#paramvar164 >= 0) then #paramvar164 else -#paramvar164) + (if (#paramvar165 >= 0) then #paramvar165 else -#paramvar165) <= 2 /\ (if (#paramvar161 >= 0) then #paramvar161 else -#paramvar161) + (if (#paramvar162 >= 0) then #paramvar162 else -#paramvar162) <= 2 /\ (if (#paramvar153 >= 0) then #paramvar153 else -#paramvar153) + (if (#paramvar154 >= 0) then #paramvar154 else -#paramvar154) <= 2 /\ (if (#paramvar150 >= 0) then #paramvar150 else -#paramvar150) + (if (#paramvar151 >= 0) then #paramvar151 else -#paramvar151) <= 2
bounds constr: [#S_1169] true
bounds constr: [#S_1170] (if (#paramvar143 >= 0) then #paramvar143 else -#paramvar143) <= 1 /\ (if (#paramvar140 >= 0) then #paramvar140 else -#paramvar140) <= 1 /\ (if (#paramvar134 >= 0) then #paramvar134 else -#paramvar134) <= 1 /\ (if (#paramvar131 >= 0) then #paramvar131 else -#paramvar131) <= 1
bounds constr: [#S_1171] (if (#paramvar144 >= 0) then #paramvar144 else -#paramvar144) + (if (#paramvar145 >= 0) then #paramvar145 else -#paramvar145) <= 1 /\ (if (#paramvar141 >= 0) then #paramvar141 else -#paramvar141) + (if (#paramvar142 >= 0) then #paramvar142 else -#paramvar142) <= 1 /\ (if (#paramvar135 >= 0) then #paramvar135 else -#paramvar135) + (if (#paramvar136 >= 0) then #paramvar136 else -#paramvar136) <= 1 /\ (if (#paramvar132 >= 0) then #paramvar132 else -#paramvar132) + (if (#paramvar133 >= 0) then #paramvar133 else -#paramvar133) <= 1
bounds constr: [#S_1172] true
bounds constr: [#S_1173] true
bounds constr: [#S_1174] true
bounds constr: [#S_1175] true
constraints generated
unsat, reason:|#S_722|,|#S_723|,|#S_729|,|#S_730|,|#S_731|,|#S_735|,|#S_738|,|#S_741|,|#S_742|,|#S_743|,|#S_744|,|#S_748|,|#S_750|,|#S_751|,|#S_754|,|#S_755|,|#S_756|,|#S_757|,|#S_761|,|#S_762|,|#S_763|,|#S_765|,|#S_766|,|#S_767|,|#S_769|,|#S_770|,|#S_771|,|#S_865|,|#S_772|,|#S_773|,|#S_774|,|#S_779|,|#S_780|,|#S_782|,|#S_788|,|#S_789|,|#S_790|,|#S_791|,|#S_794|,|#S_796|,|#S_797|,|#S_798|,|#S_799|,|#S_800|,|#S_804|,|#S_805|,|#S_806|,|#S_807|,|#S_810|,|#S_811|,|#S_812|,|#S_813|,|#S_814|,|#S_820|,|#S_823|,|#S_827|,|#S_828|,|#S_829|,|#S_833|,|#S_836|,|#S_839|,|#S_840|,|#S_842|,|#S_845|,|#S_848|,|#S_849|,|#S_851|,|#S_852|,|#S_854|,|#S_855|,|#S_857|,|#S_858|,|#S_966|,|#S_900|,|#S_933|,|#S_924|,|#S_935|,|#S_967|,|#S_899|,|#S_969|,|#S_971|,|#S_1040|,|#S_972|,|#S_1038|,|#S_1073|,|#S_1074|,|#S_1109|,|#S_1071|,|#S_1075|,|#S_1111|,|#S_1142|
************* increasing number_of_disj of X2***************
************* increasing upper_bound_coeff of X2***************
************* increasing upper_bound_const of X2***************
************* increasing number_of_disj of X3***************
************* increasing upper_bound_coeff of X3***************
************* increasing upper_bound_const of X3***************
************* increasing number_of_disj of X90***************
************* increasing upper_bound_coeff of X90***************
************* increasing upper_bound_const of X90***************
************* increasing number_of_conj of X91***************
************* increasing upper_bound_coeff of X91***************
************* increasing upper_bound_const of X91***************
************* increasing number_of_conj of X92***************
************* increasing upper_bound_const of X92***************
************* increasing number_of_conj of X93***************
************* increasing upper_bound_const of X93***************
************* increasing number_of_conj of X94***************
************* increasing upper_bound_coeff of X94***************
************* increasing upper_bound_const of X94***************
************* increasing number_of_conj of X95***************
************* increasing upper_bound_const of X95***************
************* increasing number_of_conj of X96***************
************* increasing upper_bound_const of X96***************
[X1](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X2](x1: int, x2: int)
depth: 0, #quals: 3, #terms: 0
[X3](x1: int, x2: int)
depth: 0, #quals: 5, #terms: 0
[X90](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X91](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X92](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X93](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X94](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X95](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
[X96](x1: int, x2: int)
depth: 0, #quals: 1, #terms: 0
templates generated
solver initialized

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (13):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
table:
FTFFFT_TFTTF_


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (19):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
table:
FFFFFFFFFFFFFFFFFTT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (12):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
table:
FTFFTFF_TTTF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
table:
FTTFFTFFF___TFFFTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
table:
FTFTF_TTFFFFFFTFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (37):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFT
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
table:
FTFTFF_TTFFFF_T


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (30):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTT

gen constr of example:(X1(-4, -3) => )
constr: [#S_1176] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -4 + #paramvar225 * -3 < 0
gen constr of example:(X1(-3, -2) => )
constr: [#S_1177] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -3 + #paramvar225 * -2 < 0
gen constr of example:(X1(-2, -1) => )
constr: [#S_1178] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -2 + -#paramvar225 < 0
gen constr of example:(X1(-1, -2) => )
constr: [#S_1179] #paramvar226 > 0 \/ #paramvar223 + -#paramvar224 + #paramvar225 * -2 < 0
gen constr of example:(X1(-1, 0) => )
constr: [#S_1180] #paramvar226 > 0 \/ #paramvar223 + -#paramvar224 < 0
gen constr of example:(X1(-1, 1) => )
constr: [#S_1181] #paramvar226 > 0 \/ #paramvar223 + -#paramvar224 + #paramvar225 < 0
gen constr of example:(X1(-1, 2) => )
constr: [#S_1182] #paramvar226 > 0 \/ #paramvar223 + -#paramvar224 + #paramvar225 * 2 < 0
gen constr of example:(X1(-1, 3) => )
constr: [#S_1183] #paramvar226 > 0 \/ #paramvar223 + -#paramvar224 + #paramvar225 * 3 < 0
gen constr of example:(X1(0, -2) => )
constr: [#S_1184] #paramvar226 > 0 \/ #paramvar223 + #paramvar225 * -2 < 0
gen constr of example:(X1(0, -1) => )
constr: [#S_1185] #paramvar226 > 0 \/ #paramvar223 + -#paramvar225 < 0
gen constr of example:(X1(0, 1) => )
constr: [#S_1186] #paramvar226 > 0 \/ #paramvar223 + #paramvar225 < 0
gen constr of example:(X1(0, 2) => )
constr: [#S_1187] #paramvar226 > 0 \/ #paramvar223 + #paramvar225 * 2 < 0
gen constr of example:(X1(1, -2) => )
constr: [#S_1188] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 + #paramvar225 * -2 < 0
gen constr of example:(X1(1, -1) => )
constr: [#S_1189] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 + -#paramvar225 < 0
gen constr of example:(X1(1, 0) => )
constr: [#S_1190] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 < 0
gen constr of example:(X1(1, 2) => )
constr: [#S_1191] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 + #paramvar225 * 2 < 0
gen constr of example:(X1(2, 1) => )
constr: [#S_1192] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 2 + #paramvar225 < 0
gen constr of example:(X2(-4, 2) /\ X91(0, -3) => )
constr: [#S_1193] (#paramvar308 > 0 \/ #paramvar305 + #paramvar307 * -3 < 0 \/ #paramvar302 + #paramvar304 * -3 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar300 * -3 < 0 \/ #paramvar295 + #paramvar297 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -4 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -4 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -4 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -4 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -4 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -4 + #paramvar229 * 2 < 0)
gen constr of example:(X2(-3, 2) /\ X93(0, -2) => )
constr: [#S_1194] (#paramvar336 > 0 \/ #paramvar333 + #paramvar335 * -2 < 0 \/ #paramvar330 + #paramvar332 * -2 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar328 * -2 < 0 \/ #paramvar323 + #paramvar325 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 2 < 0)
gen constr of example:(X2(-2, -2) /\ X90(-1, -1) => )
constr: [#S_1195] (#paramvar294 < 0 \/ #paramvar291 + -#paramvar292 + -#paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + -#paramvar288 + -#paramvar289 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * -2 < 0)
gen constr of example:(X2(-2, 0) /\ X91(-1, -1) => )
constr: [#S_1196] (#paramvar308 < 0 \/ #paramvar305 + -#paramvar306 + -#paramvar307 < 0 \/ #paramvar302 + -#paramvar303 + -#paramvar304 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + -#paramvar299 + -#paramvar300 < 0 \/ #paramvar295 + -#paramvar296 + -#paramvar297 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0)
gen constr of example:(X2(-2, 1) /\ X94(0, -1) => )
constr: [#S_1197] (#paramvar350 > 0 \/ #paramvar347 + -#paramvar349 < 0 \/ #paramvar344 + -#paramvar346 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + -#paramvar342 < 0 \/ #paramvar337 + -#paramvar339 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 < 0)
gen constr of example:(X2(-1, -3) /\ X90(-3, -2) => )
constr: [#S_1198] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 * -3 + #paramvar293 * -2 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 * -3 + #paramvar289 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * -3 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * -3 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * -3 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * -3 < 0)
gen constr of example:(X2(-1, -3) /\ X90(-2, -2) => )
constr: [#S_1199] (#paramvar294 < 0 \/ #paramvar291 + #paramvar292 * -2 + #paramvar293 * -2 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + #paramvar288 * -2 + #paramvar289 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * -3 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * -3 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * -3 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * -3 < 0)
gen constr of example:(X2(-1, -2) /\ X91(1, 1) => )
constr: [#S_1200] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 + #paramvar307 < 0 \/ #paramvar302 + #paramvar303 + #paramvar304 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 + #paramvar300 < 0 \/ #paramvar295 + #paramvar296 + #paramvar297 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * -2 < 0)
gen constr of example:(X2(-1, -2) /\ X93(2, 2) => )
constr: [#S_1201] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 < 0 \/ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 < 0 \/ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * -2 < 0)
gen constr of example:(X2(-1, -1) /\ X90(0, 0) => )
constr: [#S_1202] (#paramvar294 < 0 \/ #paramvar291 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(-1, -1) /\ X95(0, 0) => )
constr: [#S_1203] (#paramvar364 < 0 \/ #paramvar361 < 0 \/ #paramvar358 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 < 0 \/ #paramvar351 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(-1, 0) /\ X92(1, 0) => )
constr: [#S_1204] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 < 0 \/ #paramvar316 + #paramvar317 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 < 0 \/ #paramvar309 + #paramvar310 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(-1, 0) /\ X93(1, 0) => )
constr: [#S_1205] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 < 0 \/ #paramvar330 + #paramvar331 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 < 0 \/ #paramvar323 + #paramvar324 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(-1, 0) /\ X96(0, -2) => )
constr: [#S_1206] (#paramvar378 > 0 \/ #paramvar375 + #paramvar377 * -2 < 0 \/ #paramvar372 + #paramvar374 * -2 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar370 * -2 < 0 \/ #paramvar365 + #paramvar367 * -2 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(-1, 0) /\ X96(1, 0) => )
constr: [#S_1207] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 < 0 \/ #paramvar372 + #paramvar373 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 < 0 \/ #paramvar365 + #paramvar366 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(-1, 0) /\ X96(1, 1) => )
constr: [#S_1208] (#paramvar378 < 0 \/ #paramvar375 + #paramvar376 + #paramvar377 < 0 \/ #paramvar372 + #paramvar373 + #paramvar374 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + #paramvar369 + #paramvar370 < 0 \/ #paramvar365 + #paramvar366 + #paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(-1, 1) /\ X90(0, 2) => )
constr: [#S_1209] (#paramvar294 > 0 \/ #paramvar291 + #paramvar293 * 2 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar289 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(-1, 1) /\ X91(-2, -2) => )
constr: [#S_1210] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * -2 + #paramvar307 * -2 < 0 \/ #paramvar302 + #paramvar303 * -2 + #paramvar304 * -2 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * -2 + #paramvar300 * -2 < 0 \/ #paramvar295 + #paramvar296 * -2 + #paramvar297 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(-1, 1) /\ X94(0, 0) => )
constr: [#S_1211] (#paramvar350 < 0 \/ #paramvar347 < 0 \/ #paramvar344 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 < 0 \/ #paramvar337 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(-1, 2) /\ X90(0, 3) => )
constr: [#S_1212] (#paramvar294 > 0 \/ #paramvar291 + #paramvar293 * 3 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar289 * 3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * 2 < 0)
gen constr of example:(X2(-1, 2) /\ X92(2, 2) => )
constr: [#S_1213] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * 2 < 0)
gen constr of example:(X2(-1, 2) /\ X93(-1, -2) => )
constr: [#S_1214] (#paramvar336 > 0 \/ #paramvar333 + -#paramvar334 + #paramvar335 * -2 < 0 \/ #paramvar330 + -#paramvar331 + #paramvar332 * -2 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + -#paramvar327 + #paramvar328 * -2 < 0 \/ #paramvar323 + -#paramvar324 + #paramvar325 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * 2 < 0)
gen constr of example:(X2(0, -2) /\ X91(1, 1) => )
constr: [#S_1215] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 + #paramvar307 < 0 \/ #paramvar302 + #paramvar303 + #paramvar304 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 + #paramvar300 < 0 \/ #paramvar295 + #paramvar296 + #paramvar297 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar229 * -2 < 0)
gen constr of example:(X2(0, -2) /\ X91($1, 1) => )
constr: [#S_1216] (#paramvar308 > 0 \/ #paramvar305 + #paramvar307 < 0 \/ #paramvar302 + #paramvar304 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar300 < 0 \/ #paramvar295 + #paramvar297 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar229 * -2 < 0)
gen constr of example:(X2(0, -1) /\ X92(-1, -1) => )
constr: [#S_1217] (#paramvar322 < 0 \/ #paramvar319 + -#paramvar320 + -#paramvar321 < 0 \/ #paramvar316 + -#paramvar317 + -#paramvar318 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + -#paramvar313 + -#paramvar314 < 0 \/ #paramvar309 + -#paramvar310 + -#paramvar311 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, -1) /\ X93(-1, 1) => )
constr: [#S_1218] (#paramvar336 > 0 \/ #paramvar333 + -#paramvar334 + #paramvar335 < 0 \/ #paramvar330 + -#paramvar331 + #paramvar332 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + -#paramvar327 + #paramvar328 < 0 \/ #paramvar323 + -#paramvar324 + #paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, -1) /\ X93(1, 1) => )
constr: [#S_1219] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 + #paramvar335 < 0 \/ #paramvar330 + #paramvar331 + #paramvar332 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 + #paramvar328 < 0 \/ #paramvar323 + #paramvar324 + #paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, -1) /\ X95(0, -1) => )
constr: [#S_1220] (#paramvar364 > 0 \/ #paramvar361 + -#paramvar363 < 0 \/ #paramvar358 + -#paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + -#paramvar356 < 0 \/ #paramvar351 + -#paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, -1) /\ X95(1, 1) => )
constr: [#S_1221] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 + #paramvar363 < 0 \/ #paramvar358 + #paramvar359 + #paramvar360 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 + #paramvar356 < 0 \/ #paramvar351 + #paramvar352 + #paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, -1) /\ X93($1, 1) => )
constr: [#S_1222] (#paramvar336 > 0 \/ #paramvar333 + #paramvar335 < 0 \/ #paramvar330 + #paramvar332 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar328 < 0 \/ #paramvar323 + #paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, -1) /\ X95($1, 1) => )
constr: [#S_1223] (#paramvar364 > 0 \/ #paramvar361 + #paramvar363 < 0 \/ #paramvar358 + #paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar356 < 0 \/ #paramvar351 + #paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, 0) /\ X90(1, 1) => )
constr: [#S_1224] (#paramvar294 < 0 \/ #paramvar291 + #paramvar292 + #paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + #paramvar288 + #paramvar289 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X2(0, 0) /\ X96(-1, -1) => )
constr: [#S_1225] (#paramvar378 < 0 \/ #paramvar375 + -#paramvar376 + -#paramvar377 < 0 \/ #paramvar372 + -#paramvar373 + -#paramvar374 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + -#paramvar369 + -#paramvar370 < 0 \/ #paramvar365 + -#paramvar366 + -#paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X2(0, 0) /\ X96(1, 1) => )
constr: [#S_1226] (#paramvar378 < 0 \/ #paramvar375 + #paramvar376 + #paramvar377 < 0 \/ #paramvar372 + #paramvar373 + #paramvar374 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + #paramvar369 + #paramvar370 < 0 \/ #paramvar365 + #paramvar366 + #paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X2(0, 0) /\ X90($1, 1) => )
constr: [#S_1227] (#paramvar294 > 0 \/ #paramvar291 + #paramvar293 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar289 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X2(0, 0) /\ X91($1, -1) => )
constr: [#S_1228] (#paramvar308 > 0 \/ #paramvar305 + -#paramvar307 < 0 \/ #paramvar302 + -#paramvar304 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + -#paramvar300 < 0 \/ #paramvar295 + -#paramvar297 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X2(0, 0) /\ X96($1, 1) => )
constr: [#S_1229] (#paramvar378 > 0 \/ #paramvar375 + #paramvar377 < 0 \/ #paramvar372 + #paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar370 < 0 \/ #paramvar365 + #paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X2(0, 1) /\ X91(-3, -2) => )
constr: [#S_1230] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -2 < 0 \/ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -2 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -2 < 0 \/ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(0, 1) /\ X91(-2, -2) => )
constr: [#S_1231] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * -2 + #paramvar307 * -2 < 0 \/ #paramvar302 + #paramvar303 * -2 + #paramvar304 * -2 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * -2 + #paramvar300 * -2 < 0 \/ #paramvar295 + #paramvar296 * -2 + #paramvar297 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(0, 1) /\ X92(1, 1) => )
constr: [#S_1232] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 + #paramvar321 < 0 \/ #paramvar316 + #paramvar317 + #paramvar318 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 + #paramvar314 < 0 \/ #paramvar309 + #paramvar310 + #paramvar311 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(0, 1) /\ X93(-1, -1) => )
constr: [#S_1233] (#paramvar336 < 0 \/ #paramvar333 + -#paramvar334 + -#paramvar335 < 0 \/ #paramvar330 + -#paramvar331 + -#paramvar332 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + -#paramvar327 + -#paramvar328 < 0 \/ #paramvar323 + -#paramvar324 + -#paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(0, 1) /\ X94(-1, -1) => )
constr: [#S_1234] (#paramvar350 < 0 \/ #paramvar347 + -#paramvar348 + -#paramvar349 < 0 \/ #paramvar344 + -#paramvar345 + -#paramvar346 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + -#paramvar341 + -#paramvar342 < 0 \/ #paramvar337 + -#paramvar338 + -#paramvar339 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(0, 1) /\ X94(1, 1) => )
constr: [#S_1235] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 + #paramvar349 < 0 \/ #paramvar344 + #paramvar345 + #paramvar346 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 + #paramvar342 < 0 \/ #paramvar337 + #paramvar338 + #paramvar339 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(0, 1) /\ X92($1, 1) => )
constr: [#S_1236] (#paramvar322 > 0 \/ #paramvar319 + #paramvar321 < 0 \/ #paramvar316 + #paramvar318 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar314 < 0 \/ #paramvar309 + #paramvar311 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(0, 1) /\ X93($1, -1) => )
constr: [#S_1237] (#paramvar336 > 0 \/ #paramvar333 + -#paramvar335 < 0 \/ #paramvar330 + -#paramvar332 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + -#paramvar328 < 0 \/ #paramvar323 + -#paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(0, 1) /\ X94($1, 1) => )
constr: [#S_1238] (#paramvar350 > 0 \/ #paramvar347 + #paramvar349 < 0 \/ #paramvar344 + #paramvar346 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar342 < 0 \/ #paramvar337 + #paramvar339 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(1, -2) /\ X90(-1, -1) => )
constr: [#S_1239] (#paramvar294 < 0 \/ #paramvar291 + -#paramvar292 + -#paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + -#paramvar288 + -#paramvar289 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -2 < 0)
gen constr of example:(X2(1, -2) /\ X90(0, -1) => )
constr: [#S_1240] (#paramvar294 > 0 \/ #paramvar291 + -#paramvar293 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + -#paramvar289 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -2 < 0)
gen constr of example:(X2(1, -1) /\ X90(0, 0) => )
constr: [#S_1241] (#paramvar294 < 0 \/ #paramvar291 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(1, -1) /\ X90(1, 0) => )
constr: [#S_1242] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(1, -1) /\ X91(0, 0) => )
constr: [#S_1243] (#paramvar308 < 0 \/ #paramvar305 < 0 \/ #paramvar302 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 < 0 \/ #paramvar295 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(1, -1) /\ X95(0, 0) => )
constr: [#S_1244] (#paramvar364 < 0 \/ #paramvar361 < 0 \/ #paramvar358 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 < 0 \/ #paramvar351 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(1, 0) /\ X91(-1, -1) => )
constr: [#S_1245] (#paramvar308 < 0 \/ #paramvar305 + -#paramvar306 + -#paramvar307 < 0 \/ #paramvar302 + -#paramvar303 + -#paramvar304 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + -#paramvar299 + -#paramvar300 < 0 \/ #paramvar295 + -#paramvar296 + -#paramvar297 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(1, 0) /\ X92(1, 0) => )
constr: [#S_1246] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 < 0 \/ #paramvar316 + #paramvar317 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 < 0 \/ #paramvar309 + #paramvar310 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(1, 0) /\ X96(-1, -1) => )
constr: [#S_1247] (#paramvar378 < 0 \/ #paramvar375 + -#paramvar376 + -#paramvar377 < 0 \/ #paramvar372 + -#paramvar373 + -#paramvar374 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + -#paramvar369 + -#paramvar370 < 0 \/ #paramvar365 + -#paramvar366 + -#paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(1, 0) /\ X96(2, 2) => )
constr: [#S_1248] (#paramvar378 < 0 \/ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 < 0 \/ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 < 0 \/ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(1, 0) /\ X93($1, 0) => )
constr: [#S_1249] (#paramvar336 < 0 \/ #paramvar333 < 0 \/ #paramvar330 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 < 0 \/ #paramvar323 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(1, 1) /\ X90(2, 2) => )
constr: [#S_1250] (#paramvar294 < 0 \/ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(1, 1) /\ X94(1, 0) => )
constr: [#S_1251] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 < 0 \/ #paramvar344 + #paramvar345 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 < 0 \/ #paramvar337 + #paramvar338 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(1, 2) /\ X93(-2, -2) => )
constr: [#S_1252] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * 2 < 0)
gen constr of example:(X2(2, -1) /\ X95(2, 1) => )
constr: [#S_1253] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * 2 + #paramvar363 < 0 \/ #paramvar358 + #paramvar359 * 2 + #paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * 2 + #paramvar356 < 0 \/ #paramvar351 + #paramvar352 * 2 + #paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + -#paramvar229 < 0)
gen constr of example:(X2(2, 0) /\ X90(1, 1) => )
constr: [#S_1254] (#paramvar294 < 0 \/ #paramvar291 + #paramvar292 + #paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + #paramvar288 + #paramvar289 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 < 0 \/ #paramvar245 + #paramvar246 * 2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 < 0 \/ #paramvar236 + #paramvar237 * 2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 < 0 \/ #paramvar227 + #paramvar228 * 2 < 0)
gen constr of example:(X2(-1, -2) /\ X90(-1, -1) => X1(-1, -1))
constr: [#S_1255] (#paramvar294 < 0 \/ #paramvar291 + -#paramvar292 + -#paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + -#paramvar288 + -#paramvar289 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * -2 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + -#paramvar224 + -#paramvar225 >= 0
gen constr of example:(X2(1, 0) /\ X90(1, 1) => X1(1, 1))
constr: [#S_1256] (#paramvar294 < 0 \/ #paramvar291 + #paramvar292 + #paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + #paramvar288 + #paramvar289 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + #paramvar224 + #paramvar225 >= 0
gen constr of example:(X3(-1, -3) /\ X3(-2, -3) => X2(-2, -3))
constr: [#S_1257] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 + #paramvar281 * -3 < 0 \/ #paramvar276 + #paramvar277 * -2 + #paramvar278 * -3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 + #paramvar270 * -3 < 0 \/ #paramvar265 + #paramvar266 * -2 + #paramvar267 * -3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 + #paramvar259 * -3 < 0 \/ #paramvar254 + #paramvar255 * -2 + #paramvar256 * -3 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar280 + #paramvar281 * -3 < 0 \/ #paramvar276 + -#paramvar277 + #paramvar278 * -3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar269 + #paramvar270 * -3 < 0 \/ #paramvar265 + -#paramvar266 + #paramvar267 * -3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar258 + #paramvar259 * -3 < 0 \/ #paramvar254 + -#paramvar255 + #paramvar256 * -3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -2 + #paramvar250 * -3 >= 0 /\ #paramvar245 + #paramvar246 * -2 + #paramvar247 * -3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -2 + #paramvar241 * -3 >= 0 /\ #paramvar236 + #paramvar237 * -2 + #paramvar238 * -3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -2 + #paramvar232 * -3 >= 0 /\ #paramvar227 + #paramvar228 * -2 + #paramvar229 * -3 >= 0
gen constr of example:(X3(-2, 0) => X2(-2, 0))
constr: [#S_1258] (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 < 0 \/ #paramvar276 + #paramvar277 * -2 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 < 0 \/ #paramvar265 + #paramvar266 * -2 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 < 0 \/ #paramvar254 + #paramvar255 * -2 < 0) \/ #paramvar251 <= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -2 >= 0 /\ #paramvar245 + #paramvar246 * -2 >= 0 \/ #paramvar242 <= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -2 >= 0 /\ #paramvar236 + #paramvar237 * -2 >= 0 \/ #paramvar233 <= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -2 >= 0 /\ #paramvar227 + #paramvar228 * -2 >= 0
gen constr of example:(X3(-2, 1) /\ X3(2, 1) => X2(-2, 1))
constr: [#S_1259] (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 + #paramvar281 < 0 \/ #paramvar276 + #paramvar277 * -2 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 + #paramvar270 < 0 \/ #paramvar265 + #paramvar266 * -2 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 + #paramvar259 < 0 \/ #paramvar254 + #paramvar255 * -2 + #paramvar256 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 2 + #paramvar281 < 0 \/ #paramvar276 + #paramvar277 * 2 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 2 + #paramvar270 < 0 \/ #paramvar265 + #paramvar266 * 2 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 2 + #paramvar259 < 0 \/ #paramvar254 + #paramvar255 * 2 + #paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 <= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -2 + #paramvar250 >= 0 /\ #paramvar245 + #paramvar246 * -2 + #paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 <= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -2 + #paramvar241 >= 0 /\ #paramvar236 + #paramvar237 * -2 + #paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 <= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -2 + #paramvar232 >= 0 /\ #paramvar227 + #paramvar228 * -2 + #paramvar229 >= 0
gen constr of example:(X3(-2, 3) => X2(-2, 3))
constr: [#S_1260] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 + #paramvar281 * 3 < 0 \/ #paramvar276 + #paramvar277 * -2 + #paramvar278 * 3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 + #paramvar270 * 3 < 0 \/ #paramvar265 + #paramvar266 * -2 + #paramvar267 * 3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 + #paramvar259 * 3 < 0 \/ #paramvar254 + #paramvar255 * -2 + #paramvar256 * 3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -2 + #paramvar250 * 3 >= 0 /\ #paramvar245 + #paramvar246 * -2 + #paramvar247 * 3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -2 + #paramvar241 * 3 >= 0 /\ #paramvar236 + #paramvar237 * -2 + #paramvar238 * 3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -2 + #paramvar232 * 3 >= 0 /\ #paramvar227 + #paramvar228 * -2 + #paramvar229 * 3 >= 0
gen constr of example:(X3(-1, -2) => X2(-1, -2))
constr: [#S_1261] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar280 + #paramvar281 * -2 < 0 \/ #paramvar276 + -#paramvar277 + #paramvar278 * -2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar269 + #paramvar270 * -2 < 0 \/ #paramvar265 + -#paramvar266 + #paramvar267 * -2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar258 + #paramvar259 * -2 < 0 \/ #paramvar254 + -#paramvar255 + #paramvar256 * -2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + -#paramvar249 + #paramvar250 * -2 >= 0 /\ #paramvar245 + -#paramvar246 + #paramvar247 * -2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + -#paramvar240 + #paramvar241 * -2 >= 0 /\ #paramvar236 + -#paramvar237 + #paramvar238 * -2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + -#paramvar231 + #paramvar232 * -2 >= 0 /\ #paramvar227 + -#paramvar228 + #paramvar229 * -2 >= 0
gen constr of example:(X3(-1, -1) => X2(-1, -1))
constr: [#S_1262] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar280 + -#paramvar281 < 0 \/ #paramvar276 + -#paramvar277 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar269 + -#paramvar270 < 0 \/ #paramvar265 + -#paramvar266 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar258 + -#paramvar259 < 0 \/ #paramvar254 + -#paramvar255 + -#paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 <= 0 /\ #paramvar248 + -#paramvar249 + -#paramvar250 >= 0 /\ #paramvar245 + -#paramvar246 + -#paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 <= 0 /\ #paramvar239 + -#paramvar240 + -#paramvar241 >= 0 /\ #paramvar236 + -#paramvar237 + -#paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 <= 0 /\ #paramvar230 + -#paramvar231 + -#paramvar232 >= 0 /\ #paramvar227 + -#paramvar228 + -#paramvar229 >= 0
gen constr of example:(X3(-1, 1) => X2(-1, 1))
constr: [#S_1263] (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar280 + #paramvar281 < 0 \/ #paramvar276 + -#paramvar277 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar269 + #paramvar270 < 0 \/ #paramvar265 + -#paramvar266 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar258 + #paramvar259 < 0 \/ #paramvar254 + -#paramvar255 + #paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 <= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + -#paramvar249 + #paramvar250 >= 0 /\ #paramvar245 + -#paramvar246 + #paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 <= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + -#paramvar240 + #paramvar241 >= 0 /\ #paramvar236 + -#paramvar237 + #paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 <= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + -#paramvar231 + #paramvar232 >= 0 /\ #paramvar227 + -#paramvar228 + #paramvar229 >= 0
gen constr of example:(X3(-1, 1) /\ X3(0, 1) => X2(-1, 1))
constr: [#S_1264] (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar280 + #paramvar281 < 0 \/ #paramvar276 + -#paramvar277 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar269 + #paramvar270 < 0 \/ #paramvar265 + -#paramvar266 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar258 + #paramvar259 < 0 \/ #paramvar254 + -#paramvar255 + #paramvar256 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 < 0 \/ #paramvar279 + #paramvar281 < 0 \/ #paramvar276 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 < 0 \/ #paramvar268 + #paramvar270 < 0 \/ #paramvar265 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 < 0 \/ #paramvar257 + #paramvar259 < 0 \/ #paramvar254 + #paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 <= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + -#paramvar249 + #paramvar250 >= 0 /\ #paramvar245 + -#paramvar246 + #paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 <= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + -#paramvar240 + #paramvar241 >= 0 /\ #paramvar236 + -#paramvar237 + #paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 <= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + -#paramvar231 + #paramvar232 >= 0 /\ #paramvar227 + -#paramvar228 + #paramvar229 >= 0
gen constr of example:(X3(-3, -3) /\ X3(0, -3) => X2(0, -3))
constr: [#S_1265] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -3 + #paramvar281 * -3 < 0 \/ #paramvar276 + #paramvar277 * -3 + #paramvar278 * -3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -3 + #paramvar270 * -3 < 0 \/ #paramvar265 + #paramvar266 * -3 + #paramvar267 * -3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -3 + #paramvar259 * -3 < 0 \/ #paramvar254 + #paramvar255 * -3 + #paramvar256 * -3 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar281 * -3 < 0 \/ #paramvar276 + #paramvar278 * -3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar270 * -3 < 0 \/ #paramvar265 + #paramvar267 * -3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar259 * -3 < 0 \/ #paramvar254 + #paramvar256 * -3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar250 * -3 >= 0 /\ #paramvar245 + #paramvar247 * -3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar241 * -3 >= 0 /\ #paramvar236 + #paramvar238 * -3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar232 * -3 >= 0 /\ #paramvar227 + #paramvar229 * -3 >= 0
gen constr of example:(X3(0, -1) => X2(0, -1))
constr: [#S_1266] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar281 < 0 \/ #paramvar276 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar270 < 0 \/ #paramvar265 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar259 < 0 \/ #paramvar254 + -#paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 <= 0 /\ #paramvar248 + -#paramvar250 >= 0 /\ #paramvar245 + -#paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 <= 0 /\ #paramvar239 + -#paramvar241 >= 0 /\ #paramvar236 + -#paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 <= 0 /\ #paramvar230 + -#paramvar232 >= 0 /\ #paramvar227 + -#paramvar229 >= 0
gen constr of example:(X3(0, 0) => X2(0, 0))
constr: [#S_1267] (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 < 0 \/ #paramvar276 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 < 0 \/ #paramvar265 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 < 0 \/ #paramvar254 < 0) \/ #paramvar251 <= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 >= 0 /\ #paramvar245 >= 0 \/ #paramvar242 <= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 >= 0 /\ #paramvar236 >= 0 \/ #paramvar233 <= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 >= 0 /\ #paramvar227 >= 0
gen constr of example:(X3(1, -3) => X2(1, -3))
constr: [#S_1268] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + #paramvar281 * -3 < 0 \/ #paramvar276 + #paramvar277 + #paramvar278 * -3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + #paramvar270 * -3 < 0 \/ #paramvar265 + #paramvar266 + #paramvar267 * -3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + #paramvar259 * -3 < 0 \/ #paramvar254 + #paramvar255 + #paramvar256 * -3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 + #paramvar250 * -3 >= 0 /\ #paramvar245 + #paramvar246 + #paramvar247 * -3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 + #paramvar241 * -3 >= 0 /\ #paramvar236 + #paramvar237 + #paramvar238 * -3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 + #paramvar232 * -3 >= 0 /\ #paramvar227 + #paramvar228 + #paramvar229 * -3 >= 0
gen constr of example:(X3(1, -2) => X2(1, -2))
constr: [#S_1269] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + #paramvar281 * -2 < 0 \/ #paramvar276 + #paramvar277 + #paramvar278 * -2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + #paramvar270 * -2 < 0 \/ #paramvar265 + #paramvar266 + #paramvar267 * -2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + #paramvar259 * -2 < 0 \/ #paramvar254 + #paramvar255 + #paramvar256 * -2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 + #paramvar250 * -2 >= 0 /\ #paramvar245 + #paramvar246 + #paramvar247 * -2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 + #paramvar241 * -2 >= 0 /\ #paramvar236 + #paramvar237 + #paramvar238 * -2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 + #paramvar232 * -2 >= 0 /\ #paramvar227 + #paramvar228 + #paramvar229 * -2 >= 0
gen constr of example:(X3(0, -1) /\ X3(1, -1) => X2(1, -1))
constr: [#S_1270] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar281 < 0 \/ #paramvar276 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar270 < 0 \/ #paramvar265 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar259 < 0 \/ #paramvar254 + -#paramvar256 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + -#paramvar281 < 0 \/ #paramvar276 + #paramvar277 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + -#paramvar270 < 0 \/ #paramvar265 + #paramvar266 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + -#paramvar259 < 0 \/ #paramvar254 + #paramvar255 + -#paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 <= 0 /\ #paramvar248 + #paramvar249 + -#paramvar250 >= 0 /\ #paramvar245 + #paramvar246 + -#paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 <= 0 /\ #paramvar239 + #paramvar240 + -#paramvar241 >= 0 /\ #paramvar236 + #paramvar237 + -#paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 <= 0 /\ #paramvar230 + #paramvar231 + -#paramvar232 >= 0 /\ #paramvar227 + #paramvar228 + -#paramvar229 >= 0
gen constr of example:(X3(1, 0) => X2(1, 0))
constr: [#S_1271] (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 < 0 \/ #paramvar276 + #paramvar277 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 < 0 \/ #paramvar265 + #paramvar266 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 < 0 \/ #paramvar254 + #paramvar255 < 0) \/ #paramvar251 <= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 >= 0 /\ #paramvar245 + #paramvar246 >= 0 \/ #paramvar242 <= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 >= 0 /\ #paramvar236 + #paramvar237 >= 0 \/ #paramvar233 <= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 >= 0 /\ #paramvar227 + #paramvar228 >= 0
gen constr of example:(X3(0, 1) /\ X3(1, 1) => X2(1, 1))
constr: [#S_1272] (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + #paramvar281 < 0 \/ #paramvar276 + #paramvar277 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + #paramvar270 < 0 \/ #paramvar265 + #paramvar266 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + #paramvar259 < 0 \/ #paramvar254 + #paramvar255 + #paramvar256 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 < 0 \/ #paramvar279 + #paramvar281 < 0 \/ #paramvar276 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 < 0 \/ #paramvar268 + #paramvar270 < 0 \/ #paramvar265 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 < 0 \/ #paramvar257 + #paramvar259 < 0 \/ #paramvar254 + #paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 <= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 + #paramvar250 >= 0 /\ #paramvar245 + #paramvar246 + #paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 <= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 + #paramvar241 >= 0 /\ #paramvar236 + #paramvar237 + #paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 <= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 + #paramvar232 >= 0 /\ #paramvar227 + #paramvar228 + #paramvar229 >= 0
gen constr of example:(X3(1, 2) => X2(1, 2))
constr: [#S_1273] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 < 0 \/ #paramvar279 + #paramvar280 + #paramvar281 * 2 < 0 \/ #paramvar276 + #paramvar277 + #paramvar278 * 2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 < 0 \/ #paramvar268 + #paramvar269 + #paramvar270 * 2 < 0 \/ #paramvar265 + #paramvar266 + #paramvar267 * 2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 < 0 \/ #paramvar257 + #paramvar258 + #paramvar259 * 2 < 0 \/ #paramvar254 + #paramvar255 + #paramvar256 * 2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 + #paramvar250 * 2 >= 0 /\ #paramvar245 + #paramvar246 + #paramvar247 * 2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 + #paramvar241 * 2 >= 0 /\ #paramvar236 + #paramvar237 + #paramvar238 * 2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 + #paramvar232 * 2 >= 0 /\ #paramvar227 + #paramvar228 + #paramvar229 * 2 >= 0
gen constr of example:(X3(1, -1) /\ X3(3, -1) => X2(3, -1))
constr: [#S_1274] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + -#paramvar281 < 0 \/ #paramvar276 + #paramvar277 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + -#paramvar270 < 0 \/ #paramvar265 + #paramvar266 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + -#paramvar259 < 0 \/ #paramvar254 + #paramvar255 + -#paramvar256 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 3 + -#paramvar281 < 0 \/ #paramvar276 + #paramvar277 * 3 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 3 + -#paramvar270 < 0 \/ #paramvar265 + #paramvar266 * 3 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 3 + -#paramvar259 < 0 \/ #paramvar254 + #paramvar255 * 3 + -#paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 <= 0 /\ #paramvar248 + #paramvar249 * 3 + -#paramvar250 >= 0 /\ #paramvar245 + #paramvar246 * 3 + -#paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 <= 0 /\ #paramvar239 + #paramvar240 * 3 + -#paramvar241 >= 0 /\ #paramvar236 + #paramvar237 * 3 + -#paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 <= 0 /\ #paramvar230 + #paramvar231 * 3 + -#paramvar232 >= 0 /\ #paramvar227 + #paramvar228 * 3 + -#paramvar229 >= 0
gen constr of example:(X3(1, 3) /\ X3(3, 3) => X2(3, 3))
constr: [#S_1275] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + #paramvar281 * 3 < 0 \/ #paramvar276 + #paramvar277 + #paramvar278 * 3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + #paramvar270 * 3 < 0 \/ #paramvar265 + #paramvar266 + #paramvar267 * 3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + #paramvar259 * 3 < 0 \/ #paramvar254 + #paramvar255 + #paramvar256 * 3 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 3 + #paramvar281 * 3 < 0 \/ #paramvar276 + #paramvar277 * 3 + #paramvar278 * 3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 3 + #paramvar270 * 3 < 0 \/ #paramvar265 + #paramvar266 * 3 + #paramvar267 * 3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 3 + #paramvar259 * 3 < 0 \/ #paramvar254 + #paramvar255 * 3 + #paramvar256 * 3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 3 + #paramvar250 * 3 >= 0 /\ #paramvar245 + #paramvar246 * 3 + #paramvar247 * 3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 3 + #paramvar241 * 3 >= 0 /\ #paramvar236 + #paramvar237 * 3 + #paramvar238 * 3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 3 + #paramvar232 * 3 >= 0 /\ #paramvar227 + #paramvar228 * 3 + #paramvar229 * 3 >= 0
gen constr of example:(X91(-3, 1) => X3(-3, -2))
constr: [#S_1276] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * -3 + #paramvar307 < 0 \/ #paramvar302 + #paramvar303 * -3 + #paramvar304 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * -3 + #paramvar300 < 0 \/ #paramvar295 + #paramvar296 * -3 + #paramvar297 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 * -2 >= 0
gen constr of example:(X90(-3, 0) => X3(-3, -1))
constr: [#S_1277] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 * -3 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -3 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -3 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -3 + -#paramvar256 >= 0
gen constr of example:(X95(-3, -4) => X3(-3, -1))
constr: [#S_1278] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -4 < 0 \/ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -4 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -4 < 0 \/ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -4 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -3 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -3 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -3 + -#paramvar256 >= 0
gen constr of example:(X95(-3, 0) => X3(-3, -1))
constr: [#S_1279] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * -3 < 0 \/ #paramvar358 + #paramvar359 * -3 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * -3 < 0 \/ #paramvar351 + #paramvar352 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -3 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -3 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -3 + -#paramvar256 >= 0
gen constr of example:(X93(-3, -1) => X3(-3, 1))
constr: [#S_1280] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * -3 + -#paramvar335 < 0 \/ #paramvar330 + #paramvar331 * -3 + -#paramvar332 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * -3 + -#paramvar328 < 0 \/ #paramvar323 + #paramvar324 * -3 + -#paramvar325 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 >= 0
gen constr of example:(X94(-3, $1) => X3(-3, 1))
constr: [#S_1281] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 * -3 < 0 \/ #paramvar344 + #paramvar345 * -3 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 * -3 < 0 \/ #paramvar337 + #paramvar338 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 >= 0
gen constr of example:(X90(-2, -3) => X3(-2, -4))
constr: [#S_1282] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 * -2 + #paramvar293 * -3 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 * -2 + #paramvar289 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * -4 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * -4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * -4 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * -4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * -4 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * -4 >= 0
gen constr of example:(X90(-2, 0) => X3(-2, -1))
constr: [#S_1283] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 * -2 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + -#paramvar256 >= 0
gen constr of example:(X91(-2, 0) => X3(-2, -1))
constr: [#S_1284] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * -2 < 0 \/ #paramvar302 + #paramvar303 * -2 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * -2 < 0 \/ #paramvar295 + #paramvar296 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + -#paramvar256 >= 0
gen constr of example:(X95(-2, -2) => X3(-2, -1))
constr: [#S_1285] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 * -2 + #paramvar363 * -2 < 0 \/ #paramvar358 + #paramvar359 * -2 + #paramvar360 * -2 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 * -2 + #paramvar356 * -2 < 0 \/ #paramvar351 + #paramvar352 * -2 + #paramvar353 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + -#paramvar256 >= 0
gen constr of example:(X95(-2, 0) => X3(-2, -1))
constr: [#S_1286] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * -2 < 0 \/ #paramvar358 + #paramvar359 * -2 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * -2 < 0 \/ #paramvar351 + #paramvar352 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + -#paramvar256 >= 0
gen constr of example:(X92(-2, 0) => X3(-2, 0))
constr: [#S_1287] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -2 < 0 \/ #paramvar316 + #paramvar317 * -2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -2 < 0 \/ #paramvar309 + #paramvar310 * -2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -2 >= 0
gen constr of example:(X93(-2, 0) => X3(-2, 0))
constr: [#S_1288] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * -2 < 0 \/ #paramvar330 + #paramvar331 * -2 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * -2 < 0 \/ #paramvar323 + #paramvar324 * -2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -2 >= 0
gen constr of example:(X96(-2, -3) => X3(-2, 0))
constr: [#S_1289] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * -2 + #paramvar377 * -3 < 0 \/ #paramvar372 + #paramvar373 * -2 + #paramvar374 * -3 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * -2 + #paramvar370 * -3 < 0 \/ #paramvar365 + #paramvar366 * -2 + #paramvar367 * -3 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -2 >= 0
gen constr of example:(X96(-2, -2) => X3(-2, 0))
constr: [#S_1290] (#paramvar378 < 0 \/ #paramvar375 + #paramvar376 * -2 + #paramvar377 * -2 < 0 \/ #paramvar372 + #paramvar373 * -2 + #paramvar374 * -2 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + #paramvar369 * -2 + #paramvar370 * -2 < 0 \/ #paramvar365 + #paramvar366 * -2 + #paramvar367 * -2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -2 >= 0
gen constr of example:(X91(-2, -2) => X3(-2, 1))
constr: [#S_1291] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * -2 + #paramvar307 * -2 < 0 \/ #paramvar302 + #paramvar303 * -2 + #paramvar304 * -2 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * -2 + #paramvar300 * -2 < 0 \/ #paramvar295 + #paramvar296 * -2 + #paramvar297 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 >= 0
gen constr of example:(X93(-2, -1) => X3(-2, 1))
constr: [#S_1292] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * -2 + -#paramvar335 < 0 \/ #paramvar330 + #paramvar331 * -2 + -#paramvar332 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * -2 + -#paramvar328 < 0 \/ #paramvar323 + #paramvar324 * -2 + -#paramvar325 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 >= 0
gen constr of example:(X90(-1, -1) => X3(-1, -2))
constr: [#S_1293] (#paramvar294 < 0 \/ #paramvar291 + -#paramvar292 + -#paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + -#paramvar288 + -#paramvar289 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 * -2 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 * -2 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 * -2 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 * -2 >= 0
gen constr of example:(X92(-1, -1) => X3(-1, -1))
constr: [#S_1294] (#paramvar322 < 0 \/ #paramvar319 + -#paramvar320 + -#paramvar321 < 0 \/ #paramvar316 + -#paramvar317 + -#paramvar318 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + -#paramvar313 + -#paramvar314 < 0 \/ #paramvar309 + -#paramvar310 + -#paramvar311 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + -#paramvar281 >= 0 /\ #paramvar276 + -#paramvar277 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + -#paramvar270 >= 0 /\ #paramvar265 + -#paramvar266 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + -#paramvar259 >= 0 /\ #paramvar254 + -#paramvar255 + -#paramvar256 >= 0
gen constr of example:(X95(-1, -1) => X3(-1, -1))
constr: [#S_1295] (#paramvar364 < 0 \/ #paramvar361 + -#paramvar362 + -#paramvar363 < 0 \/ #paramvar358 + -#paramvar359 + -#paramvar360 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + -#paramvar355 + -#paramvar356 < 0 \/ #paramvar351 + -#paramvar352 + -#paramvar353 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + -#paramvar281 >= 0 /\ #paramvar276 + -#paramvar277 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + -#paramvar270 >= 0 /\ #paramvar265 + -#paramvar266 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + -#paramvar259 >= 0 /\ #paramvar254 + -#paramvar255 + -#paramvar256 >= 0
gen constr of example:(X90(-1, 1) => X3(-1, 0))
constr: [#S_1296] (#paramvar294 > 0 \/ #paramvar291 + -#paramvar292 + #paramvar293 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + -#paramvar288 + #paramvar289 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X92(-1, 0) => X3(-1, 0))
constr: [#S_1297] (#paramvar322 > 0 \/ #paramvar319 + -#paramvar320 < 0 \/ #paramvar316 + -#paramvar317 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + -#paramvar313 < 0 \/ #paramvar309 + -#paramvar310 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X93(-1, 0) => X3(-1, 0))
constr: [#S_1298] (#paramvar336 > 0 \/ #paramvar333 + -#paramvar334 < 0 \/ #paramvar330 + -#paramvar331 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + -#paramvar327 < 0 \/ #paramvar323 + -#paramvar324 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X96(-1, -1) => X3(-1, 0))
constr: [#S_1299] (#paramvar378 < 0 \/ #paramvar375 + -#paramvar376 + -#paramvar377 < 0 \/ #paramvar372 + -#paramvar373 + -#paramvar374 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + -#paramvar369 + -#paramvar370 < 0 \/ #paramvar365 + -#paramvar366 + -#paramvar367 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X96(-1, 0) => X3(-1, 0))
constr: [#S_1300] (#paramvar378 > 0 \/ #paramvar375 + -#paramvar376 < 0 \/ #paramvar372 + -#paramvar373 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + -#paramvar369 < 0 \/ #paramvar365 + -#paramvar366 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X93(-1, -1) => X3(-1, 1))
constr: [#S_1301] (#paramvar336 < 0 \/ #paramvar333 + -#paramvar334 + -#paramvar335 < 0 \/ #paramvar330 + -#paramvar331 + -#paramvar332 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + -#paramvar327 + -#paramvar328 < 0 \/ #paramvar323 + -#paramvar324 + -#paramvar325 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 >= 0
gen constr of example:(X94(-1, -2) => X3(-1, 1))
constr: [#S_1302] (#paramvar350 > 0 \/ #paramvar347 + -#paramvar348 + #paramvar349 * -2 < 0 \/ #paramvar344 + -#paramvar345 + #paramvar346 * -2 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + -#paramvar341 + #paramvar342 * -2 < 0 \/ #paramvar337 + -#paramvar338 + #paramvar339 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 >= 0
gen constr of example:(X94(-1, -1) => X3(-1, 1))
constr: [#S_1303] (#paramvar350 < 0 \/ #paramvar347 + -#paramvar348 + -#paramvar349 < 0 \/ #paramvar344 + -#paramvar345 + -#paramvar346 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + -#paramvar341 + -#paramvar342 < 0 \/ #paramvar337 + -#paramvar338 + -#paramvar339 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 >= 0
gen constr of example:(X90(0, 0) => X3(0, -1))
constr: [#S_1304] (#paramvar294 < 0 \/ #paramvar291 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar281 >= 0 /\ #paramvar276 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar270 >= 0 /\ #paramvar265 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar259 >= 0 /\ #paramvar254 + -#paramvar256 >= 0
gen constr of example:(X91(0, 0) => X3(0, -1))
constr: [#S_1305] (#paramvar308 < 0 \/ #paramvar305 < 0 \/ #paramvar302 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 < 0 \/ #paramvar295 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar281 >= 0 /\ #paramvar276 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar270 >= 0 /\ #paramvar265 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar259 >= 0 /\ #paramvar254 + -#paramvar256 >= 0
gen constr of example:(X93(0, 1) => X3(0, -1))
constr: [#S_1306] (#paramvar336 > 0 \/ #paramvar333 + #paramvar335 < 0 \/ #paramvar330 + #paramvar332 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar328 < 0 \/ #paramvar323 + #paramvar325 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar281 >= 0 /\ #paramvar276 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar270 >= 0 /\ #paramvar265 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar259 >= 0 /\ #paramvar254 + -#paramvar256 >= 0
gen constr of example:(X95(0, -1) => X3(0, -1))
constr: [#S_1307] (#paramvar364 > 0 \/ #paramvar361 + -#paramvar363 < 0 \/ #paramvar358 + -#paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + -#paramvar356 < 0 \/ #paramvar351 + -#paramvar353 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar281 >= 0 /\ #paramvar276 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar270 >= 0 /\ #paramvar265 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar259 >= 0 /\ #paramvar254 + -#paramvar256 >= 0
gen constr of example:(X95(0, 1) => X3(0, -1))
constr: [#S_1308] (#paramvar364 > 0 \/ #paramvar361 + #paramvar363 < 0 \/ #paramvar358 + #paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar356 < 0 \/ #paramvar351 + #paramvar353 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar281 >= 0 /\ #paramvar276 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar270 >= 0 /\ #paramvar265 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar259 >= 0 /\ #paramvar254 + -#paramvar256 >= 0
gen constr of example:(X95(0, $1) => X3(0, -1))
constr: [#S_1309] (#paramvar364 < 0 \/ #paramvar361 < 0 \/ #paramvar358 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 < 0 \/ #paramvar351 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar281 >= 0 /\ #paramvar276 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar270 >= 0 /\ #paramvar265 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar259 >= 0 /\ #paramvar254 + -#paramvar256 >= 0
gen constr of example:(X92(0, 0) => X3(0, 0))
constr: [#S_1310] (#paramvar322 < 0 \/ #paramvar319 < 0 \/ #paramvar316 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 < 0 \/ #paramvar309 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 >= 0 /\ #paramvar276 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 >= 0 /\ #paramvar265 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 >= 0 /\ #paramvar254 >= 0
gen constr of example:(X93(0, 0) => X3(0, 0))
constr: [#S_1311] (#paramvar336 < 0 \/ #paramvar333 < 0 \/ #paramvar330 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 < 0 \/ #paramvar323 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 >= 0 /\ #paramvar276 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 >= 0 /\ #paramvar265 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 >= 0 /\ #paramvar254 >= 0
gen constr of example:(X96(0, 0) => X3(0, 0))
constr: [#S_1312] (#paramvar378 < 0 \/ #paramvar375 < 0 \/ #paramvar372 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 < 0 \/ #paramvar365 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 >= 0 /\ #paramvar276 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 >= 0 /\ #paramvar265 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 >= 0 /\ #paramvar254 >= 0
gen constr of example:(X96(0, 1) => X3(0, 0))
constr: [#S_1313] (#paramvar378 > 0 \/ #paramvar375 + #paramvar377 < 0 \/ #paramvar372 + #paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar370 < 0 \/ #paramvar365 + #paramvar367 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 >= 0 /\ #paramvar276 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 >= 0 /\ #paramvar265 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 >= 0 /\ #paramvar254 >= 0
gen constr of example:(X91(0, -2) => X3(0, 1))
constr: [#S_1314] (#paramvar308 > 0 \/ #paramvar305 + #paramvar307 * -2 < 0 \/ #paramvar302 + #paramvar304 * -2 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar300 * -2 < 0 \/ #paramvar295 + #paramvar297 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar256 >= 0
gen constr of example:(X94(0, -1) => X3(0, 1))
constr: [#S_1315] (#paramvar350 > 0 \/ #paramvar347 + -#paramvar349 < 0 \/ #paramvar344 + -#paramvar346 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + -#paramvar342 < 0 \/ #paramvar337 + -#paramvar339 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar256 >= 0
gen constr of example:(X94(0, 0) => X3(0, 1))
constr: [#S_1316] (#paramvar350 < 0 \/ #paramvar347 < 0 \/ #paramvar344 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 < 0 \/ #paramvar337 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar256 >= 0
gen constr of example:(X94(0, 1) => X3(0, 1))
constr: [#S_1317] (#paramvar350 > 0 \/ #paramvar347 + #paramvar349 < 0 \/ #paramvar344 + #paramvar346 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar342 < 0 \/ #paramvar337 + #paramvar339 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar256 >= 0
gen constr of example:(X90(0, 3) => X3(0, 2))
constr: [#S_1318] (#paramvar294 > 0 \/ #paramvar291 + #paramvar293 * 3 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar289 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar256 * 2 >= 0
gen constr of example:(X91(1, 1) => X3(1, -2))
constr: [#S_1319] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 + #paramvar307 < 0 \/ #paramvar302 + #paramvar303 + #paramvar304 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 + #paramvar300 < 0 \/ #paramvar295 + #paramvar296 + #paramvar297 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 * -2 >= 0
gen constr of example:(X90(1, 0) => X3(1, -1))
constr: [#S_1320] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 + -#paramvar256 >= 0
gen constr of example:(X93(1, 1) => X3(1, -1))
constr: [#S_1321] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 + #paramvar335 < 0 \/ #paramvar330 + #paramvar331 + #paramvar332 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 + #paramvar328 < 0 \/ #paramvar323 + #paramvar324 + #paramvar325 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 + -#paramvar256 >= 0
gen constr of example:(X95(1, 0) => X3(1, -1))
constr: [#S_1322] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 < 0 \/ #paramvar358 + #paramvar359 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 < 0 \/ #paramvar351 + #paramvar352 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 + -#paramvar256 >= 0
gen constr of example:(X95(1, 1) => X3(1, -1))
constr: [#S_1323] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 + #paramvar363 < 0 \/ #paramvar358 + #paramvar359 + #paramvar360 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 + #paramvar356 < 0 \/ #paramvar351 + #paramvar352 + #paramvar353 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 + -#paramvar256 >= 0
gen constr of example:(X90(1, 1) => X3(1, 0))
constr: [#S_1324] (#paramvar294 < 0 \/ #paramvar291 + #paramvar292 + #paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + #paramvar288 + #paramvar289 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 >= 0 /\ #paramvar276 + #paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 >= 0 /\ #paramvar265 + #paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 >= 0 /\ #paramvar254 + #paramvar255 >= 0
gen constr of example:(X96(1, 0) => X3(1, 0))
constr: [#S_1325] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 < 0 \/ #paramvar372 + #paramvar373 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 < 0 \/ #paramvar365 + #paramvar366 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 >= 0 /\ #paramvar276 + #paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 >= 0 /\ #paramvar265 + #paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 >= 0 /\ #paramvar254 + #paramvar255 >= 0
gen constr of example:(X96(1, 1) => X3(1, 0))
constr: [#S_1326] (#paramvar378 < 0 \/ #paramvar375 + #paramvar376 + #paramvar377 < 0 \/ #paramvar372 + #paramvar373 + #paramvar374 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + #paramvar369 + #paramvar370 < 0 \/ #paramvar365 + #paramvar366 + #paramvar367 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 >= 0 /\ #paramvar276 + #paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 >= 0 /\ #paramvar265 + #paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 >= 0 /\ #paramvar254 + #paramvar255 >= 0
gen constr of example:(X92(1, 1) => X3(1, 1))
constr: [#S_1327] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 + #paramvar321 < 0 \/ #paramvar316 + #paramvar317 + #paramvar318 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 + #paramvar314 < 0 \/ #paramvar309 + #paramvar310 + #paramvar311 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 >= 0
gen constr of example:(X94(1, 1) => X3(1, 1))
constr: [#S_1328] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 + #paramvar349 < 0 \/ #paramvar344 + #paramvar345 + #paramvar346 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 + #paramvar342 < 0 \/ #paramvar337 + #paramvar338 + #paramvar339 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 >= 0
gen constr of example:(X94(1, 2) => X3(1, 1))
constr: [#S_1329] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 + #paramvar349 * 2 < 0 \/ #paramvar344 + #paramvar345 + #paramvar346 * 2 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 + #paramvar342 * 2 < 0 \/ #paramvar337 + #paramvar338 + #paramvar339 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 >= 0
gen constr of example:(X92(1, 2) => X3(1, 2))
constr: [#S_1330] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 + #paramvar318 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 + #paramvar311 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 * 2 >= 0
gen constr of example:(X92(2, 0) => X3(2, 0))
constr: [#S_1331] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * 2 < 0 \/ #paramvar316 + #paramvar317 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * 2 < 0 \/ #paramvar309 + #paramvar310 * 2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 >= 0 /\ #paramvar276 + #paramvar277 * 2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 >= 0 /\ #paramvar265 + #paramvar266 * 2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 >= 0 /\ #paramvar254 + #paramvar255 * 2 >= 0
gen constr of example:(X93(2, 0) => X3(2, 0))
constr: [#S_1332] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * 2 < 0 \/ #paramvar330 + #paramvar331 * 2 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * 2 < 0 \/ #paramvar323 + #paramvar324 * 2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 >= 0 /\ #paramvar276 + #paramvar277 * 2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 >= 0 /\ #paramvar265 + #paramvar266 * 2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 >= 0 /\ #paramvar254 + #paramvar255 * 2 >= 0
gen constr of example:(X96(2, 2) => X3(2, 0))
constr: [#S_1333] (#paramvar378 < 0 \/ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 < 0 \/ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 < 0 \/ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 >= 0 /\ #paramvar276 + #paramvar277 * 2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 >= 0 /\ #paramvar265 + #paramvar266 * 2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 >= 0 /\ #paramvar254 + #paramvar255 * 2 >= 0
gen constr of example:(X90(2, 2) => X3(2, 1))
constr: [#S_1334] (#paramvar294 < 0 \/ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 >= 0
gen constr of example:(X90(3, -1) => X3(3, -2))
constr: [#S_1335] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 * 3 + -#paramvar293 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 * 3 + -#paramvar289 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 * -2 >= 0
gen constr of example:(X91(3, 0) => X3(3, -1))
constr: [#S_1336] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * 3 < 0 \/ #paramvar302 + #paramvar303 * 3 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * 3 < 0 \/ #paramvar295 + #paramvar296 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 3 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 3 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 3 + -#paramvar256 >= 0
gen constr of example:(X95(3, 0) => X3(3, -1))
constr: [#S_1337] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * 3 < 0 \/ #paramvar358 + #paramvar359 * 3 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * 3 < 0 \/ #paramvar351 + #paramvar352 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 3 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 3 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 3 + -#paramvar256 >= 0
gen constr of example:(X91(4, 1) => X3(4, -2))
constr: [#S_1338] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * 4 + #paramvar307 < 0 \/ #paramvar302 + #paramvar303 * 4 + #paramvar304 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * 4 + #paramvar300 < 0 \/ #paramvar295 + #paramvar296 * 4 + #paramvar297 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 4 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * 4 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 4 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * 4 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 4 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * 4 + #paramvar256 * -2 >= 0
gen constr of example:(X3($1, 1) /\ X3($2, 1) => X2($1, 1))
constr: [#S_1339] (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 < 0 \/ #paramvar279 + #paramvar281 < 0 \/ #paramvar276 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 < 0 \/ #paramvar268 + #paramvar270 < 0 \/ #paramvar265 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 < 0 \/ #paramvar257 + #paramvar259 < 0 \/ #paramvar254 + #paramvar256 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 < 0 \/ #paramvar279 + #paramvar281 < 0 \/ #paramvar276 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 < 0 \/ #paramvar268 + #paramvar270 < 0 \/ #paramvar265 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 < 0 \/ #paramvar257 + #paramvar259 < 0 \/ #paramvar254 + #paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 <= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar250 >= 0 /\ #paramvar245 + #paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 <= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar241 >= 0 /\ #paramvar236 + #paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 <= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar232 >= 0 /\ #paramvar227 + #paramvar229 >= 0
gen constr of example:( => X3(-2, -1) \/ X3(-2, 3) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_1340] #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -2 + #paramvar307 * -2 >= 0 /\ #paramvar302 + #paramvar303 * -2 + #paramvar304 * -2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -2 + #paramvar300 * -2 >= 0 /\ #paramvar295 + #paramvar296 * -2 + #paramvar297 * -2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 >= 0 /\ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 >= 0 /\ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 >= 0 /\ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 >= 0 /\ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 >= 0 /\ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 >= 0 /\ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -2 + #paramvar363 * -2 >= 0 /\ #paramvar358 + #paramvar359 * -2 + #paramvar360 * -2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -2 + #paramvar356 * -2 >= 0 /\ #paramvar351 + #paramvar352 * -2 + #paramvar353 * -2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -2 + #paramvar377 * -2 >= 0 /\ #paramvar372 + #paramvar373 * -2 + #paramvar374 * -2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -2 + #paramvar370 * -2 >= 0 /\ #paramvar365 + #paramvar366 * -2 + #paramvar367 * -2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -2 + #paramvar293 * -2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -2 + #paramvar289 * -2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * 3 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * 3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * 3 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * 3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * 3 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * 3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + -#paramvar256 >= 0
gen constr of example:(X2(-1, 3) => X3(-2, -1) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_1341] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * 3 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * 3 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * 3 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -2 + #paramvar307 * -2 >= 0 /\ #paramvar302 + #paramvar303 * -2 + #paramvar304 * -2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -2 + #paramvar300 * -2 >= 0 /\ #paramvar295 + #paramvar296 * -2 + #paramvar297 * -2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 >= 0 /\ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 >= 0 /\ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 >= 0 /\ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 >= 0 /\ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 >= 0 /\ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 >= 0 /\ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -2 + #paramvar363 * -2 >= 0 /\ #paramvar358 + #paramvar359 * -2 + #paramvar360 * -2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -2 + #paramvar356 * -2 >= 0 /\ #paramvar351 + #paramvar352 * -2 + #paramvar353 * -2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -2 + #paramvar377 * -2 >= 0 /\ #paramvar372 + #paramvar373 * -2 + #paramvar374 * -2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -2 + #paramvar370 * -2 >= 0 /\ #paramvar365 + #paramvar366 * -2 + #paramvar367 * -2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -2 + #paramvar293 * -2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -2 + #paramvar289 * -2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + -#paramvar256 >= 0
gen constr of example:(X2(0, -1) => X3(-2, 3) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_1342] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -2 + #paramvar307 * -2 >= 0 /\ #paramvar302 + #paramvar303 * -2 + #paramvar304 * -2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -2 + #paramvar300 * -2 >= 0 /\ #paramvar295 + #paramvar296 * -2 + #paramvar297 * -2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 >= 0 /\ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 >= 0 /\ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 >= 0 /\ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 >= 0 /\ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 >= 0 /\ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 >= 0 /\ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -2 + #paramvar363 * -2 >= 0 /\ #paramvar358 + #paramvar359 * -2 + #paramvar360 * -2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -2 + #paramvar356 * -2 >= 0 /\ #paramvar351 + #paramvar352 * -2 + #paramvar353 * -2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -2 + #paramvar377 * -2 >= 0 /\ #paramvar372 + #paramvar373 * -2 + #paramvar374 * -2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -2 + #paramvar370 * -2 >= 0 /\ #paramvar365 + #paramvar366 * -2 + #paramvar367 * -2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -2 + #paramvar293 * -2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -2 + #paramvar289 * -2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * 3 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * 3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * 3 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * 3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * 3 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * 3 >= 0
gen constr of example:( => X3(0, 1) \/ X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0))
constr: [#S_1343] #paramvar308 >= 0 /\ #paramvar305 >= 0 /\ #paramvar302 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 >= 0 /\ #paramvar295 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 >= 0 /\ #paramvar316 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 >= 0 /\ #paramvar309 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 >= 0 /\ #paramvar330 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 >= 0 /\ #paramvar323 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 >= 0 /\ #paramvar344 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 >= 0 /\ #paramvar337 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 >= 0 /\ #paramvar358 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 >= 0 /\ #paramvar351 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 >= 0 /\ #paramvar372 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 >= 0 /\ #paramvar365 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar256 >= 0
gen constr of example:( => X3(1, 0) \/ X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_1344] #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 * 2 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 >= 0 /\ #paramvar276 + #paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 >= 0 /\ #paramvar265 + #paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 >= 0 /\ #paramvar254 + #paramvar255 >= 0
gen constr of example:(X2(0, 0) => X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_1345] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 * 2 >= 0
gen constr of example:( => X3(2, -1) \/ X3(2, 3) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_1346] #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 * 3 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 * 3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 * 3 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 * 3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 * 3 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 * 3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + -#paramvar256 >= 0
gen constr of example:(X2(0, -1) => X3(2, 3) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_1347] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 * 3 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 * 3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 * 3 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 * 3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 * 3 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 * 3 >= 0
gen constr of example:(X2(-1, 1) /\ X2(1, 1) => X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0))
constr: [#S_1348] (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 >= 0 /\ #paramvar302 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 >= 0 /\ #paramvar295 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 >= 0 /\ #paramvar316 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 >= 0 /\ #paramvar309 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 >= 0 /\ #paramvar330 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 >= 0 /\ #paramvar323 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 >= 0 /\ #paramvar344 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 >= 0 /\ #paramvar337 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 >= 0 /\ #paramvar358 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 >= 0 /\ #paramvar351 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 >= 0 /\ #paramvar372 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 >= 0 /\ #paramvar365 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 >= 0
bounds constr: [#S_1349] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1350] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1351] true
bounds constr: [#S_1352] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1353] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1354] true
bounds constr: [#S_1355] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1356] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1357] true
bounds constr: [#S_1358] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1359] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1360] true
bounds constr: [#S_1361] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1362] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1363] true
bounds constr: [#S_1364] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1365] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1366] true
bounds constr: [#S_1367] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1368] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1369] true
bounds constr: [#S_1370] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1371] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1372] true
bounds constr: [#S_1373] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1374] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1375] true
bounds constr: [#S_1376] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1377] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1378] true
constraints generated
sat
************** current phase of 24th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  true
X3(x1: int, x2: int) :=
  2 + x2 >= 0 /\ 2 + -x1 >= 0 \/ 2 + 2 * x2 >= 0 \/ 2 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x2 >= 0 /\ x1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x2 >= 0 /\ x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  false
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 + -x2 >= 0 /\ x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 >= 0 /\ 1 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 0) /\ X96(0, 0) => X1(-1, 0));
(X2(-3, -2) /\ X92(-2, -2) => X1(-3, -2));
(X2(0, -3) /\ X91(2, 2) => X1(0, 2));
(X2(0, 0) /\ X2(0, 2) => X1(0, -1) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(2, -1) /\ X95(-1, 1) => X1(2, 1));
(X91(2, 2) => X3(2, -3));
(X92(-3, -3) => X3(-3, -3))

************** current phase of 24th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (163): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );..]

*** labeling with SAT solving
************** current phase of 24th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-3) (-2))
refuting (X2 (-1) 0)
refuting (X2 0 (-3))
refuting (X2 0 0)
refuting (X2 0 2)
refuting (X2 2 (-1))
refuting (X3 (-3) (-3))
refuting (X3 2 (-3))
refuting (X90 (-1) (-1))
refuting (X91 (-1) (-1))
refuting (X91 2 2)
refuting (X92 (-3) (-3))
refuting (X92 (-2) (-2))
refuting (X92 (-1) (-1))
refuting (X93 (-1) (-1))
refuting (X94 (-1) (-1))
refuting (X95 (-1) (-1))
refuting (X95 (-1) 1)
refuting (X96 (-1) (-1))
refuting (X96 0 0)
proving (X2 (-3) (-2))
proving (X2 (-1) 0)
proving (X2 0 (-3))
proving (X2 0 0)
proving (X2 0 2)
proving (X2 2 (-1))
proving (X3 (-3) (-3))
proving (X3 2 (-3))
proving (X90 (-1) (-1))
proving (X91 (-1) (-1))
proving (X91 2 2)
proving (X92 (-3) (-3))
proving (X92 (-2) (-2))
proving (X92 (-1) (-1))
proving (X93 (-1) (-1))
proving (X94 (-1) (-1))
proving (X95 (-1) (-1))
proving (X95 (-1) 1)
proving (X96 (-1) (-1))
proving (X96 0 0)
*** Example Instances obtained by Resolution:


************** current phase of 24th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (163): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );..]

*** labeling with SAT solving
************** current phase of 25th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (13):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
table:
FTFFFT_TFTTF_


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (19):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
table:
FFFFFFFFFFFFFFFFFTT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (13):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
table:
FTFFTFF_TTTFT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
table:
FTTFFTFFF___TFFFTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
table:
FTFTF_TTFFFFFFTFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (38):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
table:
FTFTFF_TTFFFF_TF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (32):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTT

gen constr of example:(X2(-3, -2) /\ X92(-2, -2) => )
constr: [#S_1379] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * -2 < 0)
gen constr of example:(X2(-1, 0) /\ X96(0, 0) => )
constr: [#S_1380] (#paramvar378 < 0 \/ #paramvar375 < 0 \/ #paramvar372 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 < 0 \/ #paramvar365 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(0, -3) /\ X91(2, 2) => )
constr: [#S_1381] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 < 0 \/ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 < 0 \/ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar229 * -3 < 0)
gen constr of example:(X2(2, -1) /\ X95(-1, 1) => )
constr: [#S_1382] (#paramvar364 > 0 \/ #paramvar361 + -#paramvar362 + #paramvar363 < 0 \/ #paramvar358 + -#paramvar359 + #paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + -#paramvar355 + #paramvar356 < 0 \/ #paramvar351 + -#paramvar352 + #paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + -#paramvar229 < 0)
gen constr of example:(X92(-3, -3) => X3(-3, -3))
constr: [#S_1383] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -3 < 0 \/ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -3 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -3 < 0 \/ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 * -3 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 * -3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 * -3 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 * -3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 * -3 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 * -3 >= 0
gen constr of example:(X91(2, 2) => X3(2, -3))
constr: [#S_1384] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 < 0 \/ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 < 0 \/ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 * -3 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 * -3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 * -3 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 * -3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 * -3 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 * -3 >= 0
gen constr of example:(X2(0, 0) /\ X2(0, 2) => X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_1385] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0
bounds constr: [#S_1386] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1387] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1388] true
bounds constr: [#S_1389] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1390] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1391] true
bounds constr: [#S_1392] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1393] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1394] true
bounds constr: [#S_1395] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1396] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1397] true
bounds constr: [#S_1398] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1399] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1400] true
bounds constr: [#S_1401] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1402] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1403] true
bounds constr: [#S_1404] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1405] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1406] true
bounds constr: [#S_1407] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1408] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1409] true
bounds constr: [#S_1410] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1411] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1412] true
bounds constr: [#S_1413] true
bounds constr: [#S_1414] true
bounds constr: [#S_1415] true
constraints generated
sat
************** current phase of 25th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  2 + x1 >= 0 /\ 1 + -x1 + x2 >= 0 \/ 2 + x2 >= 0 /\ 1 + -x1 + -x2 >= 0 \/ 2 + x1 + x2 >= 0
X3(x1: int, x2: int) :=
  2 + x2 >= 0 /\ 2 + -x1 >= 0 \/ 1 + x2 = 0 /\ -1 + -2 * x2 >= 0 /\ 2 + x1 + x2 >= 0 \/ 1 + x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x2 >= 0 /\ x1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + -x2 >= 0 /\ x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ x2 >= 0 /\ -x1 >= 0
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + 2 * x1 >= 0 /\ -1 + -x1 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 >= 0 /\ -1 + -x1 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ 1 + 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ -x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-2, -1) /\ X95(-3, -3) => X1(-2, -3));
(X2(-2, -3) /\ X91(2, 2) => X1(-2, 2));
(X2(-3, 0) /\ X2(-5, 2) => X1(-3, 1) \/ X1(-5, 1) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X2(5, -3) /\ X92(1, -3) => X1(5, -3));
(X92(-2, -3) => X3(-2, -3))

************** current phase of 25th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (17): [
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-2, -1) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );
(X1(2, 1) => )]
*** undecided (168): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );
(X2(-1, 1) /\ X90(0, 2) => );
(X2(-1, 1) /\ X91(-2, -2) => );..]

*** labeling with SAT solving
************** current phase of 25th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-5) 1)
  added as a negative example with: 
  add negative example(X1(-5, 1) => )
refuting (X1 (-3) 1)
  added as a negative example with: 
  add negative example(X1(-3, 1) => )
refuting (X1 (-2) (-3))
  added as a negative example with: 
  add negative example(X1(-2, -3) => )
refuting (X1 (-2) 2)
  added as a negative example with: 
  add negative example(X1(-2, 2) => )
refuting (X1 5 (-3))
  added as a negative example with: 
  add negative example(X1(5, -3) => )
refuting (X2 (-5) 2)
refuting (X2 (-3) 0)
refuting (X2 (-2) (-3))
refuting (X2 (-2) (-1))
refuting (X2 5 (-3))
refuting (X3 (-2) (-3))
refuting (X90 1 1)
refuting (X91 1 1)
refuting (X91 2 2)
refuting (X92 (-2) (-3))
refuting (X92 1 (-3))
refuting (X92 1 1)
refuting (X93 1 1)
refuting (X94 1 1)
refuting (X95 (-3) (-3))
refuting (X95 1 1)
refuting (X96 1 1)
proving (X1 (-5) 1)
proving (X1 (-3) 1)
proving (X1 (-2) (-3))
proving (X1 (-2) 2)
proving (X1 5 (-3))
proving (X2 (-5) 2)
proving (X2 (-3) 0)
proving (X2 (-2) (-3))
proving (X2 (-2) (-1))
proving (X2 5 (-3))
proving (X3 (-2) (-3))
proving (X90 1 1)
proving (X91 1 1)
proving (X91 2 2)
proving (X92 (-2) (-3))
proving (X92 1 (-3))
proving (X92 1 1)
proving (X93 1 1)
proving (X94 1 1)
proving (X95 (-3) (-3))
proving (X95 1 1)
proving (X96 1 1)
*** Example Instances obtained by Resolution:
(X1(-5, 1) => );
(X1(-3, 1) => );
(X1(-2, -3) => );
(X1(-2, 2) => );
(X1(5, -3) => )

************** current phase of 25th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (22): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );..]
*** undecided (168): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );
(X2(-1, 0) /\ X96(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 26th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (13):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
table:
FTFFFT_TFTTF_


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (11):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
table:
FTFFTT_TFFT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (24):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
table:
FFFFFFFFFFFFFFFFFTTFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
table:
FTFFTFF_TTTFTFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
table:
FTTFFTFFF___TFFFTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
table:
FTFTF_TTFFFFFFTFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
table:
FTFFTF__TFFFFFTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (38):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
table:
FTFTFF_TTFFFF_TFT


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (36):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFT

gen constr of example:(X1(-5, 1) => )
constr: [#S_1416] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -5 + #paramvar225 < 0
gen constr of example:(X1(-3, 1) => )
constr: [#S_1417] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -3 + #paramvar225 < 0
gen constr of example:(X1(-2, -3) => )
constr: [#S_1418] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -2 + #paramvar225 * -3 < 0
gen constr of example:(X1(-2, 2) => )
constr: [#S_1419] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -2 + #paramvar225 * 2 < 0
gen constr of example:(X1(5, -3) => )
constr: [#S_1420] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 5 + #paramvar225 * -3 < 0
gen constr of example:(X2(-2, -3) /\ X91(2, 2) => )
constr: [#S_1421] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 < 0 \/ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 < 0 \/ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * -3 < 0)
gen constr of example:(X2(-2, -1) /\ X95(-3, -3) => )
constr: [#S_1422] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 < 0 \/ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 < 0 \/ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * -2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * -2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * -2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -2 + -#paramvar229 < 0)
gen constr of example:(X2(5, -3) /\ X92(1, -3) => )
constr: [#S_1423] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 + #paramvar321 * -3 < 0 \/ #paramvar316 + #paramvar317 + #paramvar318 * -3 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 + #paramvar314 * -3 < 0 \/ #paramvar309 + #paramvar310 + #paramvar311 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 5 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar246 * 5 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 5 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar237 * 5 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 5 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar228 * 5 + #paramvar229 * -3 < 0)
gen constr of example:(X92(-2, -3) => X3(-2, -3))
constr: [#S_1424] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -3 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -3 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -3 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * -3 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * -3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * -3 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * -3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * -3 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * -3 >= 0
gen constr of example:(X2(-3, 0) /\ X2(-5, 2) => X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_1425] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 < 0 \/ #paramvar245 + #paramvar246 * -3 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 < 0 \/ #paramvar236 + #paramvar237 * -3 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 < 0 \/ #paramvar227 + #paramvar228 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -5 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -5 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -5 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -5 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -5 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -5 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0
bounds constr: [#S_1426] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1427] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1428] true
bounds constr: [#S_1429] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1430] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1431] true
bounds constr: [#S_1432] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1433] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1434] true
bounds constr: [#S_1435] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1436] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1437] true
bounds constr: [#S_1438] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1439] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1440] true
bounds constr: [#S_1441] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1442] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1443] true
bounds constr: [#S_1444] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1445] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1446] true
bounds constr: [#S_1447] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1448] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1449] true
bounds constr: [#S_1450] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1451] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1452] true
bounds constr: [#S_1453] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1454] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1455] true
constraints generated
sat
************** current phase of 26th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + -x1 + x2 >= 0 /\ -1 + -x1 + x2 >= 0 \/ x2 != 0 /\ 2 + x2 >= 0 /\ 1 + -x1 + -x2 >= 0 \/ -1 + x2 = 0 /\ 1 + x2 = 0 /\ -2 + -x1 >= 0
X3(x1: int, x2: int) :=
  -1 + -x1 + x2 = 0 /\ -1 + x2 >= 0 /\ -1 + x1 + x2 >= 0 \/ x2 != 0 /\ 2 + -3 * x2 >= 0 /\ x1 + 2 * x2 >= 0 \/ -1 + x1 + x2 != 0 /\ -x2 >= 0 /\ -2 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x2 >= 0 /\ -1 + -x1 + x2 >= 0
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + x1 >= 0 /\ -2 + -x1 >= 0
X95(x1: int, x2: int) :=
  -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 >= 0 /\ -1 + -x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ -1 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
( => X3(-1, 0) \/ X3(-1, 2) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(-2, 2) => X1(-2, -1) \/ X3(-1, 0) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(-3, 1) /\ X94(-2, -2) => X1(-3, -2));
(X2(-4, -3) /\ X2(0, 5) => X1(-4, 4) \/ X1(0, 4) \/ X90(4, 4) \/ X91(4, 4) \/ X92(4, 4) \/ X93(4, 4) \/ X94(4, 4) \/ X95(4, 4) \/ X96(4, 4));
(X2(0, -1) /\ X95(1, -1) => X1(0, -1));
(X2(0, 4) => X1(0, 3) \/ X3(3, -2) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3));
(X3(6, -3) => X2(6, -3));
(X94(-2, -2) => X3(-2, 1));
(X95(1, -1) => X3(1, -1))

************** current phase of 26th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (22): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(1, -2) => );
(X1(1, -1) => );
(X1(1, 0) => );
(X1(1, 2) => );..]
*** undecided (177): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 26th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-4) 4)
  added as a negative example with: 
  add negative example(X1(-4, 4) => )
refuting (X1 0 3)
  added as a negative example with: 
  add negative example(X1(0, 3) => )
refuting (X1 0 4)
  added as a negative example with: 
  add negative example(X1(0, 4) => )
refuting (X2 (-5) 2)
refuting (X2 (-4) (-3))
refuting (X2 (-3) 0)
refuting (X2 (-3) 1)
refuting (X2 (-2) (-3))
refuting (X2 (-2) (-1))
refuting (X2 (-2) 2)
refuting (X2 0 (-1))
refuting (X2 0 4)
refuting (X2 0 5)
refuting (X2 5 (-3))
refuting (X2 6 (-3))
refuting (X3 (-2) 1)
refuting (X3 (-1) 0)
refuting (X3 (-1) 2)
refuting (X3 1 (-1))
refuting (X3 3 (-2))
refuting (X3 6 (-3))
refuting (X90 (-1) (-1))
refuting (X90 1 1)
refuting (X90 3 3)
refuting (X90 4 4)
refuting (X91 (-1) (-1))
refuting (X91 1 1)
refuting (X91 2 2)
refuting (X91 3 3)
refuting (X91 4 4)
refuting (X92 (-1) (-1))
refuting (X92 1 (-3))
refuting (X92 1 1)
refuting (X92 3 3)
refuting (X92 4 4)
refuting (X93 (-1) (-1))
refuting (X93 1 1)
refuting (X93 3 3)
refuting (X93 4 4)
refuting (X94 (-2) (-2))
refuting (X94 (-1) (-1))
refuting (X94 1 1)
refuting (X94 3 3)
refuting (X94 4 4)
refuting (X95 (-3) (-3))
refuting (X95 (-1) (-1))
refuting (X95 1 (-1))
refuting (X95 1 1)
refuting (X95 3 3)
refuting (X95 4 4)
refuting (X96 (-1) (-1))
refuting (X96 1 1)
refuting (X96 3 3)
refuting (X96 4 4)
proving (X1 (-5) 1)
proving (X1 (-4) 4)
proving (X1 (-3) 1)
proving (X1 (-2) (-3))
proving (X1 (-2) 2)
proving (X1 0 3)
proving (X1 0 4)
proving (X1 5 (-3))
proving (X2 (-5) 2)
proving (X2 (-4) (-3))
proving (X2 (-3) 0)
proving (X2 (-3) 1)
proving (X2 (-2) (-3))
proving (X2 (-2) (-1))
proving (X2 (-2) 2)
proving (X2 0 (-1))
proving (X2 0 4)
proving (X2 0 5)
proving (X2 5 (-3))
proving (X2 6 (-3))
proving (X3 (-2) 1)
proving (X3 (-1) 0)
proving (X3 (-1) 2)
proving (X3 1 (-1))
proving (X3 3 (-2))
proving (X3 6 (-3))
proving (X90 (-1) (-1))
proving (X90 1 1)
proving (X90 3 3)
proving (X90 4 4)
proving (X91 (-1) (-1))
proving (X91 1 1)
proving (X91 2 2)
proving (X91 3 3)
proving (X91 4 4)
proving (X92 (-1) (-1))
proving (X92 1 (-3))
proving (X92 1 1)
proving (X92 3 3)
proving (X92 4 4)
proving (X93 (-1) (-1))
proving (X93 1 1)
proving (X93 3 3)
proving (X93 4 4)
proving (X94 (-2) (-2))
proving (X94 (-1) (-1))
proving (X94 1 1)
proving (X94 3 3)
proving (X94 4 4)
proving (X95 (-3) (-3))
proving (X95 (-1) (-1))
proving (X95 1 (-1))
proving (X95 1 1)
proving (X95 3 3)
proving (X95 4 4)
proving (X96 (-1) (-1))
proving (X96 1 1)
proving (X96 3 3)
proving (X96 4 4)
*** Example Instances obtained by Resolution:
(X1(-4, 4) => );
(X1(0, 3) => );
(X1(0, 4) => )

************** current phase of 26th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (25): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(0, 3) => );
(X1(0, 4) => );
(X1(1, -2) => );..]
*** undecided (177): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 27th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
table:
FTFFFT_TFTTF_TT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (13):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
table:
FTFFTT_TFFTTT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (27):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
table:
FTFFTFF_TTTFTFFTT


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (21):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
table:
FTTFFTFFF___TFFFTFFTT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
table:
FTFTF_TTFFFFFFTFFTT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (18):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
table:
FTFFTF__TFFFFFTTTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (40):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (20):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
table:
FTFTFF_TTFFFF_TFTFTT


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (42):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTT

gen constr of example:(X1(-4, 4) => )
constr: [#S_1456] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -4 + #paramvar225 * 4 < 0
gen constr of example:(X1(0, 3) => )
constr: [#S_1457] #paramvar226 > 0 \/ #paramvar223 + #paramvar225 * 3 < 0
gen constr of example:(X1(0, 4) => )
constr: [#S_1458] #paramvar226 > 0 \/ #paramvar223 + #paramvar225 * 4 < 0
gen constr of example:(X2(-3, 1) /\ X94(-2, -2) => )
constr: [#S_1459] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 < 0)
gen constr of example:(X2(0, -1) /\ X95(1, -1) => )
constr: [#S_1460] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 + -#paramvar363 < 0 \/ #paramvar358 + #paramvar359 + -#paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 + -#paramvar356 < 0 \/ #paramvar351 + #paramvar352 + -#paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X3(6, -3) => X2(6, -3))
constr: [#S_1461] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 6 + #paramvar281 * -3 < 0 \/ #paramvar276 + #paramvar277 * 6 + #paramvar278 * -3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 6 + #paramvar270 * -3 < 0 \/ #paramvar265 + #paramvar266 * 6 + #paramvar267 * -3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 6 + #paramvar259 * -3 < 0 \/ #paramvar254 + #paramvar255 * 6 + #paramvar256 * -3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 6 + #paramvar250 * -3 >= 0 /\ #paramvar245 + #paramvar246 * 6 + #paramvar247 * -3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 6 + #paramvar241 * -3 >= 0 /\ #paramvar236 + #paramvar237 * 6 + #paramvar238 * -3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 6 + #paramvar232 * -3 >= 0 /\ #paramvar227 + #paramvar228 * 6 + #paramvar229 * -3 >= 0
gen constr of example:(X94(-2, -2) => X3(-2, 1))
constr: [#S_1462] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 >= 0
gen constr of example:(X95(1, -1) => X3(1, -1))
constr: [#S_1463] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 + -#paramvar363 < 0 \/ #paramvar358 + #paramvar359 + -#paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 + -#paramvar356 < 0 \/ #paramvar351 + #paramvar352 + -#paramvar353 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 + -#paramvar256 >= 0
gen constr of example:( => X3(-1, 0) \/ X3(-1, 2) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_1464] #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 * 2 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 * 2 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 * 2 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 * 2 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X2(-2, 2) => X3(-1, 0) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_1465] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X2(0, 4) => X3(3, -2) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3))
constr: [#S_1466] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar229 * 4 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 3 + #paramvar307 * 3 >= 0 /\ #paramvar302 + #paramvar303 * 3 + #paramvar304 * 3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 3 + #paramvar300 * 3 >= 0 /\ #paramvar295 + #paramvar296 * 3 + #paramvar297 * 3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 3 + #paramvar321 * 3 >= 0 /\ #paramvar316 + #paramvar317 * 3 + #paramvar318 * 3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 3 + #paramvar314 * 3 >= 0 /\ #paramvar309 + #paramvar310 * 3 + #paramvar311 * 3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 3 + #paramvar335 * 3 >= 0 /\ #paramvar330 + #paramvar331 * 3 + #paramvar332 * 3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 3 + #paramvar328 * 3 >= 0 /\ #paramvar323 + #paramvar324 * 3 + #paramvar325 * 3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 3 + #paramvar349 * 3 >= 0 /\ #paramvar344 + #paramvar345 * 3 + #paramvar346 * 3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 3 + #paramvar342 * 3 >= 0 /\ #paramvar337 + #paramvar338 * 3 + #paramvar339 * 3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 3 + #paramvar363 * 3 >= 0 /\ #paramvar358 + #paramvar359 * 3 + #paramvar360 * 3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 3 + #paramvar356 * 3 >= 0 /\ #paramvar351 + #paramvar352 * 3 + #paramvar353 * 3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 3 + #paramvar377 * 3 >= 0 /\ #paramvar372 + #paramvar373 * 3 + #paramvar374 * 3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 3 + #paramvar370 * 3 >= 0 /\ #paramvar365 + #paramvar366 * 3 + #paramvar367 * 3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 3 + #paramvar293 * 3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 3 + #paramvar289 * 3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 * -2 >= 0
gen constr of example:(X2(-4, -3) /\ X2(0, 5) => X90(4, 4) \/ X91(4, 4) \/ X92(4, 4) \/ X93(4, 4) \/ X94(4, 4) \/ X95(4, 4) \/ X96(4, 4))
constr: [#S_1467] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -4 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar246 * -4 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -4 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar237 * -4 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -4 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar228 * -4 + #paramvar229 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 5 < 0 \/ #paramvar245 + #paramvar247 * 5 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 5 < 0 \/ #paramvar236 + #paramvar238 * 5 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 5 < 0 \/ #paramvar227 + #paramvar229 * 5 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 4 + #paramvar307 * 4 >= 0 /\ #paramvar302 + #paramvar303 * 4 + #paramvar304 * 4 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 4 + #paramvar300 * 4 >= 0 /\ #paramvar295 + #paramvar296 * 4 + #paramvar297 * 4 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 4 + #paramvar321 * 4 >= 0 /\ #paramvar316 + #paramvar317 * 4 + #paramvar318 * 4 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 4 + #paramvar314 * 4 >= 0 /\ #paramvar309 + #paramvar310 * 4 + #paramvar311 * 4 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 4 + #paramvar335 * 4 >= 0 /\ #paramvar330 + #paramvar331 * 4 + #paramvar332 * 4 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 4 + #paramvar328 * 4 >= 0 /\ #paramvar323 + #paramvar324 * 4 + #paramvar325 * 4 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 4 + #paramvar349 * 4 >= 0 /\ #paramvar344 + #paramvar345 * 4 + #paramvar346 * 4 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 4 + #paramvar342 * 4 >= 0 /\ #paramvar337 + #paramvar338 * 4 + #paramvar339 * 4 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 4 + #paramvar363 * 4 >= 0 /\ #paramvar358 + #paramvar359 * 4 + #paramvar360 * 4 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 4 + #paramvar356 * 4 >= 0 /\ #paramvar351 + #paramvar352 * 4 + #paramvar353 * 4 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 4 + #paramvar377 * 4 >= 0 /\ #paramvar372 + #paramvar373 * 4 + #paramvar374 * 4 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 4 + #paramvar370 * 4 >= 0 /\ #paramvar365 + #paramvar366 * 4 + #paramvar367 * 4 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 4 + #paramvar293 * 4 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 4 + #paramvar289 * 4 >= 0
bounds constr: [#S_1468] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1469] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1470] true
bounds constr: [#S_1471] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1472] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1473] true
bounds constr: [#S_1474] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1475] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1476] true
bounds constr: [#S_1477] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1478] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1479] true
bounds constr: [#S_1480] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1481] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1482] true
bounds constr: [#S_1483] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1484] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1485] true
bounds constr: [#S_1486] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1487] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1488] true
bounds constr: [#S_1489] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1490] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1491] true
bounds constr: [#S_1492] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1493] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1494] true
bounds constr: [#S_1495] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1496] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1497] true
constraints generated
sat
************** current phase of 27th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ 1 + x2 != 0 /\ -1 + x1 + -x2 >= 0 /\ 1 + -x1 >= 0 \/ x2 = 0 /\ -1 + x2 = 0 /\ -x1 + -x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ 1 + -x1 + x2 >= 0 /\ -1 + x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x1 + -x2 >= 0 /\ 1 + -x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + x2 >= 0 /\ x1 + -x2 >= 0 \/ x1 + -x2 != 0 /\ x1 + x2 >= 0 /\ -1 + -x1 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 >= 0 \/ -2 + -x1 + x2 >= 0 /\ x1 >= 0
X94(x1: int, x2: int) :=
  -2 + x1 >= 0 /\ -1 + x1 >= 0
X95(x1: int, x2: int) :=
  -2 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 >= 0 /\ -1 + -x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -2 * x1 >= 0 /\ -1 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(0, -1) /\ X95(1, -2) => X1(0, -2));
(X2(1, 0) /\ X96(1, 1) => X1(1, 1));
(X2(3, 2) /\ X92(3, 2) => X1(3, 2));
(X2(3, 2) /\ X93(-2, -2) => X1(3, -2));
(X3(2, 1) => X2(2, 1));
(X92(4, 2) => X3(4, 2));
(X93(-2, -2) => X3(-2, 2));
(X94(3, $1) => X3(3, 1));
(X95(-1, -3) => X3(-1, -1))

************** current phase of 27th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (25): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(0, 3) => );
(X1(0, 4) => );
(X1(1, -2) => );..]
*** undecided (186): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 27th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X94 3 $1)
proving (X94 3 $1)
refuting (X1 1 1)
refuting (X1 3 (-2))
  added as a negative example with: 
  add negative example(X1(3, -2) => )
refuting (X1 3 2)
  added as a negative example with: 
  add negative example(X1(3, 2) => )
refuting (X2 (-4) (-3))
refuting (X2 0 (-1))
refuting (X2 0 4)
refuting (X2 0 5)
refuting (X2 1 0)
refuting (X2 2 1)
refuting (X2 3 2)
refuting (X3 (-2) 2)
refuting (X3 (-1) (-1))
refuting (X3 2 1)
refuting (X3 3 (-2))
refuting (X3 3 1)
refuting (X3 4 2)
refuting (X90 3 3)
refuting (X90 4 4)
refuting (X91 3 3)
refuting (X91 4 4)
refuting (X92 3 2)
refuting (X92 3 3)
refuting (X92 4 2)
refuting (X92 4 4)
refuting (X93 (-2) (-2))
refuting (X93 3 3)
refuting (X93 4 4)
refuting (X94 4 4)
refuting (X95 (-1) (-3))
refuting (X95 1 (-2))
refuting (X95 3 3)
refuting (X95 4 4)
refuting (X96 1 1)
refuting (X96 3 3)
refuting (X96 4 4)
proving (X1 (-4) 4)
proving (X1 0 3)
proving (X1 0 4)
proving (X1 1 1)
proving (X1 3 (-2))
proving (X1 3 2)
proving (X2 (-4) (-3))
proving (X2 0 (-1))
proving (X2 0 4)
proving (X2 0 5)
proving (X2 1 0)
proving (X2 2 1)
proving (X2 3 2)
proving (X3 (-2) 2)
proving (X3 (-1) (-1))
proving (X3 2 1)
proving (X3 3 (-2))
proving (X3 3 1)
proving (X3 4 2)
proving (X90 3 3)
proving (X90 4 4)
proving (X91 3 3)
proving (X91 4 4)
proving (X92 3 2)
proving (X92 3 3)
proving (X92 4 2)
proving (X92 4 4)
proving (X93 (-2) (-2))
proving (X93 3 3)
proving (X93 4 4)
proving (X94 4 4)
proving (X95 (-1) (-3))
proving (X95 1 (-2))
proving (X95 3 3)
proving (X95 4 4)
proving (X96 1 1)
proving (X96 3 3)
proving (X96 4 4)
*** Example Instances obtained by Resolution:
(X1(3, -2) => );
(X1(3, 2) => )

************** current phase of 27th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (27): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(0, 3) => );
(X1(0, 4) => );
(X1(1, -2) => );..]
*** undecided (186): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );
(X2(-1, 0) /\ X96(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 28th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (16):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
table:
FTFFFT_TFTTF_TTF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (13):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
table:
FTFFTT_TFFTTT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (29):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
table:
FTFFTFF_TTTFTFFTTFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (21):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
table:
FTTFFTFFF___TFFFTFFTT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
table:
FTFTF_TTFFFFFFTFFTT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (18):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
table:
FTFFTF__TFFFFFTTTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (43):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
table:
FTFTFF_TTFFFF_TFTFTTFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (44):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTT

gen constr of example:(X1(3, -2) => )
constr: [#S_1498] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 3 + #paramvar225 * -2 < 0
gen constr of example:(X1(3, 2) => )
constr: [#S_1499] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 3 + #paramvar225 * 2 < 0
gen constr of example:(X2(0, -1) /\ X95(1, -2) => )
constr: [#S_1500] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 + #paramvar363 * -2 < 0 \/ #paramvar358 + #paramvar359 + #paramvar360 * -2 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 + #paramvar356 * -2 < 0 \/ #paramvar351 + #paramvar352 + #paramvar353 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(3, 2) /\ X92(3, 2) => )
constr: [#S_1501] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * 3 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 * 3 + #paramvar318 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * 3 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 * 3 + #paramvar311 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 * 2 < 0)
gen constr of example:(X2(3, 2) /\ X93(-2, -2) => )
constr: [#S_1502] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 * 2 < 0)
gen constr of example:(X2(1, 0) /\ X96(1, 1) => X1(1, 1))
constr: [#S_1503] (#paramvar378 < 0 \/ #paramvar375 + #paramvar376 + #paramvar377 < 0 \/ #paramvar372 + #paramvar373 + #paramvar374 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + #paramvar369 + #paramvar370 < 0 \/ #paramvar365 + #paramvar366 + #paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + #paramvar224 + #paramvar225 >= 0
gen constr of example:(X3(2, 1) => X2(2, 1))
constr: [#S_1504] (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 2 + #paramvar281 < 0 \/ #paramvar276 + #paramvar277 * 2 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 2 + #paramvar270 < 0 \/ #paramvar265 + #paramvar266 * 2 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 2 + #paramvar259 < 0 \/ #paramvar254 + #paramvar255 * 2 + #paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 <= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 2 + #paramvar250 >= 0 /\ #paramvar245 + #paramvar246 * 2 + #paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 <= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 2 + #paramvar241 >= 0 /\ #paramvar236 + #paramvar237 * 2 + #paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 <= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 2 + #paramvar232 >= 0 /\ #paramvar227 + #paramvar228 * 2 + #paramvar229 >= 0
gen constr of example:(X93(-2, -2) => X3(-2, 2))
constr: [#S_1505] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * 2 >= 0
gen constr of example:(X95(-1, -3) => X3(-1, -1))
constr: [#S_1506] (#paramvar364 > 0 \/ #paramvar361 + -#paramvar362 + #paramvar363 * -3 < 0 \/ #paramvar358 + -#paramvar359 + #paramvar360 * -3 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + -#paramvar355 + #paramvar356 * -3 < 0 \/ #paramvar351 + -#paramvar352 + #paramvar353 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + -#paramvar281 >= 0 /\ #paramvar276 + -#paramvar277 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + -#paramvar270 >= 0 /\ #paramvar265 + -#paramvar266 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + -#paramvar259 >= 0 /\ #paramvar254 + -#paramvar255 + -#paramvar256 >= 0
gen constr of example:(X94(3, $1) => X3(3, 1))
constr: [#S_1507] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 * 3 < 0 \/ #paramvar344 + #paramvar345 * 3 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 * 3 < 0 \/ #paramvar337 + #paramvar338 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 >= 0
gen constr of example:(X92(4, 2) => X3(4, 2))
constr: [#S_1508] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * 4 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 * 4 + #paramvar318 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * 4 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 * 4 + #paramvar311 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 4 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 * 4 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 4 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 * 4 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 4 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 * 4 + #paramvar256 * 2 >= 0
bounds constr: [#S_1509] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1510] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1511] true
bounds constr: [#S_1512] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1513] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1514] true
bounds constr: [#S_1515] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1516] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) <= 2
bounds constr: [#S_1517] true
bounds constr: [#S_1518] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1519] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1520] true
bounds constr: [#S_1521] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1522] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1523] true
bounds constr: [#S_1524] true
bounds constr: [#S_1525] true
bounds constr: [#S_1526] true
bounds constr: [#S_1527] true
bounds constr: [#S_1528] true
bounds constr: [#S_1529] true
bounds constr: [#S_1530] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1531] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1532] true
bounds constr: [#S_1533] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1534] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1535] true
bounds constr: [#S_1536] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1537] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1538] true
constraints generated
sat
************** current phase of 28th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ -1 + x1 + -x2 >= 0 /\ 2 + -2 * x1 >= 0 \/ x2 = 0 /\ -1 + x2 = 0 /\ 1 + 2 * x2 >= 0 /\ 2 + -x1 + -x2 >= 0 \/ 1 + -x1 + x2 >= 0 /\ -1 + x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x1 + -x2 >= 0 /\ 2 + -2 * x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x1 >= 0 /\ -2 + -x1 + x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ x1 >= 0 \/ x1 + -x2 != 0 /\ -2 + -x1 + x2 >= 0 /\ x1 >= 0
X94(x1: int, x2: int) :=
  -2 + x1 >= 0 /\ -1 + 2 * x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 >= 0 /\ -2 + -x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x1 >= 0 /\ -1 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -2) /\ X93(0, 2) => X1(-1, 2));
(X2(2, 1) /\ X94(2, 1) => X1(2, 1));
(X2(3, 2) /\ X92(0, 2) => X1(3, 2));
(X3(0, -2) => X2(0, -2));
(X92(5, 7) => X3(5, 7));
(X93(0, 3) => X3(0, -3));
(X94(2, 1) => X3(2, 1))

************** current phase of 28th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (27): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(0, 3) => );
(X1(0, 4) => );
(X1(1, -2) => );..]
*** undecided (193): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );..]

*** labeling with SAT solving
************** current phase of 28th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-1) (-2))
refuting (X2 0 (-2))
refuting (X2 2 1)
refuting (X2 3 2)
refuting (X3 0 (-3))
refuting (X3 0 (-2))
refuting (X3 2 1)
refuting (X3 5 7)
refuting (X92 0 2)
refuting (X92 3 2)
refuting (X92 5 7)
refuting (X93 (-2) (-2))
refuting (X93 0 2)
refuting (X93 0 3)
refuting (X94 2 1)
proving (X1 3 (-2))
proving (X1 3 2)
proving (X2 (-1) (-2))
proving (X2 0 (-2))
proving (X2 2 1)
proving (X2 3 2)
proving (X3 0 (-3))
proving (X3 0 (-2))
proving (X3 2 1)
proving (X3 5 7)
proving (X92 0 2)
proving (X92 3 2)
proving (X92 5 7)
proving (X93 (-2) (-2))
proving (X93 0 2)
proving (X93 0 3)
proving (X94 2 1)
*** Example Instances obtained by Resolution:


************** current phase of 28th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (27): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(0, 3) => );
(X1(0, 4) => );
(X1(1, -2) => );..]
*** undecided (193): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );
(X2(-1, 0) /\ X96(0, 0) => );..]

*** labeling with SAT solving
************** current phase of 29th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
table:
FTFFFT_TFTTF_TTFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (13):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
table:
FTFFTT_TFFTTT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (29):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (21):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
table:
FTFFTFF_TTTFTFFTTFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
table:
FTTFFTFFF___TFFFTFFTTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
table:
FTFTF_TTFFFFFFTFFTT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (18):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
table:
FTFFTF__TFFFFFTTTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (45):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
table:
FTFTFF_TTFFFF_TFTFTTFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (44):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTT

gen constr of example:(X2(-1, -2) /\ X93(0, 2) => )
constr: [#S_1539] (#paramvar336 > 0 \/ #paramvar333 + #paramvar335 * 2 < 0 \/ #paramvar330 + #paramvar332 * 2 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar328 * 2 < 0 \/ #paramvar323 + #paramvar325 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * -2 < 0)
gen constr of example:(X2(2, 1) /\ X94(2, 1) => )
constr: [#S_1540] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 * 2 + #paramvar349 < 0 \/ #paramvar344 + #paramvar345 * 2 + #paramvar346 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 * 2 + #paramvar342 < 0 \/ #paramvar337 + #paramvar338 * 2 + #paramvar339 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 < 0)
gen constr of example:(X2(3, 2) /\ X92(0, 2) => )
constr: [#S_1541] (#paramvar322 > 0 \/ #paramvar319 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar318 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar311 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 * 2 < 0)
gen constr of example:(X3(0, -2) => X2(0, -2))
constr: [#S_1542] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar281 * -2 < 0 \/ #paramvar276 + #paramvar278 * -2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar270 * -2 < 0 \/ #paramvar265 + #paramvar267 * -2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar259 * -2 < 0 \/ #paramvar254 + #paramvar256 * -2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar250 * -2 >= 0 /\ #paramvar245 + #paramvar247 * -2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar241 * -2 >= 0 /\ #paramvar236 + #paramvar238 * -2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar232 * -2 >= 0 /\ #paramvar227 + #paramvar229 * -2 >= 0
gen constr of example:(X93(0, 3) => X3(0, -3))
constr: [#S_1543] (#paramvar336 > 0 \/ #paramvar333 + #paramvar335 * 3 < 0 \/ #paramvar330 + #paramvar332 * 3 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar328 * 3 < 0 \/ #paramvar323 + #paramvar325 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar281 * -3 >= 0 /\ #paramvar276 + #paramvar278 * -3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar270 * -3 >= 0 /\ #paramvar265 + #paramvar267 * -3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar259 * -3 >= 0 /\ #paramvar254 + #paramvar256 * -3 >= 0
gen constr of example:(X94(2, 1) => X3(2, 1))
constr: [#S_1544] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 * 2 + #paramvar349 < 0 \/ #paramvar344 + #paramvar345 * 2 + #paramvar346 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 * 2 + #paramvar342 < 0 \/ #paramvar337 + #paramvar338 * 2 + #paramvar339 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 >= 0
gen constr of example:(X92(5, 7) => X3(5, 7))
constr: [#S_1545] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * 5 + #paramvar321 * 7 < 0 \/ #paramvar316 + #paramvar317 * 5 + #paramvar318 * 7 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * 5 + #paramvar314 * 7 < 0 \/ #paramvar309 + #paramvar310 * 5 + #paramvar311 * 7 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 5 + #paramvar281 * 7 >= 0 /\ #paramvar276 + #paramvar277 * 5 + #paramvar278 * 7 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 5 + #paramvar270 * 7 >= 0 /\ #paramvar265 + #paramvar266 * 5 + #paramvar267 * 7 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 5 + #paramvar259 * 7 >= 0 /\ #paramvar254 + #paramvar255 * 5 + #paramvar256 * 7 >= 0
bounds constr: [#S_1546] true
bounds constr: [#S_1547] true
bounds constr: [#S_1548] true
bounds constr: [#S_1549] true
bounds constr: [#S_1550] true
bounds constr: [#S_1551] true
bounds constr: [#S_1552] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1553] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1554] true
bounds constr: [#S_1555] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1556] (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1557] true
bounds constr: [#S_1558] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1559] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1560] true
bounds constr: [#S_1561] true
bounds constr: [#S_1562] true
bounds constr: [#S_1563] true
bounds constr: [#S_1564] true
bounds constr: [#S_1565] true
bounds constr: [#S_1566] true
bounds constr: [#S_1567] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1568] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1569] true
bounds constr: [#S_1570] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1571] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1572] true
bounds constr: [#S_1573] true
bounds constr: [#S_1574] true
bounds constr: [#S_1575] true
constraints generated
sat
************** current phase of 29th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ 1 + x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ 1 + -x1 + x2 >= 0 /\ -1 + x1 + x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x1 + x2 = 0 /\ -1 + x1 + x2 >= 0 /\ -1 + x1 + x2 >= 0 \/ -1 + x1 + x2 = 0 /\ -2 + 2 * x1 + -x2 >= 0 /\ -1 + 2 * x1 + -x2 >= 0 \/ 1 + x2 = 0 /\ -1 + x1 + x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ -1 + -2 * x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 != 0 /\ x1 + -x2 >= 0 /\ 2 + -x1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ 2 + x2 >= 0 /\ -2 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ x1 + -x2 != 0 /\ -2 + -x2 >= 0 /\ 2 + x1 + x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 >= 0 /\ -1 + x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0 /\ 2 + -2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-3, -1) /\ X2(-4, 3) => X1(-3, 2) \/ X1(-4, 2) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X2(-3, 1) /\ X94(0, -2) => X1(-3, -2));
(X2(-4, -2) /\ X92(-3, -2) => X1(-4, -2));
(X2(1, 0) /\ X91(0, -1) => X1(1, -1));
(X2(1, 0) /\ X96(-3, -1) => X1(1, -1));
(X2(1, 2) => X1(1, -1) \/ X3(-1, 0) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X3(2, -1) => X2(2, -1));
(X91(0, -1) => X3(0, 0));
(X92(-3, -2) => X3(-3, -2));
(X94(1, -3) => X3(1, 1));
(X96(0, 2) => X3(0, 0))

************** current phase of 29th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (27): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );
(X1(0, 3) => );
(X1(0, 4) => );
(X1(1, -2) => );..]
*** undecided (204): [
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );
(X2(-1, 0) /\ X96(0, -2) => );..]

*** labeling with SAT solving
************** current phase of 29th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-4) (-2))
  added as a negative example with: 
  add negative example(X1(-4, -2) => )
refuting (X1 (-4) 2)
  added as a negative example with: 
  add negative example(X1(-4, 2) => )
refuting (X1 (-3) 2)
  added as a negative example with: 
  add negative example(X1(-3, 2) => )
refuting (X2 (-4) (-2))
refuting (X2 (-4) 3)
refuting (X2 (-3) (-1))
refuting (X2 (-3) 1)
refuting (X2 1 0)
refuting (X2 1 2)
refuting (X2 2 (-1))
refuting (X3 (-3) (-2))
refuting (X3 (-1) 0)
refuting (X3 0 0)
refuting (X3 1 1)
refuting (X3 2 (-1))
refuting (X90 (-1) (-1))
refuting (X90 2 2)
refuting (X91 (-1) (-1))
refuting (X91 0 (-1))
refuting (X91 2 2)
refuting (X92 (-3) (-2))
refuting (X92 (-1) (-1))
refuting (X92 2 2)
refuting (X93 (-1) (-1))
refuting (X93 2 2)
refuting (X94 (-1) (-1))
refuting (X94 0 (-2))
refuting (X94 1 (-3))
refuting (X94 2 2)
refuting (X95 (-1) (-1))
refuting (X95 2 2)
refuting (X96 (-3) (-1))
refuting (X96 (-1) (-1))
refuting (X96 0 2)
refuting (X96 2 2)
proving (X1 (-4) (-2))
proving (X1 (-4) 2)
proving (X1 (-3) 2)
proving (X2 (-4) (-2))
proving (X2 (-4) 3)
proving (X2 (-3) (-1))
proving (X2 (-3) 1)
proving (X2 1 0)
proving (X2 1 2)
proving (X2 2 (-1))
proving (X3 (-3) (-2))
proving (X3 (-1) 0)
proving (X3 0 0)
proving (X3 1 1)
proving (X3 2 (-1))
proving (X90 (-1) (-1))
proving (X90 2 2)
proving (X91 (-1) (-1))
proving (X91 0 (-1))
proving (X91 2 2)
proving (X92 (-3) (-2))
proving (X92 (-1) (-1))
proving (X92 2 2)
proving (X93 (-1) (-1))
proving (X93 2 2)
proving (X94 (-1) (-1))
proving (X94 0 (-2))
proving (X94 1 (-3))
proving (X94 2 2)
proving (X95 (-1) (-1))
proving (X95 2 2)
proving (X96 (-3) (-1))
proving (X96 (-1) (-1))
proving (X96 0 2)
proving (X96 2 2)
*** Example Instances obtained by Resolution:
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-3, 2) => )

************** current phase of 29th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (30): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );..]
*** undecided (204): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );
(X2(-1, 0) /\ X93(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 30th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
table:
FTFFFT_TFTTF_TTFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (15):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
table:
FTFFTT_TFFTTTFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (32):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
table:
FTFFTFF_TTTFTFFTTFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
table:
FTTFFTFFF___TFFFTFFTTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (19):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
table:
FTFTF_TTFFFFFFTFFTT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (18):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
table:
FTFFTF__TFFFFFTTTT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (45):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
table:
FTFTFF_TTFFFF_TFTFTTFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (47):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTF

gen constr of example:(X1(-4, -2) => )
constr: [#S_1576] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -4 + #paramvar225 * -2 < 0
gen constr of example:(X1(-4, 2) => )
constr: [#S_1577] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -4 + #paramvar225 * 2 < 0
gen constr of example:(X1(-3, 2) => )
constr: [#S_1578] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -3 + #paramvar225 * 2 < 0
gen constr of example:(X2(-4, -2) /\ X92(-3, -2) => )
constr: [#S_1579] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -4 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * -4 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -4 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * -4 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -4 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * -4 + #paramvar229 * -2 < 0)
gen constr of example:(X2(-3, 1) /\ X94(0, -2) => )
constr: [#S_1580] (#paramvar350 > 0 \/ #paramvar347 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar346 * -2 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar339 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 < 0)
gen constr of example:(X2(1, 0) /\ X91(0, -1) => )
constr: [#S_1581] (#paramvar308 > 0 \/ #paramvar305 + -#paramvar307 < 0 \/ #paramvar302 + -#paramvar304 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + -#paramvar300 < 0 \/ #paramvar295 + -#paramvar297 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(1, 0) /\ X96(-3, -1) => )
constr: [#S_1582] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * -3 + -#paramvar377 < 0 \/ #paramvar372 + #paramvar373 * -3 + -#paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * -3 + -#paramvar370 < 0 \/ #paramvar365 + #paramvar366 * -3 + -#paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X3(2, -1) => X2(2, -1))
constr: [#S_1583] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 < 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 2 + -#paramvar281 < 0 \/ #paramvar276 + #paramvar277 * 2 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 < 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 2 + -#paramvar270 < 0 \/ #paramvar265 + #paramvar266 * 2 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 < 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 2 + -#paramvar259 < 0 \/ #paramvar254 + #paramvar255 * 2 + -#paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 <= 0 /\ #paramvar248 + #paramvar249 * 2 + -#paramvar250 >= 0 /\ #paramvar245 + #paramvar246 * 2 + -#paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 <= 0 /\ #paramvar239 + #paramvar240 * 2 + -#paramvar241 >= 0 /\ #paramvar236 + #paramvar237 * 2 + -#paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 <= 0 /\ #paramvar230 + #paramvar231 * 2 + -#paramvar232 >= 0 /\ #paramvar227 + #paramvar228 * 2 + -#paramvar229 >= 0
gen constr of example:(X92(-3, -2) => X3(-3, -2))
constr: [#S_1584] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 * -2 >= 0
gen constr of example:(X91(0, -1) => X3(0, 0))
constr: [#S_1585] (#paramvar308 > 0 \/ #paramvar305 + -#paramvar307 < 0 \/ #paramvar302 + -#paramvar304 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + -#paramvar300 < 0 \/ #paramvar295 + -#paramvar297 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 >= 0 /\ #paramvar276 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 >= 0 /\ #paramvar265 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 >= 0 /\ #paramvar254 >= 0
gen constr of example:(X96(0, 2) => X3(0, 0))
constr: [#S_1586] (#paramvar378 > 0 \/ #paramvar375 + #paramvar377 * 2 < 0 \/ #paramvar372 + #paramvar374 * 2 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar370 * 2 < 0 \/ #paramvar365 + #paramvar367 * 2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 >= 0 /\ #paramvar276 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 >= 0 /\ #paramvar265 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 >= 0 /\ #paramvar254 >= 0
gen constr of example:(X94(1, -3) => X3(1, 1))
constr: [#S_1587] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 + #paramvar349 * -3 < 0 \/ #paramvar344 + #paramvar345 + #paramvar346 * -3 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 + #paramvar342 * -3 < 0 \/ #paramvar337 + #paramvar338 + #paramvar339 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 >= 0
gen constr of example:(X2(1, 2) => X3(-1, 0) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_1588] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X2(-3, -1) /\ X2(-4, 3) => X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_1589] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * -3 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -3 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * -3 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -3 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * -3 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -3 + -#paramvar229 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -4 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar246 * -4 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -4 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar237 * -4 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -4 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar228 * -4 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0
bounds constr: [#S_1590] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1591] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1592] true
bounds constr: [#S_1593] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1594] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1595] true
bounds constr: [#S_1596] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1597] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1598] true
bounds constr: [#S_1599] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1600] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1601] true
bounds constr: [#S_1602] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1603] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1604] true
bounds constr: [#S_1605] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1606] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1607] true
bounds constr: [#S_1608] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1609] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1610] true
bounds constr: [#S_1611] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1612] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1613] true
bounds constr: [#S_1614] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1615] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1616] true
bounds constr: [#S_1617] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1618] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1619] true
constraints generated
sat
************** current phase of 30th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ -1 + x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ -1 + x2 != 0 /\ 1 + -x1 + -x2 >= 0 /\ -1 + x1 + x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ -1 + -2 * x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ -1 + -x1 + x2 = 0 /\ -1 + 2 * x1 + -x2 >= 0 /\ -1 + 2 * x1 + -x2 >= 0 \/ 1 + x2 != 0 /\ 2 + -x1 + 2 * x2 >= 0 /\ -1 + x1 + -2 * x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + 2 * x1 >= 0 /\ -x1 + -x2 >= 0 \/ x1 + -x2 != 0 /\ 1 + x1 + -x2 >= 0 /\ -x1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ 2 + x2 >= 0 /\ -2 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 + -x2 >= 0 /\ x1 + x2 >= 0 \/ x1 + -x2 != 0 /\ -2 + -x2 >= 0 /\ x1 + x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -2 * x1 >= 0 /\ -1 + x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0 /\ 2 + -2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
( => X3(-5, -4) \/ X3(-5, 6) \/ X90(-5, -5) \/ X91(-5, -5) \/ X92(-5, -5) \/ X93(-5, -5) \/ X94(-5, -5) \/ X95(-5, -5) \/ X96(-5, -5));
(X2(-2, 3) => X1(-2, 2) \/ X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X2(-3, 1) /\ X94(3, -2) => X1(-3, -2));
(X2(-5, 4) /\ X2(1, -2) => X1(-5, -3) \/ X1(1, -3) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3));
(X2(-7, 6) => X1(-7, -5) \/ X3(-5, -4) \/ X90(-5, -5) \/ X91(-5, -5) \/ X92(-5, -5) \/ X93(-5, -5) \/ X94(-5, -5) \/ X95(-5, -5) \/ X96(-5, -5));
(X2(1, -2) /\ X92(1, -2) => X1(1, -2));
(X2(1, 0) /\ X91(-2, -1) => X1(1, -1));
(X3(-1, 0) /\ X3(2, 0) => X2(2, 0));
(X91(2, 3) => X3(2, -4));
(X92(-1, -2) => X3(-1, -2));
(X94(-1, 1) => X3(-1, 1))

************** current phase of 30th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (30): [
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );
(X1(0, 1) => );
(X1(0, 2) => );..]
*** undecided (215): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 30th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-7) (-5))
  added as a negative example with: 
  add negative example(X1(-7, -5) => )
refuting (X1 (-5) (-3))
  added as a negative example with: 
  add negative example(X1(-5, -3) => )
refuting (X1 1 (-3))
  added as a negative example with: 
  add negative example(X1(1, -3) => )
refuting (X2 (-7) 6)
refuting (X2 (-5) 4)
refuting (X2 (-4) (-2))
refuting (X2 (-4) 3)
refuting (X2 (-3) (-1))
refuting (X2 (-3) 1)
refuting (X2 (-2) 3)
refuting (X2 1 (-2))
refuting (X2 1 0)
refuting (X2 2 0)
refuting (X3 (-5) (-4))
refuting (X3 (-5) 6)
refuting (X3 (-1) (-2))
refuting (X3 (-1) 0)
refuting (X3 (-1) 1)
refuting (X3 2 (-4))
refuting (X3 2 (-1))
refuting (X3 2 0)
refuting (X90 (-5) (-5))
refuting (X90 (-3) (-3))
refuting (X90 2 2)
refuting (X91 (-5) (-5))
refuting (X91 (-3) (-3))
refuting (X91 (-2) (-1))
refuting (X91 2 2)
refuting (X91 2 3)
refuting (X92 (-5) (-5))
refuting (X92 (-3) (-3))
refuting (X92 (-3) (-2))
refuting (X92 (-1) (-2))
refuting (X92 1 (-2))
refuting (X92 2 2)
refuting (X93 (-5) (-5))
refuting (X93 (-3) (-3))
refuting (X93 2 2)
refuting (X94 (-5) (-5))
refuting (X94 (-3) (-3))
refuting (X94 (-1) 1)
refuting (X94 2 2)
refuting (X94 3 (-2))
refuting (X95 (-5) (-5))
refuting (X95 (-3) (-3))
refuting (X95 2 2)
refuting (X96 (-5) (-5))
refuting (X96 (-3) (-3))
refuting (X96 2 2)
proving (X1 (-7) (-5))
proving (X1 (-5) (-3))
proving (X1 (-4) (-2))
proving (X1 (-4) 2)
proving (X1 (-3) 2)
proving (X1 1 (-3))
proving (X2 (-7) 6)
proving (X2 (-5) 4)
proving (X2 (-4) (-2))
proving (X2 (-4) 3)
proving (X2 (-3) (-1))
proving (X2 (-3) 1)
proving (X2 (-2) 3)
proving (X2 1 (-2))
proving (X2 1 0)
proving (X2 2 0)
proving (X3 (-5) (-4))
proving (X3 (-5) 6)
proving (X3 (-1) (-2))
proving (X3 (-1) 0)
proving (X3 (-1) 1)
proving (X3 2 (-4))
proving (X3 2 (-1))
proving (X3 2 0)
proving (X90 (-5) (-5))
proving (X90 (-3) (-3))
proving (X90 2 2)
proving (X91 (-5) (-5))
proving (X91 (-3) (-3))
proving (X91 (-2) (-1))
proving (X91 2 2)
proving (X91 2 3)
proving (X92 (-5) (-5))
proving (X92 (-3) (-3))
proving (X92 (-3) (-2))
proving (X92 (-1) (-2))
proving (X92 1 (-2))
proving (X92 2 2)
proving (X93 (-5) (-5))
proving (X93 (-3) (-3))
proving (X93 2 2)
proving (X94 (-5) (-5))
proving (X94 (-3) (-3))
proving (X94 (-1) 1)
proving (X94 2 2)
proving (X94 3 (-2))
proving (X95 (-5) (-5))
proving (X95 (-3) (-3))
proving (X95 2 2)
proving (X96 (-5) (-5))
proving (X96 (-3) (-3))
proving (X96 2 2)
*** Example Instances obtained by Resolution:
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(1, -3) => )

************** current phase of 30th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (33): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );..]
*** undecided (215): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 31st iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
table:
FTFFTT_TFFTTTFFTT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (35):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (21):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
table:
FTFTF_TTFFFFFFTFFTTTT


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
table:
FTFFTF__TFFFFFTTTTTTFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (48):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
table:
FTFTFF_TTFFFF_TFTFTTFFT


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (49):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTT

gen constr of example:(X1(-7, -5) => )
constr: [#S_1620] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -7 + #paramvar225 * -5 < 0
gen constr of example:(X1(-5, -3) => )
constr: [#S_1621] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -5 + #paramvar225 * -3 < 0
gen constr of example:(X1(1, -3) => )
constr: [#S_1622] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 + #paramvar225 * -3 < 0
gen constr of example:(X2(-3, 1) /\ X94(3, -2) => )
constr: [#S_1623] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 * 3 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar345 * 3 + #paramvar346 * -2 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 * 3 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar338 * 3 + #paramvar339 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 < 0)
gen constr of example:(X2(1, -2) /\ X92(1, -2) => )
constr: [#S_1624] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 + #paramvar318 * -2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 + #paramvar311 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -2 < 0)
gen constr of example:(X2(1, 0) /\ X91(-2, -1) => )
constr: [#S_1625] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * -2 + -#paramvar307 < 0 \/ #paramvar302 + #paramvar303 * -2 + -#paramvar304 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * -2 + -#paramvar300 < 0 \/ #paramvar295 + #paramvar296 * -2 + -#paramvar297 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X3(-1, 0) /\ X3(2, 0) => X2(2, 0))
constr: [#S_1626] (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 2 < 0 \/ #paramvar276 + #paramvar277 * 2 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 2 < 0 \/ #paramvar265 + #paramvar266 * 2 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 2 < 0 \/ #paramvar254 + #paramvar255 * 2 < 0) \/ (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 < 0 \/ #paramvar279 + -#paramvar280 < 0 \/ #paramvar276 + -#paramvar277 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 < 0 \/ #paramvar268 + -#paramvar269 < 0 \/ #paramvar265 + -#paramvar266 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 < 0 \/ #paramvar257 + -#paramvar258 < 0 \/ #paramvar254 + -#paramvar255 < 0) \/ #paramvar251 <= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 2 >= 0 /\ #paramvar245 + #paramvar246 * 2 >= 0 \/ #paramvar242 <= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 2 >= 0 /\ #paramvar236 + #paramvar237 * 2 >= 0 \/ #paramvar233 <= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 2 >= 0 /\ #paramvar227 + #paramvar228 * 2 >= 0
gen constr of example:(X92(-1, -2) => X3(-1, -2))
constr: [#S_1627] (#paramvar322 > 0 \/ #paramvar319 + -#paramvar320 + #paramvar321 * -2 < 0 \/ #paramvar316 + -#paramvar317 + #paramvar318 * -2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + -#paramvar313 + #paramvar314 * -2 < 0 \/ #paramvar309 + -#paramvar310 + #paramvar311 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 * -2 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 * -2 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 * -2 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 * -2 >= 0
gen constr of example:(X94(-1, 1) => X3(-1, 1))
constr: [#S_1628] (#paramvar350 > 0 \/ #paramvar347 + -#paramvar348 + #paramvar349 < 0 \/ #paramvar344 + -#paramvar345 + #paramvar346 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + -#paramvar341 + #paramvar342 < 0 \/ #paramvar337 + -#paramvar338 + #paramvar339 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 >= 0
gen constr of example:(X91(2, 3) => X3(2, -4))
constr: [#S_1629] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 3 < 0 \/ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 3 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 3 < 0 \/ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 * -4 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 * -4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 * -4 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 * -4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 * -4 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 * -4 >= 0
gen constr of example:( => X3(-5, -4) \/ X3(-5, 6) \/ X90(-5, -5) \/ X91(-5, -5) \/ X92(-5, -5) \/ X93(-5, -5) \/ X94(-5, -5) \/ X95(-5, -5) \/ X96(-5, -5))
constr: [#S_1630] #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -5 + #paramvar307 * -5 >= 0 /\ #paramvar302 + #paramvar303 * -5 + #paramvar304 * -5 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -5 + #paramvar300 * -5 >= 0 /\ #paramvar295 + #paramvar296 * -5 + #paramvar297 * -5 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -5 + #paramvar321 * -5 >= 0 /\ #paramvar316 + #paramvar317 * -5 + #paramvar318 * -5 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -5 + #paramvar314 * -5 >= 0 /\ #paramvar309 + #paramvar310 * -5 + #paramvar311 * -5 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -5 + #paramvar335 * -5 >= 0 /\ #paramvar330 + #paramvar331 * -5 + #paramvar332 * -5 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -5 + #paramvar328 * -5 >= 0 /\ #paramvar323 + #paramvar324 * -5 + #paramvar325 * -5 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -5 + #paramvar349 * -5 >= 0 /\ #paramvar344 + #paramvar345 * -5 + #paramvar346 * -5 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -5 + #paramvar342 * -5 >= 0 /\ #paramvar337 + #paramvar338 * -5 + #paramvar339 * -5 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -5 + #paramvar363 * -5 >= 0 /\ #paramvar358 + #paramvar359 * -5 + #paramvar360 * -5 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -5 + #paramvar356 * -5 >= 0 /\ #paramvar351 + #paramvar352 * -5 + #paramvar353 * -5 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -5 + #paramvar377 * -5 >= 0 /\ #paramvar372 + #paramvar373 * -5 + #paramvar374 * -5 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -5 + #paramvar370 * -5 >= 0 /\ #paramvar365 + #paramvar366 * -5 + #paramvar367 * -5 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -5 + #paramvar293 * -5 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -5 + #paramvar289 * -5 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -5 + #paramvar281 * -4 >= 0 /\ #paramvar276 + #paramvar277 * -5 + #paramvar278 * -4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -5 + #paramvar270 * -4 >= 0 /\ #paramvar265 + #paramvar266 * -5 + #paramvar267 * -4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -5 + #paramvar259 * -4 >= 0 /\ #paramvar254 + #paramvar255 * -5 + #paramvar256 * -4 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -5 + #paramvar281 * 6 >= 0 /\ #paramvar276 + #paramvar277 * -5 + #paramvar278 * 6 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -5 + #paramvar270 * 6 >= 0 /\ #paramvar265 + #paramvar266 * -5 + #paramvar267 * 6 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -5 + #paramvar259 * 6 >= 0 /\ #paramvar254 + #paramvar255 * -5 + #paramvar256 * 6 >= 0
gen constr of example:(X2(-7, 6) => X3(-5, -4) \/ X90(-5, -5) \/ X91(-5, -5) \/ X92(-5, -5) \/ X93(-5, -5) \/ X94(-5, -5) \/ X95(-5, -5) \/ X96(-5, -5))
constr: [#S_1631] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -7 + #paramvar250 * 6 < 0 \/ #paramvar245 + #paramvar246 * -7 + #paramvar247 * 6 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -7 + #paramvar241 * 6 < 0 \/ #paramvar236 + #paramvar237 * -7 + #paramvar238 * 6 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -7 + #paramvar232 * 6 < 0 \/ #paramvar227 + #paramvar228 * -7 + #paramvar229 * 6 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -5 + #paramvar307 * -5 >= 0 /\ #paramvar302 + #paramvar303 * -5 + #paramvar304 * -5 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -5 + #paramvar300 * -5 >= 0 /\ #paramvar295 + #paramvar296 * -5 + #paramvar297 * -5 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -5 + #paramvar321 * -5 >= 0 /\ #paramvar316 + #paramvar317 * -5 + #paramvar318 * -5 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -5 + #paramvar314 * -5 >= 0 /\ #paramvar309 + #paramvar310 * -5 + #paramvar311 * -5 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -5 + #paramvar335 * -5 >= 0 /\ #paramvar330 + #paramvar331 * -5 + #paramvar332 * -5 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -5 + #paramvar328 * -5 >= 0 /\ #paramvar323 + #paramvar324 * -5 + #paramvar325 * -5 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -5 + #paramvar349 * -5 >= 0 /\ #paramvar344 + #paramvar345 * -5 + #paramvar346 * -5 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -5 + #paramvar342 * -5 >= 0 /\ #paramvar337 + #paramvar338 * -5 + #paramvar339 * -5 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -5 + #paramvar363 * -5 >= 0 /\ #paramvar358 + #paramvar359 * -5 + #paramvar360 * -5 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -5 + #paramvar356 * -5 >= 0 /\ #paramvar351 + #paramvar352 * -5 + #paramvar353 * -5 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -5 + #paramvar377 * -5 >= 0 /\ #paramvar372 + #paramvar373 * -5 + #paramvar374 * -5 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -5 + #paramvar370 * -5 >= 0 /\ #paramvar365 + #paramvar366 * -5 + #paramvar367 * -5 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -5 + #paramvar293 * -5 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -5 + #paramvar289 * -5 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -5 + #paramvar281 * -4 >= 0 /\ #paramvar276 + #paramvar277 * -5 + #paramvar278 * -4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -5 + #paramvar270 * -4 >= 0 /\ #paramvar265 + #paramvar266 * -5 + #paramvar267 * -4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -5 + #paramvar259 * -4 >= 0 /\ #paramvar254 + #paramvar255 * -5 + #paramvar256 * -4 >= 0
gen constr of example:(X2(-2, 3) => X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_1632] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + -#paramvar256 >= 0
gen constr of example:(X2(-5, 4) /\ X2(1, -2) => X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3))
constr: [#S_1633] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -5 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar246 * -5 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -5 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar237 * -5 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -5 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar228 * -5 + #paramvar229 * 4 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 >= 0 /\ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 >= 0 /\ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -3 >= 0 /\ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -3 >= 0 /\ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -3 >= 0 /\ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -3 >= 0 /\ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -3 + #paramvar349 * -3 >= 0 /\ #paramvar344 + #paramvar345 * -3 + #paramvar346 * -3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -3 + #paramvar342 * -3 >= 0 /\ #paramvar337 + #paramvar338 * -3 + #paramvar339 * -3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 >= 0 /\ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 >= 0 /\ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -3 + #paramvar377 * -3 >= 0 /\ #paramvar372 + #paramvar373 * -3 + #paramvar374 * -3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -3 + #paramvar370 * -3 >= 0 /\ #paramvar365 + #paramvar366 * -3 + #paramvar367 * -3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -3 + #paramvar293 * -3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -3 + #paramvar289 * -3 >= 0
bounds constr: [#S_1634] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1635] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1636] true
bounds constr: [#S_1637] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1638] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1639] true
bounds constr: [#S_1640] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1641] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1642] true
bounds constr: [#S_1643] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1644] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1645] true
bounds constr: [#S_1646] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1647] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1648] true
bounds constr: [#S_1649] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1650] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1651] true
bounds constr: [#S_1652] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1653] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1654] true
bounds constr: [#S_1655] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1656] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1657] true
bounds constr: [#S_1658] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1659] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1660] true
bounds constr: [#S_1661] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1662] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1663] true
constraints generated
sat
************** current phase of 31st iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ -1 + x1 + -x2 >= 0 \/ 1 + x2 != 0 /\ 1 + -x2 >= 0 /\ -1 + x1 + x2 >= 0 \/ x2 = 0 /\ 1 + x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 * x1 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ -2 + -2 * x1 + x2 >= 0 /\ 1 + x1 + -2 * x2 >= 0 \/ -1 + x2 = 0 /\ -1 + x1 + x2 = 0 /\ 1 + -x1 >= 0 /\ 1 + -2 * x1 + -x2 >= 0 \/ 2 + -2 * x1 + -x2 >= 0 /\ -1 + 2 * x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 1 + 2 * x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + x1 + x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ -x1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + x1 >= 0 /\ x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  -x1 >= 0 /\ -2 + x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + 2 * x2 >= 0 /\ -x1 + x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x1 >= 0 /\ -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0 /\ -1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 1 + -2 * x2 >= 0 /\ -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ x1 >= 0 /\ -1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ 2 + -2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(0, 1) /\ X90(3, 2) => X1(0, 2));
(X2(1, 1) /\ X94(0, 0) => X1(1, 0));
(X2(3, -2) /\ X93(2, 2) => X1(3, 2));
(X2(3, -2) => X1(3, -3) \/ X3(-3, 4) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3));
(X3(-1, 3) => X2(-1, 3));
(X90(3, 2) => X3(3, 1));
(X92(2, 2) => X3(2, 2));
(X93(3, 3) => X3(3, -3));
(X95(-4, 0) => X3(-4, -1))

************** current phase of 31st iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (33): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );..]
*** undecided (224): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 31st iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 3 (-3))
  added as a negative example with: 
  add negative example(X1(3, -3) => )
refuting (X2 (-7) 6)
refuting (X2 (-5) 4)
refuting (X2 (-1) 3)
refuting (X2 0 1)
refuting (X2 1 (-2))
refuting (X2 1 1)
refuting (X2 3 (-2))
refuting (X3 (-5) (-4))
refuting (X3 (-4) (-1))
refuting (X3 (-3) 4)
refuting (X3 (-1) 3)
refuting (X3 2 2)
refuting (X3 3 (-3))
refuting (X3 3 1)
refuting (X90 (-5) (-5))
refuting (X90 (-3) (-3))
refuting (X90 3 2)
refuting (X91 (-5) (-5))
refuting (X91 (-3) (-3))
refuting (X92 (-5) (-5))
refuting (X92 (-3) (-3))
refuting (X92 2 2)
refuting (X93 (-5) (-5))
refuting (X93 (-3) (-3))
refuting (X93 2 2)
refuting (X93 3 3)
refuting (X94 (-5) (-5))
refuting (X94 (-3) (-3))
refuting (X94 0 0)
refuting (X95 (-5) (-5))
refuting (X95 (-4) 0)
refuting (X95 (-3) (-3))
refuting (X96 (-5) (-5))
refuting (X96 (-3) (-3))
proving (X1 (-7) (-5))
proving (X1 (-5) (-3))
proving (X1 1 (-3))
proving (X1 3 (-3))
proving (X2 (-7) 6)
proving (X2 (-5) 4)
proving (X2 (-1) 3)
proving (X2 0 1)
proving (X2 1 (-2))
proving (X2 1 1)
proving (X2 3 (-2))
proving (X3 (-5) (-4))
proving (X3 (-4) (-1))
proving (X3 (-3) 4)
proving (X3 (-1) 3)
proving (X3 2 2)
proving (X3 3 (-3))
proving (X3 3 1)
proving (X90 (-5) (-5))
proving (X90 (-3) (-3))
proving (X90 3 2)
proving (X91 (-5) (-5))
proving (X91 (-3) (-3))
proving (X92 (-5) (-5))
proving (X92 (-3) (-3))
proving (X92 2 2)
proving (X93 (-5) (-5))
proving (X93 (-3) (-3))
proving (X93 2 2)
proving (X93 3 3)
proving (X94 (-5) (-5))
proving (X94 (-3) (-3))
proving (X94 0 0)
proving (X95 (-5) (-5))
proving (X95 (-4) 0)
proving (X95 (-3) (-3))
proving (X96 (-5) (-5))
proving (X96 (-3) (-3))
*** Example Instances obtained by Resolution:
(X1(3, -3) => )

************** current phase of 31st iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (34): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );..]
*** undecided (224): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );
(X2(-1, -1) /\ X95(0, 0) => );
(X2(-1, 0) /\ X92(1, 0) => );..]

*** labeling with SAT solving
************** current phase of 32nd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (17):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
table:
FTFFTT_TFFTTTFFTT


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (36):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
table:
FTFTF_TTFFFFFFTFFTTTTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
table:
FTFFTF__TFFFFFTTTTTTFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (53):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
table:
FTFTFF_TTFFFF_TFTFTTFFTF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (50):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTT

gen constr of example:(X1(3, -3) => )
constr: [#S_1664] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 3 + #paramvar225 * -3 < 0
gen constr of example:(X2(0, 1) /\ X90(3, 2) => )
constr: [#S_1665] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 * 3 + #paramvar293 * 2 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 * 3 + #paramvar289 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X2(1, 1) /\ X94(0, 0) => )
constr: [#S_1666] (#paramvar350 < 0 \/ #paramvar347 < 0 \/ #paramvar344 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 < 0 \/ #paramvar337 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(3, -2) /\ X93(2, 2) => )
constr: [#S_1667] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 < 0 \/ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 < 0 \/ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 * -2 < 0)
gen constr of example:(X3(-1, 3) => X2(-1, 3))
constr: [#S_1668] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar280 + #paramvar281 * 3 < 0 \/ #paramvar276 + -#paramvar277 + #paramvar278 * 3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar269 + #paramvar270 * 3 < 0 \/ #paramvar265 + -#paramvar266 + #paramvar267 * 3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar258 + #paramvar259 * 3 < 0 \/ #paramvar254 + -#paramvar255 + #paramvar256 * 3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + -#paramvar249 + #paramvar250 * 3 >= 0 /\ #paramvar245 + -#paramvar246 + #paramvar247 * 3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + -#paramvar240 + #paramvar241 * 3 >= 0 /\ #paramvar236 + -#paramvar237 + #paramvar238 * 3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + -#paramvar231 + #paramvar232 * 3 >= 0 /\ #paramvar227 + -#paramvar228 + #paramvar229 * 3 >= 0
gen constr of example:(X95(-4, 0) => X3(-4, -1))
constr: [#S_1669] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * -4 < 0 \/ #paramvar358 + #paramvar359 * -4 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * -4 < 0 \/ #paramvar351 + #paramvar352 * -4 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -4 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -4 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -4 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -4 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -4 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -4 + -#paramvar256 >= 0
gen constr of example:(X92(2, 2) => X3(2, 2))
constr: [#S_1670] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 * 2 >= 0
gen constr of example:(X93(3, 3) => X3(3, -3))
constr: [#S_1671] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * 3 + #paramvar335 * 3 < 0 \/ #paramvar330 + #paramvar331 * 3 + #paramvar332 * 3 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * 3 + #paramvar328 * 3 < 0 \/ #paramvar323 + #paramvar324 * 3 + #paramvar325 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 * -3 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 * -3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 * -3 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 * -3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 * -3 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 * -3 >= 0
gen constr of example:(X90(3, 2) => X3(3, 1))
constr: [#S_1672] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 * 3 + #paramvar293 * 2 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 * 3 + #paramvar289 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 >= 0
gen constr of example:(X2(3, -2) => X3(-3, 4) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3))
constr: [#S_1673] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 * -2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 >= 0 /\ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 >= 0 /\ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -3 >= 0 /\ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -3 >= 0 /\ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -3 >= 0 /\ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -3 >= 0 /\ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -3 + #paramvar349 * -3 >= 0 /\ #paramvar344 + #paramvar345 * -3 + #paramvar346 * -3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -3 + #paramvar342 * -3 >= 0 /\ #paramvar337 + #paramvar338 * -3 + #paramvar339 * -3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 >= 0 /\ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 >= 0 /\ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -3 + #paramvar377 * -3 >= 0 /\ #paramvar372 + #paramvar373 * -3 + #paramvar374 * -3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -3 + #paramvar370 * -3 >= 0 /\ #paramvar365 + #paramvar366 * -3 + #paramvar367 * -3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -3 + #paramvar293 * -3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -3 + #paramvar289 * -3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 * 4 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 * 4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 * 4 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 * 4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 * 4 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 * 4 >= 0
bounds constr: [#S_1674] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1675] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1676] true
bounds constr: [#S_1677] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1678] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1679] true
bounds constr: [#S_1680] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1681] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1682] true
bounds constr: [#S_1683] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1684] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1685] true
bounds constr: [#S_1686] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1687] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1688] true
bounds constr: [#S_1689] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1690] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1691] true
bounds constr: [#S_1692] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1693] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1694] true
bounds constr: [#S_1695] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1696] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1697] true
bounds constr: [#S_1698] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1699] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1700] true
bounds constr: [#S_1701] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1702] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1703] true
constraints generated
sat
************** current phase of 32nd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ -x1 + -x2 >= 0 \/ x2 = 0 /\ -1 + x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ 1 + -x1 + x2 >= 0 \/ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ -1 + -2 * x1 + -x2 >= 0 /\ 2 + 2 * x2 >= 0 \/ 1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ -1 + x1 + x2 != 0 /\ 1 + x1 + -2 * x2 >= 0 /\ -1 + -x1 + 2 * x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + 2 * x2 >= 0 /\ -x1 + -x2 >= 0 \/ x1 + -x2 != 0 /\ -2 + -x2 >= 0 /\ 1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + -x1 + x2 >= 0 /\ -1 + -x1 + -x2 >= 0 \/ -2 + -x1 + x2 >= 0 /\ -x1 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ x1 + -x2 >= 0 /\ -2 + -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + x1 + x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + 2 * x1 >= 0 /\ 2 + -x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + x1 + x2 >= 0 /\ -2 + x1 >= 0
X96(x1: int, x2: int) :=
  -1 + -x1 + x2 >= 0 /\ -2 + -2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -1) /\ X91(0, 0) => X1(-1, 0));
(X2(-1, -1) /\ X95(2, 2) => X1(-1, 2));
(X2(-2, 0) /\ X92(-2, 0) => X1(-2, 0));
(X2(-2, 0) /\ X96(-2, -1) => X1(-2, -1));
(X2(-2, 1) /\ X94(1, 1) => X1(-2, 1));
(X2(-3, 2) /\ X93(-2, -2) => X1(-3, -2));
(X3(-1, 0) /\ X3(-2, 0) => X2(-1, 0));
(X92(-1, 2) => X3(-1, 2));
(X95(2, 2) => X3(2, -1))

************** current phase of 32nd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (34): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );
(X1(0, -2) => );
(X1(0, -1) => );..]
*** undecided (233): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );
(X2(-1, -2) /\ X93(2, 2) => );
(X2(-1, -1) /\ X90(0, 0) => );..]

*** labeling with SAT solving
************** current phase of 32nd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-2) 0)
  added as a negative example with: 
  add negative example(X1(-2, 0) => )
refuting (X1 (-2) 1)
  added as a negative example with: 
  add negative example(X1(-2, 1) => )
refuting (X2 (-3) 2)
refuting (X2 (-2) 0)
refuting (X2 (-2) 1)
refuting (X2 (-1) (-1))
refuting (X2 (-1) 0)
refuting (X2 3 (-2))
refuting (X3 (-3) 4)
refuting (X3 (-2) 0)
refuting (X3 (-1) 0)
refuting (X3 (-1) 2)
refuting (X3 2 (-1))
refuting (X90 (-3) (-3))
refuting (X91 (-3) (-3))
refuting (X91 0 0)
refuting (X92 (-3) (-3))
refuting (X92 (-2) 0)
refuting (X92 (-1) 2)
refuting (X93 (-3) (-3))
refuting (X93 (-2) (-2))
refuting (X94 (-3) (-3))
refuting (X94 1 1)
refuting (X95 (-3) (-3))
refuting (X95 2 2)
refuting (X96 (-3) (-3))
refuting (X96 (-2) (-1))
proving (X1 (-2) 0)
proving (X1 (-2) 1)
proving (X1 3 (-3))
proving (X2 (-3) 2)
proving (X2 (-2) 0)
proving (X2 (-2) 1)
proving (X2 (-1) (-1))
proving (X2 (-1) 0)
proving (X2 3 (-2))
proving (X3 (-3) 4)
proving (X3 (-2) 0)
proving (X3 (-1) 0)
proving (X3 (-1) 2)
proving (X3 2 (-1))
proving (X90 (-3) (-3))
proving (X91 (-3) (-3))
proving (X91 0 0)
proving (X92 (-3) (-3))
proving (X92 (-2) 0)
proving (X92 (-1) 2)
proving (X93 (-3) (-3))
proving (X93 (-2) (-2))
proving (X94 (-3) (-3))
proving (X94 1 1)
proving (X95 (-3) (-3))
proving (X95 2 2)
proving (X96 (-3) (-3))
proving (X96 (-2) (-1))
*** Example Instances obtained by Resolution:
(X1(-2, 0) => );
(X1(-2, 1) => )

************** current phase of 32nd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (36): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (233): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );..]

*** labeling with SAT solving
************** current phase of 33rd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (18):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
table:
FTFFTT_TFFTTTFFTTF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (38):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTT


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
table:
FTFTF_TTFFFFFFTFFTTTTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
table:
FTFFTF__TFFFFFTTTTTTFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (53):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
table:
FTFTFF_TTFFFF_TFTFTTFFTF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (50):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTT

gen constr of example:(X1(-2, 0) => )
constr: [#S_1704] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -2 < 0
gen constr of example:(X1(-2, 1) => )
constr: [#S_1705] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -2 + #paramvar225 < 0
gen constr of example:(X2(-3, 2) /\ X93(-2, -2) => )
constr: [#S_1706] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 2 < 0)
gen constr of example:(X2(-2, 0) /\ X92(-2, 0) => )
constr: [#S_1707] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -2 < 0 \/ #paramvar316 + #paramvar317 * -2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -2 < 0 \/ #paramvar309 + #paramvar310 * -2 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0)
gen constr of example:(X2(-2, 0) /\ X96(-2, -1) => )
constr: [#S_1708] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * -2 + -#paramvar377 < 0 \/ #paramvar372 + #paramvar373 * -2 + -#paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * -2 + -#paramvar370 < 0 \/ #paramvar365 + #paramvar366 * -2 + -#paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0)
gen constr of example:(X2(-2, 1) /\ X94(1, 1) => )
constr: [#S_1709] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 + #paramvar349 < 0 \/ #paramvar344 + #paramvar345 + #paramvar346 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 + #paramvar342 < 0 \/ #paramvar337 + #paramvar338 + #paramvar339 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 < 0)
gen constr of example:(X2(-1, -1) /\ X91(0, 0) => )
constr: [#S_1710] (#paramvar308 < 0 \/ #paramvar305 < 0 \/ #paramvar302 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 < 0 \/ #paramvar295 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(-1, -1) /\ X95(2, 2) => )
constr: [#S_1711] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 < 0 \/ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 < 0 \/ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + -#paramvar229 < 0)
gen constr of example:(X3(-1, 0) /\ X3(-2, 0) => X2(-1, 0))
constr: [#S_1712] (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 < 0 \/ #paramvar276 + #paramvar277 * -2 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 < 0 \/ #paramvar265 + #paramvar266 * -2 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 < 0 \/ #paramvar254 + #paramvar255 * -2 < 0) \/ (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 < 0 \/ #paramvar279 + -#paramvar280 < 0 \/ #paramvar276 + -#paramvar277 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 < 0 \/ #paramvar268 + -#paramvar269 < 0 \/ #paramvar265 + -#paramvar266 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 < 0 \/ #paramvar257 + -#paramvar258 < 0 \/ #paramvar254 + -#paramvar255 < 0) \/ #paramvar251 <= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + -#paramvar249 >= 0 /\ #paramvar245 + -#paramvar246 >= 0 \/ #paramvar242 <= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + -#paramvar240 >= 0 /\ #paramvar236 + -#paramvar237 >= 0 \/ #paramvar233 <= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + -#paramvar231 >= 0 /\ #paramvar227 + -#paramvar228 >= 0
gen constr of example:(X92(-1, 2) => X3(-1, 2))
constr: [#S_1713] (#paramvar322 > 0 \/ #paramvar319 + -#paramvar320 + #paramvar321 * 2 < 0 \/ #paramvar316 + -#paramvar317 + #paramvar318 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + -#paramvar313 + #paramvar314 * 2 < 0 \/ #paramvar309 + -#paramvar310 + #paramvar311 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 * 2 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 * 2 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 * 2 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 * 2 >= 0
gen constr of example:(X95(2, 2) => X3(2, -1))
constr: [#S_1714] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 < 0 \/ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 < 0 \/ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + -#paramvar256 >= 0
bounds constr: [#S_1715] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1716] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1717] true
bounds constr: [#S_1718] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1719] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1720] true
bounds constr: [#S_1721] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1722] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1723] true
bounds constr: [#S_1724] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1725] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1726] true
bounds constr: [#S_1727] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1728] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1729] true
bounds constr: [#S_1730] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1731] true
bounds constr: [#S_1732] true
bounds constr: [#S_1733] true
bounds constr: [#S_1734] true
bounds constr: [#S_1735] true
bounds constr: [#S_1736] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1737] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1738] true
bounds constr: [#S_1739] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1740] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1741] true
bounds constr: [#S_1742] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1743] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1744] true
constraints generated
sat
************** current phase of 33rd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ 1 + x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ -1 + -x1 >= 0 \/ -1 + x2 != 0 /\ 1 + x2 != 0 /\ 2 * x1 >= 0 /\ -x1 + -x2 >= 0 \/ -1 + x1 + x2 >= 0 /\ -1 + x1 >= 0
X3(x1: int, x2: int) :=
  -2 + -2 * x1 + x2 >= 0 /\ 1 + x1 + -2 * x2 >= 0 \/ 2 * x1 + -x2 >= 0 /\ 2 * x1 + x2 >= 0 \/ 1 + x2 != 0 /\ -2 + -2 * x1 + -x2 >= 0 /\ -2 + 2 * x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + x1 + -x2 >= 0 /\ -1 + 2 * x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + x1 + -x2 >= 0 /\ x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ -1 + -x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  -x2 >= 0 /\ -1 + x1 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 != 0 /\ -1 + -x1 + x2 >= 0 /\ x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x2 >= 0 /\ 2 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 + x2 >= 0 /\ -1 + x1 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + x1 + x2 >= 0 /\ 1 + -x1 + -x2 >= 0 \/ -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(0, -2) /\ X92(-2, -2) => X1(0, -2));
(X2(0, 0) /\ X2(1, 2) => X1(0, -1) \/ X1(1, -1) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(0, 0) /\ X96(0, -1) => X1(0, -1));
(X2(0, 0) => X1(0, -1) \/ X3(-1, 2) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(1, 0) /\ X93(1, 0) => X1(1, 0));
(X2(2, -1) /\ X95(1, 1) => X1(2, 1));
(X2(3, -2) /\ X91(3, 1) => X1(3, 1));
(X3(-5, -2) /\ X3(0, -2) => X2(-5, -2));
(X93(1, -3) => X3(1, 3));
(X96(-2, 1) => X3(-2, 0))

************** current phase of 33rd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (36): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (243): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );..]

*** labeling with SAT solving
************** current phase of 33rd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 3 1)
  added as a negative example with: 
  add negative example(X1(3, 1) => )
refuting (X2 (-5) (-2))
refuting (X2 (-2) 0)
refuting (X2 (-2) 1)
refuting (X2 0 (-2))
refuting (X2 0 0)
refuting (X2 1 0)
refuting (X2 1 2)
refuting (X2 2 (-1))
refuting (X2 3 (-2))
refuting (X3 (-5) (-2))
refuting (X3 (-2) 0)
refuting (X3 (-1) 2)
refuting (X3 0 (-2))
refuting (X3 1 3)
refuting (X90 (-1) (-1))
refuting (X91 (-1) (-1))
refuting (X91 3 1)
refuting (X92 (-2) (-2))
refuting (X92 (-2) 0)
refuting (X92 (-1) (-1))
refuting (X93 (-1) (-1))
refuting (X93 1 (-3))
refuting (X93 1 0)
refuting (X94 (-1) (-1))
refuting (X94 1 1)
refuting (X95 (-1) (-1))
refuting (X95 1 1)
refuting (X96 (-2) 1)
refuting (X96 (-1) (-1))
refuting (X96 0 (-1))
proving (X1 (-2) 0)
proving (X1 (-2) 1)
proving (X1 3 1)
proving (X2 (-5) (-2))
proving (X2 (-2) 0)
proving (X2 (-2) 1)
proving (X2 0 (-2))
proving (X2 0 0)
proving (X2 1 0)
proving (X2 1 2)
proving (X2 2 (-1))
proving (X2 3 (-2))
proving (X3 (-5) (-2))
proving (X3 (-2) 0)
proving (X3 (-1) 2)
proving (X3 0 (-2))
proving (X3 1 3)
proving (X90 (-1) (-1))
proving (X91 (-1) (-1))
proving (X91 3 1)
proving (X92 (-2) (-2))
proving (X92 (-2) 0)
proving (X92 (-1) (-1))
proving (X93 (-1) (-1))
proving (X93 1 (-3))
proving (X93 1 0)
proving (X94 (-1) (-1))
proving (X94 1 1)
proving (X95 (-1) (-1))
proving (X95 1 1)
proving (X96 (-2) 1)
proving (X96 (-1) (-1))
proving (X96 0 (-1))
*** Example Instances obtained by Resolution:
(X1(3, 1) => )

************** current phase of 33rd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (37): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (243): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );..]

*** labeling with SAT solving
************** current phase of 34th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (20):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
table:
FTFFTT_TFFTTTFFTTFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (39):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
table:
FTFTF_TTFFFFFFTFFTTTTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
table:
FTFFTF__TFFFFFTTTTTTFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (54):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
table:
FTFTFF_TTFFFF_TFTFTTFFTF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (51):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTT

gen constr of example:(X1(3, 1) => )
constr: [#S_1745] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 3 + #paramvar225 < 0
gen constr of example:(X2(0, -2) /\ X92(-2, -2) => )
constr: [#S_1746] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar229 * -2 < 0)
gen constr of example:(X2(0, 0) /\ X96(0, -1) => )
constr: [#S_1747] (#paramvar378 > 0 \/ #paramvar375 + -#paramvar377 < 0 \/ #paramvar372 + -#paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + -#paramvar370 < 0 \/ #paramvar365 + -#paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X2(1, 0) /\ X93(1, 0) => )
constr: [#S_1748] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 < 0 \/ #paramvar330 + #paramvar331 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 < 0 \/ #paramvar323 + #paramvar324 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(2, -1) /\ X95(1, 1) => )
constr: [#S_1749] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 + #paramvar363 < 0 \/ #paramvar358 + #paramvar359 + #paramvar360 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 + #paramvar356 < 0 \/ #paramvar351 + #paramvar352 + #paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + -#paramvar229 < 0)
gen constr of example:(X2(3, -2) /\ X91(3, 1) => )
constr: [#S_1750] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * 3 + #paramvar307 < 0 \/ #paramvar302 + #paramvar303 * 3 + #paramvar304 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * 3 + #paramvar300 < 0 \/ #paramvar295 + #paramvar296 * 3 + #paramvar297 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 * -2 < 0)
gen constr of example:(X3(-5, -2) /\ X3(0, -2) => X2(-5, -2))
constr: [#S_1751] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -5 + #paramvar281 * -2 < 0 \/ #paramvar276 + #paramvar277 * -5 + #paramvar278 * -2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -5 + #paramvar270 * -2 < 0 \/ #paramvar265 + #paramvar266 * -5 + #paramvar267 * -2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -5 + #paramvar259 * -2 < 0 \/ #paramvar254 + #paramvar255 * -5 + #paramvar256 * -2 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar281 * -2 < 0 \/ #paramvar276 + #paramvar278 * -2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar270 * -2 < 0 \/ #paramvar265 + #paramvar267 * -2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar259 * -2 < 0 \/ #paramvar254 + #paramvar256 * -2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -5 + #paramvar250 * -2 >= 0 /\ #paramvar245 + #paramvar246 * -5 + #paramvar247 * -2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -5 + #paramvar241 * -2 >= 0 /\ #paramvar236 + #paramvar237 * -5 + #paramvar238 * -2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -5 + #paramvar232 * -2 >= 0 /\ #paramvar227 + #paramvar228 * -5 + #paramvar229 * -2 >= 0
gen constr of example:(X96(-2, 1) => X3(-2, 0))
constr: [#S_1752] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * -2 + #paramvar377 < 0 \/ #paramvar372 + #paramvar373 * -2 + #paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * -2 + #paramvar370 < 0 \/ #paramvar365 + #paramvar366 * -2 + #paramvar367 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -2 >= 0
gen constr of example:(X93(1, -3) => X3(1, 3))
constr: [#S_1753] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 + #paramvar335 * -3 < 0 \/ #paramvar330 + #paramvar331 + #paramvar332 * -3 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 + #paramvar328 * -3 < 0 \/ #paramvar323 + #paramvar324 + #paramvar325 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 * 3 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 * 3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 * 3 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 * 3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 * 3 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 * 3 >= 0
gen constr of example:(X2(0, 0) => X3(-1, 2) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_1754] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 * 2 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 * 2 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 * 2 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 * 2 >= 0
gen constr of example:(X2(0, 0) /\ X2(1, 2) => X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_1755] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0
bounds constr: [#S_1756] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1757] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1758] true
bounds constr: [#S_1759] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1760] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1761] true
bounds constr: [#S_1762] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1763] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1764] true
bounds constr: [#S_1765] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1766] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1767] true
bounds constr: [#S_1768] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1769] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1770] true
bounds constr: [#S_1771] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1772] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1773] true
bounds constr: [#S_1774] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1775] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1776] true
bounds constr: [#S_1777] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1778] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1779] true
bounds constr: [#S_1780] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1781] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1782] true
bounds constr: [#S_1783] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1784] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1785] true
constraints generated
sat
************** current phase of 34th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ x1 + -x2 >= 0 /\ 2 + -2 * x1 >= 0 \/ 2 * x1 >= 0 /\ 2 + -x1 >= 0 \/ -1 + x1 + x2 >= 0 /\ -1 + 2 * x1 >= 0
X3(x1: int, x2: int) :=
  -1 + -x2 >= 0 /\ x1 + -2 * x2 >= 0 \/ 2 * x1 + -x2 >= 0 /\ 2 * x1 + x2 >= 0 \/ -2 + -2 * x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  -2 + x2 >= 0 /\ -1 + -x1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x2 >= 0 /\ x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0 /\ -1 + -x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  false
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + -x1 + x2 >= 0 /\ x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 >= 0 /\ 2 + -x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + x1 + x2 >= 0 /\ -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -2) /\ X2(2, 4) => X1(-1, 3) \/ X1(2, 3) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3));
(X2(0, -3) /\ X91(0, 2) => X1(0, 2));
(X2(1, 0) /\ X96(0, 0) => X1(1, 0));
(X2(2, -1) /\ X95(-1, -1) => X1(2, -1));
(X2(2, 0) /\ X92(0, 0) => X1(2, 0));
(X3(-3, -5) /\ X3(-6, -5) => X2(-6, -5));
(X91(-7, 2) => X3(-7, -3));
(X95(-3, -3) => X3(-3, -1))

************** current phase of 34th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (37): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (251): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );..]

*** labeling with SAT solving
************** current phase of 34th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 2 (-1))
  added as a negative example with: 
  add negative example(X1(2, -1) => )
refuting (X1 2 0)
  added as a negative example with: 
  add negative example(X1(2, 0) => )
refuting (X1 2 3)
  added as a negative example with: 
  add negative example(X1(2, 3) => )
refuting (X2 (-6) (-5))
refuting (X2 (-1) (-2))
refuting (X2 0 (-3))
refuting (X2 1 0)
refuting (X2 2 (-1))
refuting (X2 2 0)
refuting (X2 2 4)
refuting (X2 3 (-2))
refuting (X3 (-7) (-3))
refuting (X3 (-6) (-5))
refuting (X3 (-3) (-5))
refuting (X3 (-3) (-1))
refuting (X90 3 3)
refuting (X91 (-7) 2)
refuting (X91 0 2)
refuting (X91 3 1)
refuting (X91 3 3)
refuting (X92 0 0)
refuting (X92 3 3)
refuting (X93 3 3)
refuting (X94 3 3)
refuting (X95 (-3) (-3))
refuting (X95 (-1) (-1))
refuting (X95 3 3)
refuting (X96 0 0)
refuting (X96 3 3)
proving (X1 2 (-1))
proving (X1 2 0)
proving (X1 2 3)
proving (X1 3 1)
proving (X2 (-6) (-5))
proving (X2 (-1) (-2))
proving (X2 0 (-3))
proving (X2 1 0)
proving (X2 2 (-1))
proving (X2 2 0)
proving (X2 2 4)
proving (X2 3 (-2))
proving (X3 (-7) (-3))
proving (X3 (-6) (-5))
proving (X3 (-3) (-5))
proving (X3 (-3) (-1))
proving (X90 3 3)
proving (X91 (-7) 2)
proving (X91 0 2)
proving (X91 3 1)
proving (X91 3 3)
proving (X92 0 0)
proving (X92 3 3)
proving (X93 3 3)
proving (X94 3 3)
proving (X95 (-3) (-3))
proving (X95 (-1) (-1))
proving (X95 3 3)
proving (X96 0 0)
proving (X96 3 3)
*** Example Instances obtained by Resolution:
(X1(2, -1) => );
(X1(2, 0) => );
(X1(2, 3) => )

************** current phase of 34th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (40): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (251): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );..]

*** labeling with SAT solving
************** current phase of 35th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (20):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
table:
FTFFTT_TFFTTTFFTTFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (42):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
table:
FTFTF_TTFFFFFFTFFTTTTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
table:
FTFFTF__TFFFFFTTTTTTFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (57):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
table:
FTFTFF_TTFFFF_TFTFTTFFTF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (53):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTT

gen constr of example:(X1(2, -1) => )
constr: [#S_1786] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 2 + -#paramvar225 < 0
gen constr of example:(X1(2, 0) => )
constr: [#S_1787] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 2 < 0
gen constr of example:(X1(2, 3) => )
constr: [#S_1788] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 2 + #paramvar225 * 3 < 0
gen constr of example:(X2(0, -3) /\ X91(0, 2) => )
constr: [#S_1789] (#paramvar308 > 0 \/ #paramvar305 + #paramvar307 * 2 < 0 \/ #paramvar302 + #paramvar304 * 2 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar300 * 2 < 0 \/ #paramvar295 + #paramvar297 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar229 * -3 < 0)
gen constr of example:(X2(1, 0) /\ X96(0, 0) => )
constr: [#S_1790] (#paramvar378 < 0 \/ #paramvar375 < 0 \/ #paramvar372 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 < 0 \/ #paramvar365 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(2, -1) /\ X95(-1, -1) => )
constr: [#S_1791] (#paramvar364 < 0 \/ #paramvar361 + -#paramvar362 + -#paramvar363 < 0 \/ #paramvar358 + -#paramvar359 + -#paramvar360 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + -#paramvar355 + -#paramvar356 < 0 \/ #paramvar351 + -#paramvar352 + -#paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + -#paramvar229 < 0)
gen constr of example:(X2(2, 0) /\ X92(0, 0) => )
constr: [#S_1792] (#paramvar322 < 0 \/ #paramvar319 < 0 \/ #paramvar316 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 < 0 \/ #paramvar309 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 < 0 \/ #paramvar245 + #paramvar246 * 2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 < 0 \/ #paramvar236 + #paramvar237 * 2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 < 0 \/ #paramvar227 + #paramvar228 * 2 < 0)
gen constr of example:(X3(-3, -5) /\ X3(-6, -5) => X2(-6, -5))
constr: [#S_1793] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -3 + #paramvar281 * -5 < 0 \/ #paramvar276 + #paramvar277 * -3 + #paramvar278 * -5 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -3 + #paramvar270 * -5 < 0 \/ #paramvar265 + #paramvar266 * -3 + #paramvar267 * -5 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -3 + #paramvar259 * -5 < 0 \/ #paramvar254 + #paramvar255 * -3 + #paramvar256 * -5 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 < 0 \/ #paramvar279 + #paramvar280 * -6 + #paramvar281 * -5 < 0 \/ #paramvar276 + #paramvar277 * -6 + #paramvar278 * -5 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 < 0 \/ #paramvar268 + #paramvar269 * -6 + #paramvar270 * -5 < 0 \/ #paramvar265 + #paramvar266 * -6 + #paramvar267 * -5 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 < 0 \/ #paramvar257 + #paramvar258 * -6 + #paramvar259 * -5 < 0 \/ #paramvar254 + #paramvar255 * -6 + #paramvar256 * -5 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -6 + #paramvar250 * -5 >= 0 /\ #paramvar245 + #paramvar246 * -6 + #paramvar247 * -5 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -6 + #paramvar241 * -5 >= 0 /\ #paramvar236 + #paramvar237 * -6 + #paramvar238 * -5 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -6 + #paramvar232 * -5 >= 0 /\ #paramvar227 + #paramvar228 * -6 + #paramvar229 * -5 >= 0
gen constr of example:(X91(-7, 2) => X3(-7, -3))
constr: [#S_1794] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * -7 + #paramvar307 * 2 < 0 \/ #paramvar302 + #paramvar303 * -7 + #paramvar304 * 2 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * -7 + #paramvar300 * 2 < 0 \/ #paramvar295 + #paramvar296 * -7 + #paramvar297 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -7 + #paramvar281 * -3 >= 0 /\ #paramvar276 + #paramvar277 * -7 + #paramvar278 * -3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -7 + #paramvar270 * -3 >= 0 /\ #paramvar265 + #paramvar266 * -7 + #paramvar267 * -3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -7 + #paramvar259 * -3 >= 0 /\ #paramvar254 + #paramvar255 * -7 + #paramvar256 * -3 >= 0
gen constr of example:(X95(-3, -3) => X3(-3, -1))
constr: [#S_1795] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 < 0 \/ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 < 0 \/ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -3 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -3 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -3 + -#paramvar256 >= 0
gen constr of example:(X2(-1, -2) /\ X2(2, 4) => X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3))
constr: [#S_1796] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 * 4 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 3 + #paramvar307 * 3 >= 0 /\ #paramvar302 + #paramvar303 * 3 + #paramvar304 * 3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 3 + #paramvar300 * 3 >= 0 /\ #paramvar295 + #paramvar296 * 3 + #paramvar297 * 3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 3 + #paramvar321 * 3 >= 0 /\ #paramvar316 + #paramvar317 * 3 + #paramvar318 * 3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 3 + #paramvar314 * 3 >= 0 /\ #paramvar309 + #paramvar310 * 3 + #paramvar311 * 3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 3 + #paramvar335 * 3 >= 0 /\ #paramvar330 + #paramvar331 * 3 + #paramvar332 * 3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 3 + #paramvar328 * 3 >= 0 /\ #paramvar323 + #paramvar324 * 3 + #paramvar325 * 3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 3 + #paramvar349 * 3 >= 0 /\ #paramvar344 + #paramvar345 * 3 + #paramvar346 * 3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 3 + #paramvar342 * 3 >= 0 /\ #paramvar337 + #paramvar338 * 3 + #paramvar339 * 3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 3 + #paramvar363 * 3 >= 0 /\ #paramvar358 + #paramvar359 * 3 + #paramvar360 * 3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 3 + #paramvar356 * 3 >= 0 /\ #paramvar351 + #paramvar352 * 3 + #paramvar353 * 3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 3 + #paramvar377 * 3 >= 0 /\ #paramvar372 + #paramvar373 * 3 + #paramvar374 * 3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 3 + #paramvar370 * 3 >= 0 /\ #paramvar365 + #paramvar366 * 3 + #paramvar367 * 3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 3 + #paramvar293 * 3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 3 + #paramvar289 * 3 >= 0
bounds constr: [#S_1797] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1798] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1799] true
bounds constr: [#S_1800] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1801] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1802] true
bounds constr: [#S_1803] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1804] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1805] true
bounds constr: [#S_1806] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1807] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1808] true
bounds constr: [#S_1809] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1810] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1811] true
bounds constr: [#S_1812] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1813] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1814] true
bounds constr: [#S_1815] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1816] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1817] true
bounds constr: [#S_1818] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1819] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1820] true
bounds constr: [#S_1821] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1822] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1823] true
bounds constr: [#S_1824] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1825] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1826] true
constraints generated
sat
************** current phase of 35th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -2 + -x2 >= 0 /\ 2 + x1 + x2 >= 0 \/ -x1 + -x2 >= 0 /\ 2 * x1 >= 0 \/ 2 + x1 + -x2 >= 0 /\ -1 + -x1 >= 0
X3(x1: int, x2: int) :=
  -1 + -x1 + x2 != 0 /\ 2 + x1 + -x2 >= 0 /\ 1 + -2 * x1 + x2 >= 0 \/ -1 + x1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ -2 + 3 * x2 >= 0 /\ 2 + -x1 + -2 * x2 >= 0 \/ x2 = 0 /\ 2 + -x1 + x2 >= 0 /\ -2 + x1 + -2 * x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ 2 + x1 + -x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -2 * x2 >= 0 /\ 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ -2 * x2 >= 0 \/ 1 + -2 * x2 >= 0 /\ -2 + 2 * x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0 /\ -2 + x1 >= 0 \/ 1 + -x1 >= 0 /\ -1 + x1 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + x1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + x1 + x2 >= 0 /\ -2 + x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  -2 + x2 >= 0 /\ -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -1) /\ X95(0, -2) => X1(-1, -2));
(X2(-1, 0) /\ X96(-2, 2) => X1(-1, 2));
(X2(-1, 1) /\ X92(1, 1) => X1(-1, 1));
(X2(-1, 1) /\ X93(-1, -1) => X1(-1, -1));
(X2(-1, 1) /\ X94(1, -2) => X1(-1, -2));
(X3(-2, 0) /\ X3(2, 0) => X2(2, 0));
(X93(-3, -3) => X3(-3, 3));
(X95(-4, -5) => X3(-4, -1));
(X96(-4, 2) => X3(-4, 0))

************** current phase of 35th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (40): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (260): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );..]

*** labeling with SAT solving
************** current phase of 35th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-1) (-1))
refuting (X2 (-1) (-2))
refuting (X2 (-1) (-1))
refuting (X2 (-1) 0)
refuting (X2 (-1) 1)
refuting (X2 2 (-1))
refuting (X2 2 0)
refuting (X2 2 4)
refuting (X3 (-4) (-1))
refuting (X3 (-4) 0)
refuting (X3 (-3) 3)
refuting (X3 (-2) 0)
refuting (X3 2 0)
refuting (X90 3 3)
refuting (X91 3 3)
refuting (X92 0 0)
refuting (X92 1 1)
refuting (X92 3 3)
refuting (X93 (-3) (-3))
refuting (X93 (-1) (-1))
refuting (X93 3 3)
refuting (X94 1 (-2))
refuting (X94 3 3)
refuting (X95 (-4) (-5))
refuting (X95 (-1) (-1))
refuting (X95 0 (-2))
refuting (X95 3 3)
refuting (X96 (-4) 2)
refuting (X96 (-2) 2)
refuting (X96 3 3)
proving (X1 (-1) (-1))
proving (X1 2 (-1))
proving (X1 2 0)
proving (X1 2 3)
proving (X2 (-1) (-2))
proving (X2 (-1) (-1))
proving (X2 (-1) 0)
proving (X2 (-1) 1)
proving (X2 2 (-1))
proving (X2 2 0)
proving (X2 2 4)
proving (X3 (-4) (-1))
proving (X3 (-4) 0)
proving (X3 (-3) 3)
proving (X3 (-2) 0)
proving (X3 2 0)
proving (X90 3 3)
proving (X91 3 3)
proving (X92 0 0)
proving (X92 1 1)
proving (X92 3 3)
proving (X93 (-3) (-3))
proving (X93 (-1) (-1))
proving (X93 3 3)
proving (X94 1 (-2))
proving (X94 3 3)
proving (X95 (-4) (-5))
proving (X95 (-1) (-1))
proving (X95 0 (-2))
proving (X95 3 3)
proving (X96 (-4) 2)
proving (X96 (-2) 2)
proving (X96 3 3)
*** Example Instances obtained by Resolution:


************** current phase of 35th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (40): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (260): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );
(X2(-1, -3) /\ X90(-2, -2) => );
(X2(-1, -2) /\ X91(1, 1) => );
(X2(-1, -2) /\ X93(0, 2) => );..]

*** labeling with SAT solving
************** current phase of 36th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
table:
FTFFTT_TFFTTTFFTTFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (42):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
table:
FTFTF_TTFFFFFFTFFTTTTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
table:
FTFFTF__TFFFFFTTTTTTFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (59):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (53):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTT

gen constr of example:(X2(-1, -1) /\ X95(0, -2) => )
constr: [#S_1827] (#paramvar364 > 0 \/ #paramvar361 + #paramvar363 * -2 < 0 \/ #paramvar358 + #paramvar360 * -2 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar356 * -2 < 0 \/ #paramvar351 + #paramvar353 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(-1, 0) /\ X96(-2, 2) => )
constr: [#S_1828] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * -2 + #paramvar377 * 2 < 0 \/ #paramvar372 + #paramvar373 * -2 + #paramvar374 * 2 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * -2 + #paramvar370 * 2 < 0 \/ #paramvar365 + #paramvar366 * -2 + #paramvar367 * 2 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(-1, 1) /\ X92(1, 1) => )
constr: [#S_1829] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 + #paramvar321 < 0 \/ #paramvar316 + #paramvar317 + #paramvar318 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 + #paramvar314 < 0 \/ #paramvar309 + #paramvar310 + #paramvar311 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(-1, 1) /\ X94(1, -2) => )
constr: [#S_1830] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar345 + #paramvar346 * -2 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar338 + #paramvar339 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(-1, 1) /\ X93(-1, -1) => X1(-1, -1))
constr: [#S_1831] (#paramvar336 < 0 \/ #paramvar333 + -#paramvar334 + -#paramvar335 < 0 \/ #paramvar330 + -#paramvar331 + -#paramvar332 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + -#paramvar327 + -#paramvar328 < 0 \/ #paramvar323 + -#paramvar324 + -#paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + -#paramvar224 + -#paramvar225 >= 0
gen constr of example:(X3(-2, 0) /\ X3(2, 0) => X2(2, 0))
constr: [#S_1832] (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 < 0 \/ #paramvar276 + #paramvar277 * -2 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 < 0 \/ #paramvar265 + #paramvar266 * -2 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 < 0 \/ #paramvar254 + #paramvar255 * -2 < 0) \/ (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 2 < 0 \/ #paramvar276 + #paramvar277 * 2 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 2 < 0 \/ #paramvar265 + #paramvar266 * 2 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 2 < 0 \/ #paramvar254 + #paramvar255 * 2 < 0) \/ #paramvar251 <= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 2 >= 0 /\ #paramvar245 + #paramvar246 * 2 >= 0 \/ #paramvar242 <= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 2 >= 0 /\ #paramvar236 + #paramvar237 * 2 >= 0 \/ #paramvar233 <= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 2 >= 0 /\ #paramvar227 + #paramvar228 * 2 >= 0
gen constr of example:(X95(-4, -5) => X3(-4, -1))
constr: [#S_1833] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * -4 + #paramvar363 * -5 < 0 \/ #paramvar358 + #paramvar359 * -4 + #paramvar360 * -5 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * -4 + #paramvar356 * -5 < 0 \/ #paramvar351 + #paramvar352 * -4 + #paramvar353 * -5 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -4 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -4 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -4 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -4 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -4 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -4 + -#paramvar256 >= 0
gen constr of example:(X96(-4, 2) => X3(-4, 0))
constr: [#S_1834] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * -4 + #paramvar377 * 2 < 0 \/ #paramvar372 + #paramvar373 * -4 + #paramvar374 * 2 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * -4 + #paramvar370 * 2 < 0 \/ #paramvar365 + #paramvar366 * -4 + #paramvar367 * 2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -4 >= 0 /\ #paramvar276 + #paramvar277 * -4 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -4 >= 0 /\ #paramvar265 + #paramvar266 * -4 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -4 >= 0 /\ #paramvar254 + #paramvar255 * -4 >= 0
gen constr of example:(X93(-3, -3) => X3(-3, 3))
constr: [#S_1835] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -3 < 0 \/ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -3 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -3 < 0 \/ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 * 3 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 * 3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 * 3 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 * 3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 * 3 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 * 3 >= 0
bounds constr: [#S_1836] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1837] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1838] true
bounds constr: [#S_1839] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1840] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1841] true
bounds constr: [#S_1842] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1843] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1844] true
bounds constr: [#S_1845] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1846] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1847] true
bounds constr: [#S_1848] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1849] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1850] true
bounds constr: [#S_1851] true
bounds constr: [#S_1852] true
bounds constr: [#S_1853] true
bounds constr: [#S_1854] true
bounds constr: [#S_1855] true
bounds constr: [#S_1856] true
bounds constr: [#S_1857] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1858] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1859] true
bounds constr: [#S_1860] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1861] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1862] true
bounds constr: [#S_1863] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1864] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1865] true
constraints generated
sat
************** current phase of 36th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ 2 + -2 * x1 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ 2 + -2 * x1 >= 0 /\ -2 + x1 + x2 >= 0 \/ x1 + x2 >= 0 /\ -x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 = 0 /\ 1 + x2 = 0 /\ -1 + x1 + x2 = 0 /\ -2 + -2 * x1 + x2 >= 0 /\ 1 + -x1 + x2 >= 0 \/ -1 + x1 + x2 = 0 /\ -1 + -x1 + x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ 2 + -3 * x1 >= 0 \/ 1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ 2 + -x1 + x2 >= 0 /\ 1 + -2 * x1 + x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + -x1 >= 0 /\ -2 + x1 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ -1 + x1 + -x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x1 + x2 >= 0 /\ -x1 >= 0 \/ x1 + -x2 = 0 /\ 1 + x1 + x2 >= 0 /\ -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 + -x2 >= 0 /\ 2 + x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ x1 >= 0 /\ -x2 >= 0
X94(x1: int, x2: int) :=
  -2 + -x1 + -x2 >= 0 /\ -2 + -2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + 2 * x2 >= 0 /\ -2 + 2 * x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ -1 + -x1 + -x2 >= 0 \/ x1 + -x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ 1 + 2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 1) /\ X94(0, -2) => X1(-1, -2));
(X2(-2, 0) /\ X92(0, 0) => X1(-2, 0));
(X2(-2, 0) /\ X93(0, 0) => X1(-2, 0));
(X2(-2, 0) /\ X96(0, 0) => X1(-2, 0));
(X3(-4, 4) /\ X3(2, 4) => X2(2, 4));
(X94(0, -2) => X3(0, 1))

************** current phase of 36th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (40): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (266): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );..]

*** labeling with SAT solving
************** current phase of 36th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-2) 0)
refuting (X2 (-1) 1)
refuting (X2 2 4)
refuting (X3 (-4) 4)
refuting (X3 0 1)
refuting (X3 2 4)
refuting (X92 0 0)
refuting (X93 0 0)
refuting (X94 0 (-2))
refuting (X96 0 0)
proving (X2 (-2) 0)
proving (X2 (-1) 1)
proving (X2 2 4)
proving (X3 (-4) 4)
proving (X3 0 1)
proving (X3 2 4)
proving (X92 0 0)
proving (X93 0 0)
proving (X94 0 (-2))
proving (X96 0 0)
*** Example Instances obtained by Resolution:


************** current phase of 36th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (40): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (266): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );..]

*** labeling with SAT solving
************** current phase of 37th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
table:
FTFFTT_TFFTTTFFTTFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (42):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
table:
FTFTF_TTFFFFFFTFFTTTTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
table:
FTFFTF__TFFFFFTTTTTTFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (61):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (53):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTT

gen constr of example:(X2(-2, 0) /\ X92(0, 0) => )
constr: [#S_1866] (#paramvar322 < 0 \/ #paramvar319 < 0 \/ #paramvar316 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 < 0 \/ #paramvar309 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0)
gen constr of example:(X2(-2, 0) /\ X93(0, 0) => )
constr: [#S_1867] (#paramvar336 < 0 \/ #paramvar333 < 0 \/ #paramvar330 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 < 0 \/ #paramvar323 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0)
gen constr of example:(X2(-2, 0) /\ X96(0, 0) => )
constr: [#S_1868] (#paramvar378 < 0 \/ #paramvar375 < 0 \/ #paramvar372 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 < 0 \/ #paramvar365 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0)
gen constr of example:(X2(-1, 1) /\ X94(0, -2) => )
constr: [#S_1869] (#paramvar350 > 0 \/ #paramvar347 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar346 * -2 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar339 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0)
gen constr of example:(X3(-4, 4) /\ X3(2, 4) => X2(2, 4))
constr: [#S_1870] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -4 + #paramvar281 * 4 < 0 \/ #paramvar276 + #paramvar277 * -4 + #paramvar278 * 4 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -4 + #paramvar270 * 4 < 0 \/ #paramvar265 + #paramvar266 * -4 + #paramvar267 * 4 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -4 + #paramvar259 * 4 < 0 \/ #paramvar254 + #paramvar255 * -4 + #paramvar256 * 4 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 2 + #paramvar281 * 4 < 0 \/ #paramvar276 + #paramvar277 * 2 + #paramvar278 * 4 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 2 + #paramvar270 * 4 < 0 \/ #paramvar265 + #paramvar266 * 2 + #paramvar267 * 4 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 2 + #paramvar259 * 4 < 0 \/ #paramvar254 + #paramvar255 * 2 + #paramvar256 * 4 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 2 + #paramvar250 * 4 >= 0 /\ #paramvar245 + #paramvar246 * 2 + #paramvar247 * 4 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 2 + #paramvar241 * 4 >= 0 /\ #paramvar236 + #paramvar237 * 2 + #paramvar238 * 4 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 2 + #paramvar232 * 4 >= 0 /\ #paramvar227 + #paramvar228 * 2 + #paramvar229 * 4 >= 0
gen constr of example:(X94(0, -2) => X3(0, 1))
constr: [#S_1871] (#paramvar350 > 0 \/ #paramvar347 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar346 * -2 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar339 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar256 >= 0
bounds constr: [#S_1872] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1873] true
bounds constr: [#S_1874] true
bounds constr: [#S_1875] true
bounds constr: [#S_1876] true
bounds constr: [#S_1877] true
bounds constr: [#S_1878] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1879] (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1880] true
bounds constr: [#S_1881] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1882] true
bounds constr: [#S_1883] true
bounds constr: [#S_1884] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1885] true
bounds constr: [#S_1886] true
bounds constr: [#S_1887] true
bounds constr: [#S_1888] true
bounds constr: [#S_1889] true
bounds constr: [#S_1890] true
bounds constr: [#S_1891] true
bounds constr: [#S_1892] true
bounds constr: [#S_1893] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1894] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1895] true
bounds constr: [#S_1896] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1897] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1898] true
bounds constr: [#S_1899] true
bounds constr: [#S_1900] true
bounds constr: [#S_1901] true
constraints generated
sat
************** current phase of 37th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  1 + x2 != 0 /\ -2 + x1 + x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ -1 + x1 + -x2 >= 0 /\ -1 + -x1 + -x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ 1 + x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ 1 + 2 * x1 >= 0
X3(x1: int, x2: int) :=
  -2 + -2 * x1 + -x2 >= 0 /\ -2 + 2 * x2 >= 0 \/ 1 + x2 != 0 /\ -2 + x1 + -x2 >= 0 /\ -2 + -3 * x2 >= 0 \/ -1 + 2 * x1 + -x2 >= 0 /\ 1 + -2 * x1 + x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -2 * x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + 2 * x1 >= 0 /\ 1 + -2 * x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0 /\ 2 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + -x1 >= 0 /\ -1 + x1 + x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0
X94(x1: int, x2: int) :=
  -1 + -x1 + x2 >= 0 /\ -1 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ -1 + -x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x1 + -x2 >= 0 /\ -1 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -2 * x2 >= 0 /\ -2 + x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x2 >= 0 /\ -2 + x1 >= 0 \/ -2 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(1, -3) /\ X2(7, 5) => X1(1, 4) \/ X1(7, 4) \/ X90(4, 4) \/ X91(4, 4) \/ X92(4, 4) \/ X93(4, 4) \/ X94(4, 4) \/ X95(4, 4) \/ X96(4, 4));
(X2(1, -3) => X1(1, 4) \/ X3(4, 5) \/ X90(4, 4) \/ X91(4, 4) \/ X92(4, 4) \/ X93(4, 4) \/ X94(4, 4) \/ X95(4, 4) \/ X96(4, 4));
(X2(2, 0) /\ X91(-1, -1) => X1(2, -1));
(X2(2, 0) /\ X96(0, -2) => X1(2, -2));
(X2(3, 1) /\ X92(1, 1) => X1(3, 1));
(X2(3, 1) /\ X94(-5, 4) => X1(3, 4));
(X2(5, 3) => X1(5, 2) \/ X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X3(1, -2) /\ X3(2, -2) => X2(2, -2));
(X91(-1, -1) => X3(-1, 0));
(X94(-1, 0) => X3(-1, 1));
(X96(0, -2) => X3(0, 0))

************** current phase of 37th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (40): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (277): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );..]

*** labeling with SAT solving
************** current phase of 37th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 1 4)
  added as a negative example with: 
  add negative example(X1(1, 4) => )
refuting (X1 2 (-2))
  added as a negative example with: 
  add negative example(X1(2, -2) => )
refuting (X1 3 4)
  added as a negative example with: 
  add negative example(X1(3, 4) => )
refuting (X1 5 2)
  added as a negative example with: 
  add negative example(X1(5, 2) => )
refuting (X1 7 4)
  added as a negative example with: 
  add negative example(X1(7, 4) => )
refuting (X2 1 (-3))
refuting (X2 2 (-2))
refuting (X2 2 0)
refuting (X2 3 1)
refuting (X2 5 3)
refuting (X2 7 5)
refuting (X3 (-1) 0)
refuting (X3 (-1) 1)
refuting (X3 0 0)
refuting (X3 1 (-2))
refuting (X3 2 (-2))
refuting (X3 2 (-1))
refuting (X3 4 5)
refuting (X90 2 2)
refuting (X90 4 4)
refuting (X91 (-1) (-1))
refuting (X91 2 2)
refuting (X91 4 4)
refuting (X92 1 1)
refuting (X92 2 2)
refuting (X92 4 4)
refuting (X93 2 2)
refuting (X93 4 4)
refuting (X94 (-5) 4)
refuting (X94 (-1) 0)
refuting (X94 2 2)
refuting (X94 4 4)
refuting (X95 2 2)
refuting (X95 4 4)
refuting (X96 0 (-2))
refuting (X96 2 2)
refuting (X96 4 4)
proving (X1 1 4)
proving (X1 2 (-2))
proving (X1 3 4)
proving (X1 5 2)
proving (X1 7 4)
proving (X2 1 (-3))
proving (X2 2 (-2))
proving (X2 2 0)
proving (X2 3 1)
proving (X2 5 3)
proving (X2 7 5)
proving (X3 (-1) 0)
proving (X3 (-1) 1)
proving (X3 0 0)
proving (X3 1 (-2))
proving (X3 2 (-2))
proving (X3 2 (-1))
proving (X3 4 5)
proving (X90 2 2)
proving (X90 4 4)
proving (X91 (-1) (-1))
proving (X91 2 2)
proving (X91 4 4)
proving (X92 1 1)
proving (X92 2 2)
proving (X92 4 4)
proving (X93 2 2)
proving (X93 4 4)
proving (X94 (-5) 4)
proving (X94 (-1) 0)
proving (X94 2 2)
proving (X94 4 4)
proving (X95 2 2)
proving (X95 4 4)
proving (X96 0 (-2))
proving (X96 2 2)
proving (X96 4 4)
*** Example Instances obtained by Resolution:
(X1(1, 4) => );
(X1(2, -2) => );
(X1(3, 4) => );
(X1(5, 2) => );
(X1(7, 4) => )

************** current phase of 37th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (45): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (277): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );..]

*** labeling with SAT solving
************** current phase of 38th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
table:
FTFFTT_TFFTTTFFTTFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (47):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
table:
FTFTF_TTFFFFFFTFFTTTTF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
table:
FTFFTF__TFFFFFTTTTTTFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (63):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFT


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (57):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTT

gen constr of example:(X1(1, 4) => )
constr: [#S_1902] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 + #paramvar225 * 4 < 0
gen constr of example:(X1(2, -2) => )
constr: [#S_1903] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 2 + #paramvar225 * -2 < 0
gen constr of example:(X1(3, 4) => )
constr: [#S_1904] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 3 + #paramvar225 * 4 < 0
gen constr of example:(X1(5, 2) => )
constr: [#S_1905] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 5 + #paramvar225 * 2 < 0
gen constr of example:(X1(7, 4) => )
constr: [#S_1906] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 7 + #paramvar225 * 4 < 0
gen constr of example:(X2(2, 0) /\ X91(-1, -1) => )
constr: [#S_1907] (#paramvar308 < 0 \/ #paramvar305 + -#paramvar306 + -#paramvar307 < 0 \/ #paramvar302 + -#paramvar303 + -#paramvar304 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + -#paramvar299 + -#paramvar300 < 0 \/ #paramvar295 + -#paramvar296 + -#paramvar297 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 < 0 \/ #paramvar245 + #paramvar246 * 2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 < 0 \/ #paramvar236 + #paramvar237 * 2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 < 0 \/ #paramvar227 + #paramvar228 * 2 < 0)
gen constr of example:(X2(2, 0) /\ X96(0, -2) => )
constr: [#S_1908] (#paramvar378 > 0 \/ #paramvar375 + #paramvar377 * -2 < 0 \/ #paramvar372 + #paramvar374 * -2 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar370 * -2 < 0 \/ #paramvar365 + #paramvar367 * -2 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 < 0 \/ #paramvar245 + #paramvar246 * 2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 < 0 \/ #paramvar236 + #paramvar237 * 2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 < 0 \/ #paramvar227 + #paramvar228 * 2 < 0)
gen constr of example:(X2(3, 1) /\ X92(1, 1) => )
constr: [#S_1909] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 + #paramvar321 < 0 \/ #paramvar316 + #paramvar317 + #paramvar318 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 + #paramvar314 < 0 \/ #paramvar309 + #paramvar310 + #paramvar311 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 < 0)
gen constr of example:(X2(3, 1) /\ X94(-5, 4) => )
constr: [#S_1910] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 * -5 + #paramvar349 * 4 < 0 \/ #paramvar344 + #paramvar345 * -5 + #paramvar346 * 4 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 * -5 + #paramvar342 * 4 < 0 \/ #paramvar337 + #paramvar338 * -5 + #paramvar339 * 4 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 < 0)
gen constr of example:(X3(1, -2) /\ X3(2, -2) => X2(2, -2))
constr: [#S_1911] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + #paramvar281 * -2 < 0 \/ #paramvar276 + #paramvar277 + #paramvar278 * -2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + #paramvar270 * -2 < 0 \/ #paramvar265 + #paramvar266 + #paramvar267 * -2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + #paramvar259 * -2 < 0 \/ #paramvar254 + #paramvar255 + #paramvar256 * -2 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 2 + #paramvar281 * -2 < 0 \/ #paramvar276 + #paramvar277 * 2 + #paramvar278 * -2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 2 + #paramvar270 * -2 < 0 \/ #paramvar265 + #paramvar266 * 2 + #paramvar267 * -2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 2 + #paramvar259 * -2 < 0 \/ #paramvar254 + #paramvar255 * 2 + #paramvar256 * -2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 2 + #paramvar250 * -2 >= 0 /\ #paramvar245 + #paramvar246 * 2 + #paramvar247 * -2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 2 + #paramvar241 * -2 >= 0 /\ #paramvar236 + #paramvar237 * 2 + #paramvar238 * -2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 2 + #paramvar232 * -2 >= 0 /\ #paramvar227 + #paramvar228 * 2 + #paramvar229 * -2 >= 0
gen constr of example:(X91(-1, -1) => X3(-1, 0))
constr: [#S_1912] (#paramvar308 < 0 \/ #paramvar305 + -#paramvar306 + -#paramvar307 < 0 \/ #paramvar302 + -#paramvar303 + -#paramvar304 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + -#paramvar299 + -#paramvar300 < 0 \/ #paramvar295 + -#paramvar296 + -#paramvar297 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X94(-1, 0) => X3(-1, 1))
constr: [#S_1913] (#paramvar350 > 0 \/ #paramvar347 + -#paramvar348 < 0 \/ #paramvar344 + -#paramvar345 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + -#paramvar341 < 0 \/ #paramvar337 + -#paramvar338 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 >= 0
gen constr of example:(X96(0, -2) => X3(0, 0))
constr: [#S_1914] (#paramvar378 > 0 \/ #paramvar375 + #paramvar377 * -2 < 0 \/ #paramvar372 + #paramvar374 * -2 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar370 * -2 < 0 \/ #paramvar365 + #paramvar367 * -2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 >= 0 /\ #paramvar276 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 >= 0 /\ #paramvar265 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 >= 0 /\ #paramvar254 >= 0
gen constr of example:(X2(5, 3) => X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_1915] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 5 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar246 * 5 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 5 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar237 * 5 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 5 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar228 * 5 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + -#paramvar256 >= 0
gen constr of example:(X2(1, -3) => X3(4, 5) \/ X90(4, 4) \/ X91(4, 4) \/ X92(4, 4) \/ X93(4, 4) \/ X94(4, 4) \/ X95(4, 4) \/ X96(4, 4))
constr: [#S_1916] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 4 + #paramvar307 * 4 >= 0 /\ #paramvar302 + #paramvar303 * 4 + #paramvar304 * 4 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 4 + #paramvar300 * 4 >= 0 /\ #paramvar295 + #paramvar296 * 4 + #paramvar297 * 4 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 4 + #paramvar321 * 4 >= 0 /\ #paramvar316 + #paramvar317 * 4 + #paramvar318 * 4 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 4 + #paramvar314 * 4 >= 0 /\ #paramvar309 + #paramvar310 * 4 + #paramvar311 * 4 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 4 + #paramvar335 * 4 >= 0 /\ #paramvar330 + #paramvar331 * 4 + #paramvar332 * 4 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 4 + #paramvar328 * 4 >= 0 /\ #paramvar323 + #paramvar324 * 4 + #paramvar325 * 4 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 4 + #paramvar349 * 4 >= 0 /\ #paramvar344 + #paramvar345 * 4 + #paramvar346 * 4 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 4 + #paramvar342 * 4 >= 0 /\ #paramvar337 + #paramvar338 * 4 + #paramvar339 * 4 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 4 + #paramvar363 * 4 >= 0 /\ #paramvar358 + #paramvar359 * 4 + #paramvar360 * 4 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 4 + #paramvar356 * 4 >= 0 /\ #paramvar351 + #paramvar352 * 4 + #paramvar353 * 4 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 4 + #paramvar377 * 4 >= 0 /\ #paramvar372 + #paramvar373 * 4 + #paramvar374 * 4 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 4 + #paramvar370 * 4 >= 0 /\ #paramvar365 + #paramvar366 * 4 + #paramvar367 * 4 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 4 + #paramvar293 * 4 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 4 + #paramvar289 * 4 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * 4 + #paramvar281 * 5 >= 0 /\ #paramvar276 + #paramvar277 * 4 + #paramvar278 * 5 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * 4 + #paramvar270 * 5 >= 0 /\ #paramvar265 + #paramvar266 * 4 + #paramvar267 * 5 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * 4 + #paramvar259 * 5 >= 0 /\ #paramvar254 + #paramvar255 * 4 + #paramvar256 * 5 >= 0
gen constr of example:(X2(1, -3) /\ X2(7, 5) => X90(4, 4) \/ X91(4, 4) \/ X92(4, 4) \/ X93(4, 4) \/ X94(4, 4) \/ X95(4, 4) \/ X96(4, 4))
constr: [#S_1917] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 7 + #paramvar250 * 5 < 0 \/ #paramvar245 + #paramvar246 * 7 + #paramvar247 * 5 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 7 + #paramvar241 * 5 < 0 \/ #paramvar236 + #paramvar237 * 7 + #paramvar238 * 5 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 7 + #paramvar232 * 5 < 0 \/ #paramvar227 + #paramvar228 * 7 + #paramvar229 * 5 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 4 + #paramvar307 * 4 >= 0 /\ #paramvar302 + #paramvar303 * 4 + #paramvar304 * 4 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 4 + #paramvar300 * 4 >= 0 /\ #paramvar295 + #paramvar296 * 4 + #paramvar297 * 4 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 4 + #paramvar321 * 4 >= 0 /\ #paramvar316 + #paramvar317 * 4 + #paramvar318 * 4 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 4 + #paramvar314 * 4 >= 0 /\ #paramvar309 + #paramvar310 * 4 + #paramvar311 * 4 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 4 + #paramvar335 * 4 >= 0 /\ #paramvar330 + #paramvar331 * 4 + #paramvar332 * 4 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 4 + #paramvar328 * 4 >= 0 /\ #paramvar323 + #paramvar324 * 4 + #paramvar325 * 4 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 4 + #paramvar349 * 4 >= 0 /\ #paramvar344 + #paramvar345 * 4 + #paramvar346 * 4 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 4 + #paramvar342 * 4 >= 0 /\ #paramvar337 + #paramvar338 * 4 + #paramvar339 * 4 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 4 + #paramvar363 * 4 >= 0 /\ #paramvar358 + #paramvar359 * 4 + #paramvar360 * 4 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 4 + #paramvar356 * 4 >= 0 /\ #paramvar351 + #paramvar352 * 4 + #paramvar353 * 4 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 4 + #paramvar377 * 4 >= 0 /\ #paramvar372 + #paramvar373 * 4 + #paramvar374 * 4 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 4 + #paramvar370 * 4 >= 0 /\ #paramvar365 + #paramvar366 * 4 + #paramvar367 * 4 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 4 + #paramvar293 * 4 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 4 + #paramvar289 * 4 >= 0
bounds constr: [#S_1918] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1919] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1920] true
bounds constr: [#S_1921] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1922] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1923] true
bounds constr: [#S_1924] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1925] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1926] true
bounds constr: [#S_1927] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1928] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1929] true
bounds constr: [#S_1930] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1931] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1932] true
bounds constr: [#S_1933] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1934] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1935] true
bounds constr: [#S_1936] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1937] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1938] true
bounds constr: [#S_1939] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1940] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1941] true
bounds constr: [#S_1942] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1943] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1944] true
bounds constr: [#S_1945] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1946] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1947] true
constraints generated
sat
************** current phase of 38th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ 1 + x2 != 0 /\ -2 + -x1 >= 0 /\ 1 + -x1 + -x2 >= 0 \/ x2 != 0 /\ 1 + 2 * x1 >= 0 /\ 1 + -x1 + x2 >= 0 \/ -1 + x2 != 0 /\ -2 + x1 + x2 >= 0 /\ -2 + x2 >= 0
X3(x1: int, x2: int) :=
  -1 + -x1 + x2 = 0 /\ -2 + -2 * x1 + -x2 >= 0 /\ -1 + -x1 + 2 * x2 >= 0 \/ -2 + x1 + 2 * x2 >= 0 /\ -1 + -x1 + 2 * x2 >= 0 \/ x2 != 0 /\ -2 + -x1 >= 0 /\ -1 + -2 * x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + -x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + x1 + x2 >= 0 /\ -2 + -2 * x2 >= 0 \/ x1 + -x2 != 0 /\ -1 + x2 >= 0 /\ 1 + -2 * x2 >= 0
X92(x1: int, x2: int) :=
  -1 + -x1 + x2 >= 0 /\ x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ 2 * x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x2 >= 0 /\ 2 + -x1 + x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x2 >= 0 /\ -2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ 1 + -2 * x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-2, 2) /\ X90(-4, 3) => X1(-2, 3));
(X2(0, -1) /\ X95(-2, -2) => X1(0, -2));
(X2(0, 1) /\ X94(2, 2) => X1(0, 2));
(X2(0, 2) => X1(0, 1) \/ X3(1, 0) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X2(1, 1) => X1(1, 0) \/ X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0));
(X3(-2, -1) /\ X3(-3, -1) => X2(-2, -1));
(X90(2, -3) => X3(2, -4));
(X94(2, 2) => X3(2, 1))

************** current phase of 38th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (45): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );
(X1(-1, 3) => );..]
*** undecided (285): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-1, -3) /\ X90(-3, -2) => );..]

*** labeling with SAT solving
************** current phase of 38th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-2) 3)
  added as a negative example with: 
  add negative example(X1(-2, 3) => )
refuting (X2 (-2) (-1))
refuting (X2 (-2) 2)
refuting (X2 0 (-1))
refuting (X2 0 1)
refuting (X2 0 2)
refuting (X2 1 (-3))
refuting (X2 1 1)
refuting (X2 2 0)
refuting (X2 3 1)
refuting (X2 5 3)
refuting (X2 7 5)
refuting (X3 (-3) (-1))
refuting (X3 (-2) (-1))
refuting (X3 1 0)
refuting (X3 2 (-4))
refuting (X3 2 (-1))
refuting (X3 2 1)
refuting (X3 4 5)
refuting (X90 (-4) 3)
refuting (X90 0 0)
refuting (X90 1 1)
refuting (X90 2 (-3))
refuting (X90 2 2)
refuting (X90 4 4)
refuting (X91 0 0)
refuting (X91 1 1)
refuting (X91 2 2)
refuting (X91 4 4)
refuting (X92 0 0)
refuting (X92 1 1)
refuting (X92 2 2)
refuting (X92 4 4)
refuting (X93 0 0)
refuting (X93 1 1)
refuting (X93 2 2)
refuting (X93 4 4)
refuting (X94 (-5) 4)
refuting (X94 0 0)
refuting (X94 1 1)
refuting (X94 2 2)
refuting (X94 4 4)
refuting (X95 (-2) (-2))
refuting (X95 0 0)
refuting (X95 1 1)
refuting (X95 2 2)
refuting (X95 4 4)
refuting (X96 0 (-2))
refuting (X96 0 0)
refuting (X96 1 1)
refuting (X96 2 2)
refuting (X96 4 4)
proving (X1 (-2) 3)
proving (X1 1 4)
proving (X1 2 (-2))
proving (X1 3 4)
proving (X1 5 2)
proving (X1 7 4)
proving (X2 (-2) (-1))
proving (X2 (-2) 2)
proving (X2 0 (-1))
proving (X2 0 1)
proving (X2 0 2)
proving (X2 1 (-3))
proving (X2 1 1)
proving (X2 2 0)
proving (X2 3 1)
proving (X2 5 3)
proving (X2 7 5)
proving (X3 (-3) (-1))
proving (X3 (-2) (-1))
proving (X3 1 0)
proving (X3 2 (-4))
proving (X3 2 (-1))
proving (X3 2 1)
proving (X3 4 5)
proving (X90 (-4) 3)
proving (X90 0 0)
proving (X90 1 1)
proving (X90 2 (-3))
proving (X90 2 2)
proving (X90 4 4)
proving (X91 0 0)
proving (X91 1 1)
proving (X91 2 2)
proving (X91 4 4)
proving (X92 0 0)
proving (X92 1 1)
proving (X92 2 2)
proving (X92 4 4)
proving (X93 0 0)
proving (X93 1 1)
proving (X93 2 2)
proving (X93 4 4)
proving (X94 (-5) 4)
proving (X94 0 0)
proving (X94 1 1)
proving (X94 2 2)
proving (X94 4 4)
proving (X95 (-2) (-2))
proving (X95 0 0)
proving (X95 1 1)
proving (X95 2 2)
proving (X95 4 4)
proving (X96 0 (-2))
proving (X96 0 0)
proving (X96 1 1)
proving (X96 2 2)
proving (X96 4 4)
*** Example Instances obtained by Resolution:
(X1(-2, 3) => )

************** current phase of 38th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (46): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (285): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-2, 2) /\ X90(-4, 3) => );..]

*** labeling with SAT solving
************** current phase of 39th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (22):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
table:
FTFFTT_TFFTTTFFTTFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (48):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
table:
FTFFTF__TFFFFFTTTTTTFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (63):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFT


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (57):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTT

gen constr of example:(X1(-2, 3) => )
constr: [#S_1948] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -2 + #paramvar225 * 3 < 0
gen constr of example:(X2(-2, 2) /\ X90(-4, 3) => )
constr: [#S_1949] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 * -4 + #paramvar293 * 3 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 * -4 + #paramvar289 * 3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * 2 < 0)
gen constr of example:(X2(0, -1) /\ X95(-2, -2) => )
constr: [#S_1950] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 * -2 + #paramvar363 * -2 < 0 \/ #paramvar358 + #paramvar359 * -2 + #paramvar360 * -2 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 * -2 + #paramvar356 * -2 < 0 \/ #paramvar351 + #paramvar352 * -2 + #paramvar353 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, 1) /\ X94(2, 2) => )
constr: [#S_1951] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 < 0 \/ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 < 0 \/ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X3(-2, -1) /\ X3(-3, -1) => X2(-2, -1))
constr: [#S_1952] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -3 + -#paramvar281 < 0 \/ #paramvar276 + #paramvar277 * -3 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -3 + -#paramvar270 < 0 \/ #paramvar265 + #paramvar266 * -3 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -3 + -#paramvar259 < 0 \/ #paramvar254 + #paramvar255 * -3 + -#paramvar256 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 < 0 \/ #paramvar279 + #paramvar280 * -2 + -#paramvar281 < 0 \/ #paramvar276 + #paramvar277 * -2 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 < 0 \/ #paramvar268 + #paramvar269 * -2 + -#paramvar270 < 0 \/ #paramvar265 + #paramvar266 * -2 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 < 0 \/ #paramvar257 + #paramvar258 * -2 + -#paramvar259 < 0 \/ #paramvar254 + #paramvar255 * -2 + -#paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 <= 0 /\ #paramvar248 + #paramvar249 * -2 + -#paramvar250 >= 0 /\ #paramvar245 + #paramvar246 * -2 + -#paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 <= 0 /\ #paramvar239 + #paramvar240 * -2 + -#paramvar241 >= 0 /\ #paramvar236 + #paramvar237 * -2 + -#paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 <= 0 /\ #paramvar230 + #paramvar231 * -2 + -#paramvar232 >= 0 /\ #paramvar227 + #paramvar228 * -2 + -#paramvar229 >= 0
gen constr of example:(X90(2, -3) => X3(2, -4))
constr: [#S_1953] (#paramvar294 > 0 \/ #paramvar291 + #paramvar292 * 2 + #paramvar293 * -3 < 0) /\ (#paramvar290 > 0 \/ #paramvar287 + #paramvar288 * 2 + #paramvar289 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 * -4 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 * -4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 * -4 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 * -4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 * -4 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 * -4 >= 0
gen constr of example:(X94(2, 2) => X3(2, 1))
constr: [#S_1954] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 < 0 \/ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 < 0 \/ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 >= 0
gen constr of example:(X2(0, 2) => X3(1, 0) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_1955] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 >= 0 /\ #paramvar276 + #paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 >= 0 /\ #paramvar265 + #paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 >= 0 /\ #paramvar254 + #paramvar255 >= 0
gen constr of example:(X2(1, 1) => X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0))
constr: [#S_1956] (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 >= 0 /\ #paramvar302 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 >= 0 /\ #paramvar295 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 >= 0 /\ #paramvar316 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 >= 0 /\ #paramvar309 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 >= 0 /\ #paramvar330 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 >= 0 /\ #paramvar323 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 >= 0 /\ #paramvar344 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 >= 0 /\ #paramvar337 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 >= 0 /\ #paramvar358 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 >= 0 /\ #paramvar351 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 >= 0 /\ #paramvar372 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 >= 0 /\ #paramvar365 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 >= 0
bounds constr: [#S_1957] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1958] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1959] true
bounds constr: [#S_1960] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_1961] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_1962] true
bounds constr: [#S_1963] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_1964] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_1965] true
bounds constr: [#S_1966] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_1967] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_1968] true
bounds constr: [#S_1969] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_1970] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_1971] true
bounds constr: [#S_1972] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_1973] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_1974] true
bounds constr: [#S_1975] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_1976] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_1977] true
bounds constr: [#S_1978] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_1979] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_1980] true
bounds constr: [#S_1981] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_1982] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_1983] true
bounds constr: [#S_1984] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_1985] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_1986] true
constraints generated
sat
************** current phase of 39th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ 1 + x2 != 0 /\ 2 + x1 + -x2 >= 0 /\ 1 + -x1 + -x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ 1 + 2 * x1 >= 0 /\ 1 + -x1 + x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ -2 + x1 + x2 >= 0 /\ 2 + -x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ -1 + -2 * x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ -1 + x1 + x2 != 0 /\ -2 + x1 + 2 * x2 >= 0 /\ -1 + -x1 + 2 * x2 >= 0 \/ x2 != 0 /\ -1 + x2 = 0 /\ -2 + -x1 >= 0 /\ -1 + -x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + x1 + x2 >= 0 /\ -1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ 1 + -2 * x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + -x1 + x2 >= 0 /\ x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + 2 * x2 >= 0 /\ -x1 + x2 >= 0
X93(x1: int, x2: int) :=
  -1 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ x1 + -x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ -2 + x1 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + x2 >= 0 /\ -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + -2 * x1 >= 0 /\ -1 + x1 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + 2 * x1 >= 0 /\ -2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0 /\ -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ -2 + -2 * x1 >= 0 /\ -2 + x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(0, -1) /\ X93(-2, 1) => X1(0, 1));
(X2(0, 2) /\ X92(2, 2) => X1(0, 2));
(X2(0, 3) /\ X91(-4, -4) => X1(0, -4));
(X2(3, -1) /\ X95(0, 0) => X1(3, 0));
(X3(-6, 4) /\ X3(7, 4) => X2(7, 4));
(X93(-2, 1) => X3(-2, -1));
(X94(-1, 2) => X3(-1, 1));
(X96(-2, -4) => X3(-2, 0))

************** current phase of 39th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (46): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (293): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-2, 2) /\ X90(-4, 3) => );..]

*** labeling with SAT solving
************** current phase of 39th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 0 (-4))
  added as a negative example with: 
  add negative example(X1(0, -4) => )
refuting (X1 3 0)
  added as a negative example with: 
  add negative example(X1(3, 0) => )
refuting (X2 (-2) 2)
refuting (X2 0 (-1))
refuting (X2 0 2)
refuting (X2 0 3)
refuting (X2 3 (-1))
refuting (X2 7 4)
refuting (X3 (-6) 4)
refuting (X3 (-2) (-1))
refuting (X3 (-2) 0)
refuting (X3 (-1) 1)
refuting (X3 7 4)
refuting (X90 (-4) 3)
refuting (X91 (-4) (-4))
refuting (X92 2 2)
refuting (X93 (-2) 1)
refuting (X94 (-1) 2)
refuting (X95 0 0)
refuting (X96 (-2) (-4))
proving (X1 (-2) 3)
proving (X1 0 (-4))
proving (X1 3 0)
proving (X2 (-2) 2)
proving (X2 0 (-1))
proving (X2 0 2)
proving (X2 0 3)
proving (X2 3 (-1))
proving (X2 7 4)
proving (X3 (-6) 4)
proving (X3 (-2) (-1))
proving (X3 (-2) 0)
proving (X3 (-1) 1)
proving (X3 7 4)
proving (X90 (-4) 3)
proving (X91 (-4) (-4))
proving (X92 2 2)
proving (X93 (-2) 1)
proving (X94 (-1) 2)
proving (X95 0 0)
proving (X96 (-2) (-4))
*** Example Instances obtained by Resolution:
(X1(0, -4) => );
(X1(3, 0) => )

************** current phase of 39th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (48): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (293): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-2, 2) /\ X90(-4, 3) => );..]

*** labeling with SAT solving
************** current phase of 40th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (23):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
table:
FTFFTT_TFFTTTFFTTFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (50):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
table:
FTTFFTFFF___TFFFTFFTTFFTTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
table:
FTFFTF__TFFFFFTTTTTTFFFFFT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (65):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (59):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTT

gen constr of example:(X1(0, -4) => )
constr: [#S_1987] #paramvar226 > 0 \/ #paramvar223 + #paramvar225 * -4 < 0
gen constr of example:(X1(3, 0) => )
constr: [#S_1988] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 3 < 0
gen constr of example:(X2(0, -1) /\ X93(-2, 1) => )
constr: [#S_1989] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, 2) /\ X92(2, 2) => )
constr: [#S_1990] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar229 * 2 < 0)
gen constr of example:(X2(0, 3) /\ X91(-4, -4) => )
constr: [#S_1991] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * -4 + #paramvar307 * -4 < 0 \/ #paramvar302 + #paramvar303 * -4 + #paramvar304 * -4 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * -4 + #paramvar300 * -4 < 0 \/ #paramvar295 + #paramvar296 * -4 + #paramvar297 * -4 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar229 * 3 < 0)
gen constr of example:(X2(3, -1) /\ X95(0, 0) => )
constr: [#S_1992] (#paramvar364 < 0 \/ #paramvar361 < 0 \/ #paramvar358 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 < 0 \/ #paramvar351 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 3 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 3 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 3 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 3 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 3 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 3 + -#paramvar229 < 0)
gen constr of example:(X3(-6, 4) /\ X3(7, 4) => X2(7, 4))
constr: [#S_1993] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -6 + #paramvar281 * 4 < 0 \/ #paramvar276 + #paramvar277 * -6 + #paramvar278 * 4 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -6 + #paramvar270 * 4 < 0 \/ #paramvar265 + #paramvar266 * -6 + #paramvar267 * 4 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -6 + #paramvar259 * 4 < 0 \/ #paramvar254 + #paramvar255 * -6 + #paramvar256 * 4 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 7 + #paramvar281 * 4 < 0 \/ #paramvar276 + #paramvar277 * 7 + #paramvar278 * 4 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 7 + #paramvar270 * 4 < 0 \/ #paramvar265 + #paramvar266 * 7 + #paramvar267 * 4 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 7 + #paramvar259 * 4 < 0 \/ #paramvar254 + #paramvar255 * 7 + #paramvar256 * 4 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 7 + #paramvar250 * 4 >= 0 /\ #paramvar245 + #paramvar246 * 7 + #paramvar247 * 4 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 7 + #paramvar241 * 4 >= 0 /\ #paramvar236 + #paramvar237 * 7 + #paramvar238 * 4 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 7 + #paramvar232 * 4 >= 0 /\ #paramvar227 + #paramvar228 * 7 + #paramvar229 * 4 >= 0
gen constr of example:(X93(-2, 1) => X3(-2, -1))
constr: [#S_1994] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + -#paramvar256 >= 0
gen constr of example:(X96(-2, -4) => X3(-2, 0))
constr: [#S_1995] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * -2 + #paramvar377 * -4 < 0 \/ #paramvar372 + #paramvar373 * -2 + #paramvar374 * -4 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * -2 + #paramvar370 * -4 < 0 \/ #paramvar365 + #paramvar366 * -2 + #paramvar367 * -4 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -2 >= 0
gen constr of example:(X94(-1, 2) => X3(-1, 1))
constr: [#S_1996] (#paramvar350 > 0 \/ #paramvar347 + -#paramvar348 + #paramvar349 * 2 < 0 \/ #paramvar344 + -#paramvar345 + #paramvar346 * 2 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + -#paramvar341 + #paramvar342 * 2 < 0 \/ #paramvar337 + -#paramvar338 + #paramvar339 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 >= 0
bounds constr: [#S_1997] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_1998] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_1999] true
bounds constr: [#S_2000] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2001] true
bounds constr: [#S_2002] true
bounds constr: [#S_2003] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2004] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2005] true
bounds constr: [#S_2006] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2007] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2008] true
bounds constr: [#S_2009] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2010] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2011] true
bounds constr: [#S_2012] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2013] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2014] true
bounds constr: [#S_2015] true
bounds constr: [#S_2016] true
bounds constr: [#S_2017] true
bounds constr: [#S_2018] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2019] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2020] true
bounds constr: [#S_2021] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2022] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2023] true
bounds constr: [#S_2024] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2025] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2026] true
constraints generated
sat
************** current phase of 40th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ -1 + x2 != 0 /\ 1 + -x1 + -x2 >= 0 /\ x1 + x2 >= 0 \/ 1 + x2 != 0 /\ -1 + x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0
X3(x1: int, x2: int) :=
  1 + x2 = 0 /\ -1 + x1 + x2 = 0 /\ -1 + -2 * x2 >= 0 /\ -1 + -2 * x1 + -x2 >= 0 \/ -1 + x2 != 0 /\ -2 + x2 >= 0 /\ 1 + -x1 + -x2 >= 0 \/ -1 + x2 != 0 /\ 1 + x1 + x2 >= 0 /\ 1 + -x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + 2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ -1 + x1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -1 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 >= 0 /\ 1 + 2 * x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ -2 + -x1 + x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  false
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 2 + x1 + -x2 >= 0 /\ -2 + x1 >= 0 \/ x1 + -x2 != 0 /\ -1 + -x1 + x2 >= 0 /\ -2 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-3, 3) => X1(-3, -2) \/ X3(-2, -1) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2));
(X2(1, -2) /\ X2(5, 4) => X1(1, -3) \/ X1(5, -3) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3));
(X2(1, 0) /\ X92(0, 0) => X1(1, 0));
(X2(1, 0) /\ X96(2, -1) => X1(1, -1));
(X2(2, -2) /\ X91(1, 1) => X1(2, 1));
(X3(-1, 0) /\ X3(0, 0) => X2(-1, 0));
(X96(2, 5) => X3(2, 0))

************** current phase of 40th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (48): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (300): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-2, 2) /\ X90(-4, 3) => );..]

*** labeling with SAT solving
************** current phase of 40th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-3) 3)
refuting (X2 (-1) 0)
refuting (X2 0 3)
refuting (X2 1 (-2))
refuting (X2 1 0)
refuting (X2 2 (-2))
refuting (X2 3 (-1))
refuting (X2 5 4)
refuting (X3 (-2) (-1))
refuting (X3 (-1) 0)
refuting (X3 0 0)
refuting (X3 2 0)
refuting (X90 (-3) (-3))
refuting (X90 (-2) (-2))
refuting (X91 (-4) (-4))
refuting (X91 (-3) (-3))
refuting (X91 (-2) (-2))
refuting (X91 1 1)
refuting (X92 (-3) (-3))
refuting (X92 (-2) (-2))
refuting (X92 0 0)
refuting (X93 (-3) (-3))
refuting (X93 (-2) (-2))
refuting (X94 (-3) (-3))
refuting (X94 (-2) (-2))
refuting (X95 (-3) (-3))
refuting (X95 (-2) (-2))
refuting (X95 0 0)
refuting (X96 (-3) (-3))
refuting (X96 (-2) (-2))
refuting (X96 2 (-1))
refuting (X96 2 5)
proving (X1 0 (-4))
proving (X1 3 0)
proving (X2 (-3) 3)
proving (X2 (-1) 0)
proving (X2 0 3)
proving (X2 1 (-2))
proving (X2 1 0)
proving (X2 2 (-2))
proving (X2 3 (-1))
proving (X2 5 4)
proving (X3 (-2) (-1))
proving (X3 (-1) 0)
proving (X3 0 0)
proving (X3 2 0)
proving (X90 (-3) (-3))
proving (X90 (-2) (-2))
proving (X91 (-4) (-4))
proving (X91 (-3) (-3))
proving (X91 (-2) (-2))
proving (X91 1 1)
proving (X92 (-3) (-3))
proving (X92 (-2) (-2))
proving (X92 0 0)
proving (X93 (-3) (-3))
proving (X93 (-2) (-2))
proving (X94 (-3) (-3))
proving (X94 (-2) (-2))
proving (X95 (-3) (-3))
proving (X95 (-2) (-2))
proving (X95 0 0)
proving (X96 (-3) (-3))
proving (X96 (-2) (-2))
proving (X96 2 (-1))
proving (X96 2 5)
*** Example Instances obtained by Resolution:


************** current phase of 40th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (48): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (300): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-2, 2) /\ X90(-4, 3) => );..]

*** labeling with SAT solving
************** current phase of 41st iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
table:
FTFFTT_TFFTTTFFTTFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (50):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
table:
FTTFFTFFF___TFFFTFFTTFFTTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
table:
FTFFTF__TFFFFFTTTTTTFFFFFT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (65):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (61):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTT

gen constr of example:(X2(1, 0) /\ X92(0, 0) => )
constr: [#S_2027] (#paramvar322 < 0 \/ #paramvar319 < 0 \/ #paramvar316 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 < 0 \/ #paramvar309 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(1, 0) /\ X96(2, -1) => )
constr: [#S_2028] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * 2 + -#paramvar377 < 0 \/ #paramvar372 + #paramvar373 * 2 + -#paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * 2 + -#paramvar370 < 0 \/ #paramvar365 + #paramvar366 * 2 + -#paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0)
gen constr of example:(X2(2, -2) /\ X91(1, 1) => )
constr: [#S_2029] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 + #paramvar307 < 0 \/ #paramvar302 + #paramvar303 + #paramvar304 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 + #paramvar300 < 0 \/ #paramvar295 + #paramvar296 + #paramvar297 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 * -2 < 0)
gen constr of example:(X3(-1, 0) /\ X3(0, 0) => X2(-1, 0))
constr: [#S_2030] (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 < 0 \/ #paramvar276 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 < 0 \/ #paramvar265 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 < 0 \/ #paramvar254 < 0) \/ (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 < 0 \/ #paramvar279 + -#paramvar280 < 0 \/ #paramvar276 + -#paramvar277 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 < 0 \/ #paramvar268 + -#paramvar269 < 0 \/ #paramvar265 + -#paramvar266 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 < 0 \/ #paramvar257 + -#paramvar258 < 0 \/ #paramvar254 + -#paramvar255 < 0) \/ #paramvar251 <= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + -#paramvar249 >= 0 /\ #paramvar245 + -#paramvar246 >= 0 \/ #paramvar242 <= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + -#paramvar240 >= 0 /\ #paramvar236 + -#paramvar237 >= 0 \/ #paramvar233 <= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + -#paramvar231 >= 0 /\ #paramvar227 + -#paramvar228 >= 0
gen constr of example:(X96(2, 5) => X3(2, 0))
constr: [#S_2031] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 5 < 0 \/ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 5 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 5 < 0 \/ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 5 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 >= 0 /\ #paramvar276 + #paramvar277 * 2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 >= 0 /\ #paramvar265 + #paramvar266 * 2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 >= 0 /\ #paramvar254 + #paramvar255 * 2 >= 0
gen constr of example:(X2(-3, 3) => X3(-2, -1) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_2032] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -2 + #paramvar307 * -2 >= 0 /\ #paramvar302 + #paramvar303 * -2 + #paramvar304 * -2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -2 + #paramvar300 * -2 >= 0 /\ #paramvar295 + #paramvar296 * -2 + #paramvar297 * -2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 >= 0 /\ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 >= 0 /\ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 >= 0 /\ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 >= 0 /\ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 >= 0 /\ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 >= 0 /\ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -2 + #paramvar363 * -2 >= 0 /\ #paramvar358 + #paramvar359 * -2 + #paramvar360 * -2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -2 + #paramvar356 * -2 >= 0 /\ #paramvar351 + #paramvar352 * -2 + #paramvar353 * -2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -2 + #paramvar377 * -2 >= 0 /\ #paramvar372 + #paramvar373 * -2 + #paramvar374 * -2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -2 + #paramvar370 * -2 >= 0 /\ #paramvar365 + #paramvar366 * -2 + #paramvar367 * -2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -2 + #paramvar293 * -2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -2 + #paramvar289 * -2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + -#paramvar256 >= 0
gen constr of example:(X2(1, -2) /\ X2(5, 4) => X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3))
constr: [#S_2033] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 5 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar246 * 5 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 5 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar237 * 5 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 5 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar228 * 5 + #paramvar229 * 4 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 >= 0 /\ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 >= 0 /\ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -3 >= 0 /\ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -3 >= 0 /\ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -3 >= 0 /\ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -3 >= 0 /\ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -3 + #paramvar349 * -3 >= 0 /\ #paramvar344 + #paramvar345 * -3 + #paramvar346 * -3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -3 + #paramvar342 * -3 >= 0 /\ #paramvar337 + #paramvar338 * -3 + #paramvar339 * -3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 >= 0 /\ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 >= 0 /\ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -3 + #paramvar377 * -3 >= 0 /\ #paramvar372 + #paramvar373 * -3 + #paramvar374 * -3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -3 + #paramvar370 * -3 >= 0 /\ #paramvar365 + #paramvar366 * -3 + #paramvar367 * -3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -3 + #paramvar293 * -3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -3 + #paramvar289 * -3 >= 0
bounds constr: [#S_2034] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2035] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2036] true
bounds constr: [#S_2037] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2038] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2039] true
bounds constr: [#S_2040] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2041] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2042] true
bounds constr: [#S_2043] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2044] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2045] true
bounds constr: [#S_2046] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2047] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2048] true
bounds constr: [#S_2049] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2050] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2051] true
bounds constr: [#S_2052] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2053] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2054] true
bounds constr: [#S_2055] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2056] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2057] true
bounds constr: [#S_2058] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2059] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2060] true
bounds constr: [#S_2061] true
bounds constr: [#S_2062] true
bounds constr: [#S_2063] true
constraints generated
sat
************** current phase of 41st iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  1 + x2 != 0 /\ -2 + 2 * x1 >= 0 /\ 1 + -x1 + -x2 >= 0 \/ -1 + x2 != 0 /\ -2 + 2 * x2 >= 0 /\ -2 + 2 * x2 >= 0 \/ x2 != 0 /\ 1 + x1 + x2 >= 0 /\ 1 + -x1 + x2 >= 0
X3(x1: int, x2: int) :=
  -1 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ -1 + x1 + x2 = 0 /\ -1 + -x1 + x2 = 0 /\ 2 + x1 + 2 * x2 >= 0 /\ -1 + -x1 + -x2 >= 0 \/ 1 + x2 != 0 /\ 2 + -2 * x1 + -x2 >= 0 /\ -1 + x1 + 2 * x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 * x1 >= 0 /\ -2 + x1 >= 0 \/ x1 + -x2 = 0 /\ x1 >= 0 /\ -x1 >= 0
X92(x1: int, x2: int) :=
  -2 + -x1 >= 0 /\ 1 + x1 + x2 >= 0 \/ x1 + -x2 != 0 /\ -2 + -x2 >= 0 /\ -2 + x1 >= 0
X93(x1: int, x2: int) :=
  -2 + x1 + -x2 >= 0 /\ -1 + -x1 + x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x2 >= 0 /\ -2 + -x2 >= 0 \/ -2 + -x1 >= 0 /\ -1 + -2 * x2 >= 0
X95(x1: int, x2: int) :=
  -2 + -x1 + x2 >= 0 /\ -1 + x2 >= 0 \/ x1 + -x2 != 0 /\ -2 + -2 * x2 >= 0 /\ -2 + -x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 + x2 >= 0 /\ -1 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 + 2 * x1 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-2, 2) /\ X2(1, 0) => X1(-2, -1) \/ X1(1, -1) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(0, -1) /\ X95(-3, -1) => X1(0, -1));
(X2(0, 2) /\ X92(-3, 2) => X1(0, 2));
(X2(1, -3) /\ X91(2, 2) => X1(1, 2));
(X2(1, 1) /\ X94(-2, -2) => X1(1, -2));
(X3(-1, 0) => X2(-1, 0));
(X92(7, -5) => X3(7, -5));
(X94(-3, -3) => X3(-3, 1));
(X95(-3, -1) => X3(-3, -1))

************** current phase of 41st iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (48): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (309): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-2, 2) /\ X90(-4, 3) => );..]

*** labeling with SAT solving
************** current phase of 41st iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-2) 2)
refuting (X2 (-1) 0)
refuting (X2 0 (-1))
refuting (X2 0 2)
refuting (X2 1 (-3))
refuting (X2 1 0)
refuting (X2 1 1)
refuting (X3 (-3) (-1))
refuting (X3 (-3) 1)
refuting (X3 (-1) 0)
refuting (X3 7 (-5))
refuting (X90 (-1) (-1))
refuting (X91 (-1) (-1))
refuting (X91 2 2)
refuting (X92 (-3) 2)
refuting (X92 (-1) (-1))
refuting (X92 7 (-5))
refuting (X93 (-1) (-1))
refuting (X94 (-3) (-3))
refuting (X94 (-2) (-2))
refuting (X94 (-1) (-1))
refuting (X95 (-3) (-1))
refuting (X95 (-1) (-1))
refuting (X96 (-1) (-1))
proving (X2 (-2) 2)
proving (X2 (-1) 0)
proving (X2 0 (-1))
proving (X2 0 2)
proving (X2 1 (-3))
proving (X2 1 0)
proving (X2 1 1)
proving (X3 (-3) (-1))
proving (X3 (-3) 1)
proving (X3 (-1) 0)
proving (X3 7 (-5))
proving (X90 (-1) (-1))
proving (X91 (-1) (-1))
proving (X91 2 2)
proving (X92 (-3) 2)
proving (X92 (-1) (-1))
proving (X92 7 (-5))
proving (X93 (-1) (-1))
proving (X94 (-3) (-3))
proving (X94 (-2) (-2))
proving (X94 (-1) (-1))
proving (X95 (-3) (-1))
proving (X95 (-1) (-1))
proving (X96 (-1) (-1))
*** Example Instances obtained by Resolution:


************** current phase of 41st iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (48): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (309): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-2, 2) /\ X90(-4, 3) => );..]

*** labeling with SAT solving
************** current phase of 42nd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (25):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
table:
FTFFTT_TFFTTTFFTTFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (50):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
table:
FTTFFTFFF___TFFFTFFTTFFTTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
table:
FTFFTF__TFFFFFTTTTTTFFFFFT


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (66):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (61):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTT

gen constr of example:(X2(0, -1) /\ X95(-3, -1) => )
constr: [#S_2064] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * -3 + -#paramvar363 < 0 \/ #paramvar358 + #paramvar359 * -3 + -#paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * -3 + -#paramvar356 < 0 \/ #paramvar351 + #paramvar352 * -3 + -#paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, 2) /\ X92(-3, 2) => )
constr: [#S_2065] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -3 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 * -3 + #paramvar318 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -3 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 * -3 + #paramvar311 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar229 * 2 < 0)
gen constr of example:(X2(1, -3) /\ X91(2, 2) => )
constr: [#S_2066] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 < 0 \/ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 < 0 \/ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -3 < 0)
gen constr of example:(X2(1, 1) /\ X94(-2, -2) => )
constr: [#S_2067] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 < 0)
gen constr of example:(X3(-1, 0) => X2(-1, 0))
constr: [#S_2068] (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 < 0 \/ #paramvar279 + -#paramvar280 < 0 \/ #paramvar276 + -#paramvar277 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 < 0 \/ #paramvar268 + -#paramvar269 < 0 \/ #paramvar265 + -#paramvar266 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 < 0 \/ #paramvar257 + -#paramvar258 < 0 \/ #paramvar254 + -#paramvar255 < 0) \/ #paramvar251 <= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + -#paramvar249 >= 0 /\ #paramvar245 + -#paramvar246 >= 0 \/ #paramvar242 <= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + -#paramvar240 >= 0 /\ #paramvar236 + -#paramvar237 >= 0 \/ #paramvar233 <= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + -#paramvar231 >= 0 /\ #paramvar227 + -#paramvar228 >= 0
gen constr of example:(X95(-3, -1) => X3(-3, -1))
constr: [#S_2069] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * -3 + -#paramvar363 < 0 \/ #paramvar358 + #paramvar359 * -3 + -#paramvar360 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * -3 + -#paramvar356 < 0 \/ #paramvar351 + #paramvar352 * -3 + -#paramvar353 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -3 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -3 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -3 + -#paramvar256 >= 0
gen constr of example:(X94(-3, -3) => X3(-3, 1))
constr: [#S_2070] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * -3 + #paramvar349 * -3 < 0 \/ #paramvar344 + #paramvar345 * -3 + #paramvar346 * -3 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * -3 + #paramvar342 * -3 < 0 \/ #paramvar337 + #paramvar338 * -3 + #paramvar339 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 >= 0
gen constr of example:(X92(7, -5) => X3(7, -5))
constr: [#S_2071] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * 7 + #paramvar321 * -5 < 0 \/ #paramvar316 + #paramvar317 * 7 + #paramvar318 * -5 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * 7 + #paramvar314 * -5 < 0 \/ #paramvar309 + #paramvar310 * 7 + #paramvar311 * -5 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 7 + #paramvar281 * -5 >= 0 /\ #paramvar276 + #paramvar277 * 7 + #paramvar278 * -5 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 7 + #paramvar270 * -5 >= 0 /\ #paramvar265 + #paramvar266 * 7 + #paramvar267 * -5 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 7 + #paramvar259 * -5 >= 0 /\ #paramvar254 + #paramvar255 * 7 + #paramvar256 * -5 >= 0
gen constr of example:(X2(-2, 2) /\ X2(1, 0) => X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_2072] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0
bounds constr: [#S_2073] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2074] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2075] true
bounds constr: [#S_2076] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2077] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2078] true
bounds constr: [#S_2079] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2080] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2081] true
bounds constr: [#S_2082] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2083] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2084] true
bounds constr: [#S_2085] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2086] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2087] true
bounds constr: [#S_2088] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2089] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2090] true
bounds constr: [#S_2091] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2092] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2093] true
bounds constr: [#S_2094] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2095] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2096] true
bounds constr: [#S_2097] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2098] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2099] true
bounds constr: [#S_2100] true
bounds constr: [#S_2101] true
bounds constr: [#S_2102] true
constraints generated
sat
************** current phase of 42nd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  1 + -2 * x1 >= 0 /\ 1 + 2 * x1 >= 0 \/ -1 + x1 + -x2 >= 0 /\ 1 + -x1 + x2 >= 0 \/ 1 + x2 != 0 /\ x1 + x2 >= 0 /\ 2 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 = 0 /\ -1 + x1 + x2 != 0 /\ -1 + x1 + 2 * x2 >= 0 /\ -1 + x1 + 2 * x2 >= 0 \/ 2 * x1 + -x2 >= 0 /\ 2 + -2 * x1 + x2 >= 0 \/ 1 + x2 != 0 /\ -2 + x1 >= 0 /\ 2 + x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 * x2 >= 0
X91(x1: int, x2: int) :=
  -2 + x1 + x2 >= 0 /\ -1 + -2 * x1 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ 2 + -x1 + x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -1 + x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ x1 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 1 + x1 + x2 >= 0 /\ -2 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0 /\ 1 + -x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(0, -2) /\ X90(-1, -1) => X1(0, -1));
(X2(0, 2) /\ X2(1, 0) => X1(0, 1) \/ X1(1, 1) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X2(0, 3) => X1(0, 2) \/ X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X2(2, 0) /\ X96(1, -2) => X1(2, -2));
(X2(4, -4) /\ X91(-1, 3) => X1(4, 3));
(X3(2, -3) => X2(2, -3));
(X90(-2, -2) => X3(-2, -3));
(X91(-4, 6) => X3(-4, -7))

************** current phase of 42nd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (48): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (317): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-2, 2) /\ X90(-4, 3) => );..]

*** labeling with SAT solving
************** current phase of 42nd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 1 1)
refuting (X1 4 3)
  added as a negative example with: 
  add negative example(X1(4, 3) => )
refuting (X2 0 (-2))
refuting (X2 0 2)
refuting (X2 0 3)
refuting (X2 1 0)
refuting (X2 2 (-3))
refuting (X2 2 0)
refuting (X2 4 (-4))
refuting (X3 (-4) (-7))
refuting (X3 (-2) (-3))
refuting (X3 2 (-3))
refuting (X3 2 (-1))
refuting (X90 (-2) (-2))
refuting (X90 (-1) (-1))
refuting (X90 1 1)
refuting (X90 2 2)
refuting (X91 (-4) 6)
refuting (X91 (-1) 3)
refuting (X91 1 1)
refuting (X91 2 2)
refuting (X92 1 1)
refuting (X92 2 2)
refuting (X93 1 1)
refuting (X93 2 2)
refuting (X94 1 1)
refuting (X94 2 2)
refuting (X95 1 1)
refuting (X95 2 2)
refuting (X96 1 (-2))
refuting (X96 1 1)
refuting (X96 2 2)
proving (X1 1 1)
proving (X1 4 3)
proving (X2 0 (-2))
proving (X2 0 2)
proving (X2 0 3)
proving (X2 1 0)
proving (X2 2 (-3))
proving (X2 2 0)
proving (X2 4 (-4))
proving (X3 (-4) (-7))
proving (X3 (-2) (-3))
proving (X3 2 (-3))
proving (X3 2 (-1))
proving (X90 (-2) (-2))
proving (X90 (-1) (-1))
proving (X90 1 1)
proving (X90 2 2)
proving (X91 (-4) 6)
proving (X91 (-1) 3)
proving (X91 1 1)
proving (X91 2 2)
proving (X92 1 1)
proving (X92 2 2)
proving (X93 1 1)
proving (X93 2 2)
proving (X94 1 1)
proving (X94 2 2)
proving (X95 1 1)
proving (X95 2 2)
proving (X96 1 (-2))
proving (X96 1 1)
proving (X96 2 2)
*** Example Instances obtained by Resolution:
(X1(4, 3) => )

************** current phase of 42nd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (49): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (317): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );
(X2(-2, 2) /\ X90(-4, 3) => );..]

*** labeling with SAT solving
************** current phase of 43rd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (26):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (51):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
table:
FTTFFTFFF___TFFFTFFTTFFTTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (67):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (63):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTT

gen constr of example:(X1(4, 3) => )
constr: [#S_2103] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 4 + #paramvar225 * 3 < 0
gen constr of example:(X2(0, -2) /\ X90(-1, -1) => )
constr: [#S_2104] (#paramvar294 < 0 \/ #paramvar291 + -#paramvar292 + -#paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + -#paramvar288 + -#paramvar289 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar229 * -2 < 0)
gen constr of example:(X2(2, 0) /\ X96(1, -2) => )
constr: [#S_2105] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 + #paramvar377 * -2 < 0 \/ #paramvar372 + #paramvar373 + #paramvar374 * -2 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 + #paramvar370 * -2 < 0 \/ #paramvar365 + #paramvar366 + #paramvar367 * -2 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 < 0 \/ #paramvar245 + #paramvar246 * 2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 < 0 \/ #paramvar236 + #paramvar237 * 2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 < 0 \/ #paramvar227 + #paramvar228 * 2 < 0)
gen constr of example:(X2(4, -4) /\ X91(-1, 3) => )
constr: [#S_2106] (#paramvar308 > 0 \/ #paramvar305 + -#paramvar306 + #paramvar307 * 3 < 0 \/ #paramvar302 + -#paramvar303 + #paramvar304 * 3 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + -#paramvar299 + #paramvar300 * 3 < 0 \/ #paramvar295 + -#paramvar296 + #paramvar297 * 3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 4 + #paramvar250 * -4 < 0 \/ #paramvar245 + #paramvar246 * 4 + #paramvar247 * -4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 4 + #paramvar241 * -4 < 0 \/ #paramvar236 + #paramvar237 * 4 + #paramvar238 * -4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 4 + #paramvar232 * -4 < 0 \/ #paramvar227 + #paramvar228 * 4 + #paramvar229 * -4 < 0)
gen constr of example:(X3(2, -3) => X2(2, -3))
constr: [#S_2107] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 2 + #paramvar281 * -3 < 0 \/ #paramvar276 + #paramvar277 * 2 + #paramvar278 * -3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 2 + #paramvar270 * -3 < 0 \/ #paramvar265 + #paramvar266 * 2 + #paramvar267 * -3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 2 + #paramvar259 * -3 < 0 \/ #paramvar254 + #paramvar255 * 2 + #paramvar256 * -3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 2 + #paramvar250 * -3 >= 0 /\ #paramvar245 + #paramvar246 * 2 + #paramvar247 * -3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 2 + #paramvar241 * -3 >= 0 /\ #paramvar236 + #paramvar237 * 2 + #paramvar238 * -3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 2 + #paramvar232 * -3 >= 0 /\ #paramvar227 + #paramvar228 * 2 + #paramvar229 * -3 >= 0
gen constr of example:(X91(-4, 6) => X3(-4, -7))
constr: [#S_2108] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * -4 + #paramvar307 * 6 < 0 \/ #paramvar302 + #paramvar303 * -4 + #paramvar304 * 6 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * -4 + #paramvar300 * 6 < 0 \/ #paramvar295 + #paramvar296 * -4 + #paramvar297 * 6 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -4 + #paramvar281 * -7 >= 0 /\ #paramvar276 + #paramvar277 * -4 + #paramvar278 * -7 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -4 + #paramvar270 * -7 >= 0 /\ #paramvar265 + #paramvar266 * -4 + #paramvar267 * -7 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -4 + #paramvar259 * -7 >= 0 /\ #paramvar254 + #paramvar255 * -4 + #paramvar256 * -7 >= 0
gen constr of example:(X90(-2, -2) => X3(-2, -3))
constr: [#S_2109] (#paramvar294 < 0 \/ #paramvar291 + #paramvar292 * -2 + #paramvar293 * -2 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + #paramvar288 * -2 + #paramvar289 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * -3 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * -3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * -3 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * -3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * -3 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * -3 >= 0
gen constr of example:(X2(0, 2) /\ X2(1, 0) => X1(1, 1) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_2110] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar229 * 2 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + #paramvar224 + #paramvar225 >= 0 \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0
gen constr of example:(X2(0, 3) => X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_2111] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + -#paramvar256 >= 0
bounds constr: [#S_2112] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2113] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2114] true
bounds constr: [#S_2115] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2116] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2117] true
bounds constr: [#S_2118] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2119] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2120] true
bounds constr: [#S_2121] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2122] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2123] true
bounds constr: [#S_2124] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2125] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2126] true
bounds constr: [#S_2127] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2128] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2129] true
bounds constr: [#S_2130] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2131] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2132] true
bounds constr: [#S_2133] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2134] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2135] true
bounds constr: [#S_2136] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2137] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2138] true
bounds constr: [#S_2139] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2140] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2141] true
constraints generated
sat
************** current phase of 43rd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ 2 + -x1 + x2 >= 0 /\ 1 + x1 + -x2 >= 0 \/ -1 + x2 != 0 /\ -x1 + -x2 >= 0 /\ 1 + x1 + -x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ -2 + -2 * x1 >= 0 /\ -2 + -x1 + x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ -1 + x1 + -2 * x2 >= 0 /\ -1 + -x1 + -2 * x2 >= 0 \/ -1 + x2 != 0 /\ 1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ 1 + 2 * x1 + x2 >= 0 /\ 2 + -x1 + x2 >= 0 \/ x2 != 0 /\ 2 + x1 >= 0 /\ -1 + -x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + x1 + x2 >= 0 /\ -1 + -2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x2 >= 0 /\ -2 + -x1 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 + -x2 >= 0 /\ x2 >= 0 \/ x1 + -x2 = 0 /\ x1 >= 0 /\ -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0 /\ x2 >= 0 \/ x1 + -x2 = 0 /\ 2 * x1 >= 0 /\ 1 + -x1 + -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + x1 >= 0 /\ -x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 + x2 >= 0 /\ x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ 2 + 2 * x2 >= 0
X96(x1: int, x2: int) :=
  2 + 2 * x2 >= 0 /\ -2 + x1 >= 0 \/ x1 + -x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 0) /\ X92(0, 0) => X1(-1, 0));
(X2(-1, 0) /\ X93(0, 0) => X1(-1, 0));
(X2(-1, 2) /\ X2(0, 0) => X1(-1, 1) \/ X1(0, 1) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X2(-4, 2) /\ X91(-3, -3) => X1(-4, -3));
(X2(0, -1) /\ X95(-1, -1) => X1(0, -1));
(X2(0, 0) /\ X96(2, 1) => X1(0, 1));
(X2(4, 2) => X1(4, 1) \/ X3(1, 0) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X3(-3, -6) /\ X3(11, -6) => X2(11, -6));
(X91(-3, -3) => X3(-3, 2));
(X94(2, -2) => X3(2, 1));
(X96(3, -1) => X3(3, 0))

************** current phase of 43rd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (49): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (328): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 43rd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 4 1)
  added as a negative example with: 
  add negative example(X1(4, 1) => )
refuting (X2 (-4) 2)
refuting (X2 (-1) 0)
refuting (X2 (-1) 2)
refuting (X2 0 (-1))
refuting (X2 0 0)
refuting (X2 4 (-4))
refuting (X2 4 2)
refuting (X2 11 (-6))
refuting (X3 (-3) (-6))
refuting (X3 (-3) 2)
refuting (X3 1 0)
refuting (X3 2 1)
refuting (X3 3 0)
refuting (X3 11 (-6))
refuting (X90 1 1)
refuting (X91 (-3) (-3))
refuting (X91 (-1) 3)
refuting (X91 1 1)
refuting (X92 0 0)
refuting (X92 1 1)
refuting (X93 0 0)
refuting (X93 1 1)
refuting (X94 1 1)
refuting (X94 2 (-2))
refuting (X95 (-1) (-1))
refuting (X95 1 1)
refuting (X96 1 1)
refuting (X96 2 1)
refuting (X96 3 (-1))
proving (X1 4 1)
proving (X1 4 3)
proving (X2 (-4) 2)
proving (X2 (-1) 0)
proving (X2 (-1) 2)
proving (X2 0 (-1))
proving (X2 0 0)
proving (X2 4 (-4))
proving (X2 4 2)
proving (X2 11 (-6))
proving (X3 (-3) (-6))
proving (X3 (-3) 2)
proving (X3 1 0)
proving (X3 2 1)
proving (X3 3 0)
proving (X3 11 (-6))
proving (X90 1 1)
proving (X91 (-3) (-3))
proving (X91 (-1) 3)
proving (X91 1 1)
proving (X92 0 0)
proving (X92 1 1)
proving (X93 0 0)
proving (X93 1 1)
proving (X94 1 1)
proving (X94 2 (-2))
proving (X95 (-1) (-1))
proving (X95 1 1)
proving (X96 1 1)
proving (X96 2 1)
proving (X96 3 (-1))
*** Example Instances obtained by Resolution:
(X1(4, 1) => )

************** current phase of 43rd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (50): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (328): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 44th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (52):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
table:
FTTFFTFFF___TFFFTFFTTFFTTFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (71):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (65):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTT

gen constr of example:(X1(4, 1) => )
constr: [#S_2142] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 4 + #paramvar225 < 0
gen constr of example:(X2(-4, 2) /\ X91(-3, -3) => )
constr: [#S_2143] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 < 0 \/ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 < 0 \/ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -4 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -4 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -4 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -4 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -4 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -4 + #paramvar229 * 2 < 0)
gen constr of example:(X2(-1, 0) /\ X92(0, 0) => )
constr: [#S_2144] (#paramvar322 < 0 \/ #paramvar319 < 0 \/ #paramvar316 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 < 0 \/ #paramvar309 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(-1, 0) /\ X93(0, 0) => )
constr: [#S_2145] (#paramvar336 < 0 \/ #paramvar333 < 0 \/ #paramvar330 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 < 0 \/ #paramvar323 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(0, -1) /\ X95(-1, -1) => )
constr: [#S_2146] (#paramvar364 < 0 \/ #paramvar361 + -#paramvar362 + -#paramvar363 < 0 \/ #paramvar358 + -#paramvar359 + -#paramvar360 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + -#paramvar355 + -#paramvar356 < 0 \/ #paramvar351 + -#paramvar352 + -#paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar229 < 0)
gen constr of example:(X2(0, 0) /\ X96(2, 1) => )
constr: [#S_2147] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * 2 + #paramvar377 < 0 \/ #paramvar372 + #paramvar373 * 2 + #paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * 2 + #paramvar370 < 0 \/ #paramvar365 + #paramvar366 * 2 + #paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X3(-3, -6) /\ X3(11, -6) => X2(11, -6))
constr: [#S_2148] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -3 + #paramvar281 * -6 < 0 \/ #paramvar276 + #paramvar277 * -3 + #paramvar278 * -6 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -3 + #paramvar270 * -6 < 0 \/ #paramvar265 + #paramvar266 * -3 + #paramvar267 * -6 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -3 + #paramvar259 * -6 < 0 \/ #paramvar254 + #paramvar255 * -3 + #paramvar256 * -6 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 11 + #paramvar281 * -6 < 0 \/ #paramvar276 + #paramvar277 * 11 + #paramvar278 * -6 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 11 + #paramvar270 * -6 < 0 \/ #paramvar265 + #paramvar266 * 11 + #paramvar267 * -6 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 11 + #paramvar259 * -6 < 0 \/ #paramvar254 + #paramvar255 * 11 + #paramvar256 * -6 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 11 + #paramvar250 * -6 >= 0 /\ #paramvar245 + #paramvar246 * 11 + #paramvar247 * -6 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 11 + #paramvar241 * -6 >= 0 /\ #paramvar236 + #paramvar237 * 11 + #paramvar238 * -6 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 11 + #paramvar232 * -6 >= 0 /\ #paramvar227 + #paramvar228 * 11 + #paramvar229 * -6 >= 0
gen constr of example:(X91(-3, -3) => X3(-3, 2))
constr: [#S_2149] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 < 0 \/ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 < 0 \/ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 * 2 >= 0
gen constr of example:(X94(2, -2) => X3(2, 1))
constr: [#S_2150] (#paramvar350 > 0 \/ #paramvar347 + #paramvar348 * 2 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar345 * 2 + #paramvar346 * -2 < 0) /\ (#paramvar343 > 0 \/ #paramvar340 + #paramvar341 * 2 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar338 * 2 + #paramvar339 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 >= 0
gen constr of example:(X96(3, -1) => X3(3, 0))
constr: [#S_2151] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * 3 + -#paramvar377 < 0 \/ #paramvar372 + #paramvar373 * 3 + -#paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * 3 + -#paramvar370 < 0 \/ #paramvar365 + #paramvar366 * 3 + -#paramvar367 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 >= 0 /\ #paramvar276 + #paramvar277 * 3 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 >= 0 /\ #paramvar265 + #paramvar266 * 3 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 >= 0 /\ #paramvar254 + #paramvar255 * 3 >= 0
gen constr of example:(X2(4, 2) => X3(1, 0) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_2152] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 4 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * 4 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 4 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * 4 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 4 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * 4 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 >= 0 /\ #paramvar276 + #paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 >= 0 /\ #paramvar265 + #paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 >= 0 /\ #paramvar254 + #paramvar255 >= 0
gen constr of example:(X2(-1, 2) /\ X2(0, 0) => X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_2153] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0
bounds constr: [#S_2154] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2155] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2156] true
bounds constr: [#S_2157] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2158] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2159] true
bounds constr: [#S_2160] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2161] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2162] true
bounds constr: [#S_2163] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2164] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2165] true
bounds constr: [#S_2166] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2167] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2168] true
bounds constr: [#S_2169] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2170] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2171] true
bounds constr: [#S_2172] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2173] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2174] true
bounds constr: [#S_2175] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2176] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2177] true
bounds constr: [#S_2178] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2179] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2180] true
bounds constr: [#S_2181] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2182] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2183] true
constraints generated
sat
************** current phase of 44th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ 1 + x2 != 0 /\ -1 + x1 + -x2 >= 0 /\ 1 + -x1 + x2 >= 0 \/ x1 + x2 >= 0 /\ -x1 + -x2 >= 0 \/ -2 + x1 + -x2 >= 0 /\ -1 + -x2 >= 0
X3(x1: int, x2: int) :=
  x2 = 0 /\ -1 + x2 = 0 /\ 2 + 2 * x1 + x2 >= 0 /\ 1 + -2 * x1 + -x2 >= 0 \/ -1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ 1 + x1 + -2 * x2 >= 0 /\ 1 + x1 + 2 * x2 >= 0 \/ -1 + x2 = 0 /\ 1 + -x1 + 2 * x2 >= 0 /\ -1 + -2 * x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -1 + x1 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 >= 0 /\ -1 + -x1 + x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x2 >= 0 /\ 1 + x2 >= 0 \/ x1 + -x2 != 0 /\ -2 + x1 + -x2 >= 0 /\ -1 + -x1 >= 0
X94(x1: int, x2: int) :=
  2 * x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 + -x2 >= 0 /\ -1 + -x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ -1 + x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 * x1 >= 0 /\ 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + x1 >= 0 /\ -x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(0, 0) /\ X96(2, 2) => X1(0, 2));
(X2(2, -1) /\ X93(1, 1) => X1(2, 1));
(X2(2, 1) /\ X94(-1, -1) => X1(2, -1));
(X3(0, 0) /\ X3(4, 0) => X2(4, 0));
(X93(-1, -3) => X3(-1, 3))

************** current phase of 44th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (50): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (333): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 44th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 0 0)
refuting (X2 2 (-1))
refuting (X2 2 1)
refuting (X2 4 0)
refuting (X2 4 2)
refuting (X3 (-1) 3)
refuting (X3 0 0)
refuting (X3 1 0)
refuting (X3 4 0)
refuting (X90 1 1)
refuting (X91 1 1)
refuting (X92 1 1)
refuting (X93 (-1) (-3))
refuting (X93 1 1)
refuting (X94 (-1) (-1))
refuting (X94 1 1)
refuting (X95 1 1)
refuting (X96 1 1)
refuting (X96 2 2)
proving (X1 4 1)
proving (X2 0 0)
proving (X2 2 (-1))
proving (X2 2 1)
proving (X2 4 0)
proving (X2 4 2)
proving (X3 (-1) 3)
proving (X3 0 0)
proving (X3 1 0)
proving (X3 4 0)
proving (X90 1 1)
proving (X91 1 1)
proving (X92 1 1)
proving (X93 (-1) (-3))
proving (X93 1 1)
proving (X94 (-1) (-1))
proving (X94 1 1)
proving (X95 1 1)
proving (X96 1 1)
proving (X96 2 2)
*** Example Instances obtained by Resolution:


************** current phase of 44th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (50): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (333): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );
(X2(-2, 1) /\ X94(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 45th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (52):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (72):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFT
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (27):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (66):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTF
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTT

gen constr of example:(X2(0, 0) /\ X96(2, 2) => )
constr: [#S_2184] (#paramvar378 < 0 \/ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 < 0 \/ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 < 0 \/ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X2(2, -1) /\ X93(1, 1) => )
constr: [#S_2185] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 + #paramvar335 < 0 \/ #paramvar330 + #paramvar331 + #paramvar332 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 + #paramvar328 < 0 \/ #paramvar323 + #paramvar324 + #paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + -#paramvar229 < 0)
gen constr of example:(X2(2, 1) /\ X94(-1, -1) => )
constr: [#S_2186] (#paramvar350 < 0 \/ #paramvar347 + -#paramvar348 + -#paramvar349 < 0 \/ #paramvar344 + -#paramvar345 + -#paramvar346 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + -#paramvar341 + -#paramvar342 < 0 \/ #paramvar337 + -#paramvar338 + -#paramvar339 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 < 0)
gen constr of example:(X3(0, 0) /\ X3(4, 0) => X2(4, 0))
constr: [#S_2187] (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 < 0 \/ #paramvar276 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 < 0 \/ #paramvar265 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 < 0 \/ #paramvar254 < 0) \/ (#paramvar282 < 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 4 < 0 \/ #paramvar276 + #paramvar277 * 4 < 0) /\ (#paramvar271 < 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 4 < 0 \/ #paramvar265 + #paramvar266 * 4 < 0) /\ (#paramvar260 < 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 4 < 0 \/ #paramvar254 + #paramvar255 * 4 < 0) \/ #paramvar251 <= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 4 >= 0 /\ #paramvar245 + #paramvar246 * 4 >= 0 \/ #paramvar242 <= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 4 >= 0 /\ #paramvar236 + #paramvar237 * 4 >= 0 \/ #paramvar233 <= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 4 >= 0 /\ #paramvar227 + #paramvar228 * 4 >= 0
gen constr of example:(X93(-1, -3) => X3(-1, 3))
constr: [#S_2188] (#paramvar336 > 0 \/ #paramvar333 + -#paramvar334 + #paramvar335 * -3 < 0 \/ #paramvar330 + -#paramvar331 + #paramvar332 * -3 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + -#paramvar327 + #paramvar328 * -3 < 0 \/ #paramvar323 + -#paramvar324 + #paramvar325 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 * 3 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 * 3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 * 3 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 * 3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 * 3 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 * 3 >= 0
bounds constr: [#S_2189] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2190] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2191] true
bounds constr: [#S_2192] true
bounds constr: [#S_2193] true
bounds constr: [#S_2194] true
bounds constr: [#S_2195] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2196] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2197] true
bounds constr: [#S_2198] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2199] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2200] true
bounds constr: [#S_2201] true
bounds constr: [#S_2202] true
bounds constr: [#S_2203] true
bounds constr: [#S_2204] true
bounds constr: [#S_2205] true
bounds constr: [#S_2206] true
bounds constr: [#S_2207] true
bounds constr: [#S_2208] true
bounds constr: [#S_2209] true
bounds constr: [#S_2210] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2211] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2212] true
bounds constr: [#S_2213] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2214] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2215] true
bounds constr: [#S_2216] true
bounds constr: [#S_2217] true
bounds constr: [#S_2218] true
constraints generated
sat
************** current phase of 45th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 != 0 /\ -x1 + x2 >= 0 /\ x1 + -x2 >= 0 \/ -1 + x2 = 0 /\ -1 + -x1 + x2 >= 0 /\ 1 + 2 * x1 >= 0 \/ x2 != 0 /\ 1 + x1 + x2 >= 0 /\ -1 + -x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ 1 + x1 + x2 >= 0 /\ -2 * x1 + -x2 >= 0 \/ x2 != 0 /\ -1 + -x1 + x2 != 0 /\ -1 + -2 * x1 + x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ -1 + x1 + x2 = 0 /\ 2 + -x2 >= 0 /\ 1 + -2 * x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 + 2 * x1 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ -2 + -x1 >= 0 \/ x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ 2 * x1 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 1 + -2 * x2 >= 0 /\ -2 + x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + -x1 >= 0 /\ -2 + x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ 1 + 2 * x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + 2 * x1 >= 0 /\ -x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ -1 + 2 * x1 >= 0 \/ -2 + -x2 >= 0 /\ -2 + x1 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 * x1 >= 0 /\ -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 >= 0 /\ x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
( => X3(3, -2) \/ X3(3, 4) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3));
(X2(-1, -1) /\ X95(2, -2) => X1(-1, -2));
(X2(-2, -2) /\ X91(1, 1) => X1(-2, 1));
(X2(-2, -2) /\ X92(-2, -2) => X1(-2, -2));
(X2(-2, -2) => X1(-2, 3) \/ X3(3, 4) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3));
(X2(-2, 1) /\ X94(0, 0) => X1(-2, 0));
(X2(-3, 2) /\ X2(0, 0) => X1(-3, -1) \/ X1(0, -1) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(-5, 4) => X1(-5, 3) \/ X3(3, -2) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3));
(X2(1, -2) /\ X93(2, 2) => X1(1, 2));
(X3(-1, 2) /\ X3(-4, 2) => X2(-1, 2));
(X93(2, 2) => X3(2, -2));
(X95(2, -2) => X3(2, -1))

************** current phase of 45th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (50): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );
(X1(-1, 1) => );
(X1(-1, 2) => );..]
*** undecided (345): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );..]

*** labeling with SAT solving
************** current phase of 45th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-5) 3)
  added as a negative example with: 
  add negative example(X1(-5, 3) => )
refuting (X1 (-3) (-1))
  added as a negative example with: 
  add negative example(X1(-3, -1) => )
refuting (X1 (-2) (-2))
refuting (X2 (-5) 4)
refuting (X2 (-3) 2)
refuting (X2 (-2) (-2))
refuting (X2 (-2) 1)
refuting (X2 (-1) (-1))
refuting (X2 (-1) 2)
refuting (X2 0 0)
refuting (X2 1 (-2))
refuting (X3 (-4) 2)
refuting (X3 (-1) 2)
refuting (X3 2 (-2))
refuting (X3 2 (-1))
refuting (X3 3 (-2))
refuting (X3 3 4)
refuting (X90 (-1) (-1))
refuting (X90 3 3)
refuting (X91 (-1) (-1))
refuting (X91 1 1)
refuting (X91 3 3)
refuting (X92 (-2) (-2))
refuting (X92 (-1) (-1))
refuting (X92 3 3)
refuting (X93 (-1) (-1))
refuting (X93 2 2)
refuting (X93 3 3)
refuting (X94 (-1) (-1))
refuting (X94 0 0)
refuting (X94 3 3)
refuting (X95 (-1) (-1))
refuting (X95 2 (-2))
refuting (X95 3 3)
refuting (X96 (-1) (-1))
refuting (X96 3 3)
proving (X1 (-5) 3)
proving (X1 (-3) (-1))
proving (X1 (-2) (-2))
proving (X2 (-5) 4)
proving (X2 (-3) 2)
proving (X2 (-2) (-2))
proving (X2 (-2) 1)
proving (X2 (-1) (-1))
proving (X2 (-1) 2)
proving (X2 0 0)
proving (X2 1 (-2))
proving (X3 (-4) 2)
proving (X3 (-1) 2)
proving (X3 2 (-2))
proving (X3 2 (-1))
proving (X3 3 (-2))
proving (X3 3 4)
proving (X90 (-1) (-1))
proving (X90 3 3)
proving (X91 (-1) (-1))
proving (X91 1 1)
proving (X91 3 3)
proving (X92 (-2) (-2))
proving (X92 (-1) (-1))
proving (X92 3 3)
proving (X93 (-1) (-1))
proving (X93 2 2)
proving (X93 3 3)
proving (X94 (-1) (-1))
proving (X94 0 0)
proving (X94 3 3)
proving (X95 (-1) (-1))
proving (X95 2 (-2))
proving (X95 3 3)
proving (X96 (-1) (-1))
proving (X96 3 3)
*** Example Instances obtained by Resolution:
(X1(-5, 3) => );
(X1(-3, -1) => )

************** current phase of 45th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (52): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );..]
*** undecided (345): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );
(X2(-2, 1) /\ X94(0, -1) => );..]

*** labeling with SAT solving
************** current phase of 46th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (55):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (74):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFT


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (66):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTF
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTT

gen constr of example:(X1(-5, 3) => )
constr: [#S_2219] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -5 + #paramvar225 * 3 < 0
gen constr of example:(X1(-3, -1) => )
constr: [#S_2220] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -3 + -#paramvar225 < 0
gen constr of example:(X2(-2, -2) /\ X91(1, 1) => )
constr: [#S_2221] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 + #paramvar307 < 0 \/ #paramvar302 + #paramvar303 + #paramvar304 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 + #paramvar300 < 0 \/ #paramvar295 + #paramvar296 + #paramvar297 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * -2 < 0)
gen constr of example:(X2(-2, 1) /\ X94(0, 0) => )
constr: [#S_2222] (#paramvar350 < 0 \/ #paramvar347 < 0 \/ #paramvar344 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 < 0 \/ #paramvar337 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 < 0)
gen constr of example:(X2(-1, -1) /\ X95(2, -2) => )
constr: [#S_2223] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * 2 + #paramvar363 * -2 < 0 \/ #paramvar358 + #paramvar359 * 2 + #paramvar360 * -2 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * 2 + #paramvar356 * -2 < 0 \/ #paramvar351 + #paramvar352 * 2 + #paramvar353 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(1, -2) /\ X93(2, 2) => )
constr: [#S_2224] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 < 0 \/ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 < 0 \/ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -2 < 0)
gen constr of example:(X2(-2, -2) /\ X92(-2, -2) => X1(-2, -2))
constr: [#S_2225] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * -2 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + #paramvar224 * -2 + #paramvar225 * -2 >= 0
gen constr of example:(X3(-1, 2) /\ X3(-4, 2) => X2(-1, 2))
constr: [#S_2226] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -4 + #paramvar281 * 2 < 0 \/ #paramvar276 + #paramvar277 * -4 + #paramvar278 * 2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -4 + #paramvar270 * 2 < 0 \/ #paramvar265 + #paramvar266 * -4 + #paramvar267 * 2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -4 + #paramvar259 * 2 < 0 \/ #paramvar254 + #paramvar255 * -4 + #paramvar256 * 2 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar280 + #paramvar281 * 2 < 0 \/ #paramvar276 + -#paramvar277 + #paramvar278 * 2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar269 + #paramvar270 * 2 < 0 \/ #paramvar265 + -#paramvar266 + #paramvar267 * 2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar258 + #paramvar259 * 2 < 0 \/ #paramvar254 + -#paramvar255 + #paramvar256 * 2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + -#paramvar249 + #paramvar250 * 2 >= 0 /\ #paramvar245 + -#paramvar246 + #paramvar247 * 2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + -#paramvar240 + #paramvar241 * 2 >= 0 /\ #paramvar236 + -#paramvar237 + #paramvar238 * 2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + -#paramvar231 + #paramvar232 * 2 >= 0 /\ #paramvar227 + -#paramvar228 + #paramvar229 * 2 >= 0
gen constr of example:(X93(2, 2) => X3(2, -2))
constr: [#S_2227] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 < 0 \/ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 < 0 \/ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 * -2 >= 0
gen constr of example:(X95(2, -2) => X3(2, -1))
constr: [#S_2228] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * 2 + #paramvar363 * -2 < 0 \/ #paramvar358 + #paramvar359 * 2 + #paramvar360 * -2 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * 2 + #paramvar356 * -2 < 0 \/ #paramvar351 + #paramvar352 * 2 + #paramvar353 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + -#paramvar256 >= 0
gen constr of example:( => X3(3, -2) \/ X3(3, 4) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3))
constr: [#S_2229] #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 3 + #paramvar307 * 3 >= 0 /\ #paramvar302 + #paramvar303 * 3 + #paramvar304 * 3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 3 + #paramvar300 * 3 >= 0 /\ #paramvar295 + #paramvar296 * 3 + #paramvar297 * 3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 3 + #paramvar321 * 3 >= 0 /\ #paramvar316 + #paramvar317 * 3 + #paramvar318 * 3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 3 + #paramvar314 * 3 >= 0 /\ #paramvar309 + #paramvar310 * 3 + #paramvar311 * 3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 3 + #paramvar335 * 3 >= 0 /\ #paramvar330 + #paramvar331 * 3 + #paramvar332 * 3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 3 + #paramvar328 * 3 >= 0 /\ #paramvar323 + #paramvar324 * 3 + #paramvar325 * 3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 3 + #paramvar349 * 3 >= 0 /\ #paramvar344 + #paramvar345 * 3 + #paramvar346 * 3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 3 + #paramvar342 * 3 >= 0 /\ #paramvar337 + #paramvar338 * 3 + #paramvar339 * 3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 3 + #paramvar363 * 3 >= 0 /\ #paramvar358 + #paramvar359 * 3 + #paramvar360 * 3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 3 + #paramvar356 * 3 >= 0 /\ #paramvar351 + #paramvar352 * 3 + #paramvar353 * 3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 3 + #paramvar377 * 3 >= 0 /\ #paramvar372 + #paramvar373 * 3 + #paramvar374 * 3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 3 + #paramvar370 * 3 >= 0 /\ #paramvar365 + #paramvar366 * 3 + #paramvar367 * 3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 3 + #paramvar293 * 3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 3 + #paramvar289 * 3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 * 4 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 * 4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 * 4 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 * 4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 * 4 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 * 4 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 * -2 >= 0
gen constr of example:(X2(-5, 4) => X3(3, -2) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3))
constr: [#S_2230] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -5 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar246 * -5 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -5 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar237 * -5 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -5 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar228 * -5 + #paramvar229 * 4 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 3 + #paramvar307 * 3 >= 0 /\ #paramvar302 + #paramvar303 * 3 + #paramvar304 * 3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 3 + #paramvar300 * 3 >= 0 /\ #paramvar295 + #paramvar296 * 3 + #paramvar297 * 3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 3 + #paramvar321 * 3 >= 0 /\ #paramvar316 + #paramvar317 * 3 + #paramvar318 * 3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 3 + #paramvar314 * 3 >= 0 /\ #paramvar309 + #paramvar310 * 3 + #paramvar311 * 3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 3 + #paramvar335 * 3 >= 0 /\ #paramvar330 + #paramvar331 * 3 + #paramvar332 * 3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 3 + #paramvar328 * 3 >= 0 /\ #paramvar323 + #paramvar324 * 3 + #paramvar325 * 3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 3 + #paramvar349 * 3 >= 0 /\ #paramvar344 + #paramvar345 * 3 + #paramvar346 * 3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 3 + #paramvar342 * 3 >= 0 /\ #paramvar337 + #paramvar338 * 3 + #paramvar339 * 3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 3 + #paramvar363 * 3 >= 0 /\ #paramvar358 + #paramvar359 * 3 + #paramvar360 * 3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 3 + #paramvar356 * 3 >= 0 /\ #paramvar351 + #paramvar352 * 3 + #paramvar353 * 3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 3 + #paramvar377 * 3 >= 0 /\ #paramvar372 + #paramvar373 * 3 + #paramvar374 * 3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 3 + #paramvar370 * 3 >= 0 /\ #paramvar365 + #paramvar366 * 3 + #paramvar367 * 3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 3 + #paramvar293 * 3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 3 + #paramvar289 * 3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 * -2 >= 0
gen constr of example:(X2(-2, -2) => X3(3, 4) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3))
constr: [#S_2231] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * -2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 3 + #paramvar307 * 3 >= 0 /\ #paramvar302 + #paramvar303 * 3 + #paramvar304 * 3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 3 + #paramvar300 * 3 >= 0 /\ #paramvar295 + #paramvar296 * 3 + #paramvar297 * 3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 3 + #paramvar321 * 3 >= 0 /\ #paramvar316 + #paramvar317 * 3 + #paramvar318 * 3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 3 + #paramvar314 * 3 >= 0 /\ #paramvar309 + #paramvar310 * 3 + #paramvar311 * 3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 3 + #paramvar335 * 3 >= 0 /\ #paramvar330 + #paramvar331 * 3 + #paramvar332 * 3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 3 + #paramvar328 * 3 >= 0 /\ #paramvar323 + #paramvar324 * 3 + #paramvar325 * 3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 3 + #paramvar349 * 3 >= 0 /\ #paramvar344 + #paramvar345 * 3 + #paramvar346 * 3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 3 + #paramvar342 * 3 >= 0 /\ #paramvar337 + #paramvar338 * 3 + #paramvar339 * 3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 3 + #paramvar363 * 3 >= 0 /\ #paramvar358 + #paramvar359 * 3 + #paramvar360 * 3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 3 + #paramvar356 * 3 >= 0 /\ #paramvar351 + #paramvar352 * 3 + #paramvar353 * 3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 3 + #paramvar377 * 3 >= 0 /\ #paramvar372 + #paramvar373 * 3 + #paramvar374 * 3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 3 + #paramvar370 * 3 >= 0 /\ #paramvar365 + #paramvar366 * 3 + #paramvar367 * 3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 3 + #paramvar293 * 3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 3 + #paramvar289 * 3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 * 4 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 * 4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 * 4 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 * 4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 * 4 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 * 4 >= 0
gen constr of example:(X2(-3, 2) /\ X2(0, 0) => X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_2232] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0
bounds constr: [#S_2233] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2234] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2235] true
bounds constr: [#S_2236] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2237] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2238] true
bounds constr: [#S_2239] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2240] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2241] true
bounds constr: [#S_2242] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2243] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2244] true
bounds constr: [#S_2245] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2246] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2247] true
bounds constr: [#S_2248] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2249] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2250] true
bounds constr: [#S_2251] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2252] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2253] true
bounds constr: [#S_2254] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2255] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2256] true
bounds constr: [#S_2257] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2258] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2259] true
bounds constr: [#S_2260] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2261] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2262] true
constraints generated
sat
************** current phase of 46th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x1 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ -2 + -x1 >= 0 /\ -2 + x1 + -x2 >= 0 \/ -1 + x2 != 0 /\ 1 + x2 != 0 /\ -2 + x1 >= 0 /\ -2 + -x2 >= 0 \/ -x1 + x2 >= 0 /\ -x1 >= 0
X3(x1: int, x2: int) :=
  x2 = 0 /\ -1 + x2 = 0 /\ 1 + -3 * x1 >= 0 /\ -1 + 3 * x1 >= 0 \/ x2 != 0 /\ -1 + 2 * x1 + x2 >= 0 /\ -1 + -x1 + -2 * x2 >= 0 \/ x2 != 0 /\ -1 + -2 * x1 + x2 >= 0 /\ 2 + -2 * x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -x1 + x2 >= 0 /\ -2 + x1 >= 0 \/ 1 + 2 * x2 >= 0 /\ -2 + -x1 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 + x2 >= 0 /\ x1 + -x2 >= 0 \/ x1 + -x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -2 * x2 >= 0 /\ -2 + x1 + x2 >= 0 \/ 1 + -2 * x2 >= 0 /\ -2 + x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + 2 * x1 >= 0 /\ 1 + -2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ -1 + -x1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -2 * x2 >= 0 /\ 2 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ -2 * x2 >= 0 \/ x1 + -x2 != 0 /\ x1 + -x2 >= 0 /\ -x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -1) /\ X93(1, 1) => X1(-1, 1));
(X2(-1, 1) => X1(-1, 0) \/ X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0));
(X2(-2, -1) /\ X95(-1, -1) => X1(-2, -1));
(X2(3, -3) /\ X91(2, 2) => X1(3, 2));
(X3(-2, -3) => X2(-2, -3));
(X91(-2, 3) => X3(-2, -4))

************** current phase of 46th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (52): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );..]
*** undecided (351): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );..]

*** labeling with SAT solving
************** current phase of 46th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-5) 4)
refuting (X2 (-3) 2)
refuting (X2 (-2) (-3))
refuting (X2 (-2) (-1))
refuting (X2 (-1) (-1))
refuting (X2 (-1) 1)
refuting (X2 0 0)
refuting (X2 3 (-3))
refuting (X3 (-2) (-4))
refuting (X3 (-2) (-3))
refuting (X3 3 (-2))
refuting (X90 (-1) (-1))
refuting (X90 0 0)
refuting (X90 3 3)
refuting (X91 (-2) 3)
refuting (X91 (-1) (-1))
refuting (X91 0 0)
refuting (X91 2 2)
refuting (X91 3 3)
refuting (X92 (-1) (-1))
refuting (X92 0 0)
refuting (X92 3 3)
refuting (X93 (-1) (-1))
refuting (X93 0 0)
refuting (X93 1 1)
refuting (X93 3 3)
refuting (X94 (-1) (-1))
refuting (X94 0 0)
refuting (X94 3 3)
refuting (X95 (-1) (-1))
refuting (X95 0 0)
refuting (X95 3 3)
refuting (X96 (-1) (-1))
refuting (X96 0 0)
refuting (X96 3 3)
proving (X1 (-5) 3)
proving (X1 (-3) (-1))
proving (X2 (-5) 4)
proving (X2 (-3) 2)
proving (X2 (-2) (-3))
proving (X2 (-2) (-1))
proving (X2 (-1) (-1))
proving (X2 (-1) 1)
proving (X2 0 0)
proving (X2 3 (-3))
proving (X3 (-2) (-4))
proving (X3 (-2) (-3))
proving (X3 3 (-2))
proving (X90 (-1) (-1))
proving (X90 0 0)
proving (X90 3 3)
proving (X91 (-2) 3)
proving (X91 (-1) (-1))
proving (X91 0 0)
proving (X91 2 2)
proving (X91 3 3)
proving (X92 (-1) (-1))
proving (X92 0 0)
proving (X92 3 3)
proving (X93 (-1) (-1))
proving (X93 0 0)
proving (X93 1 1)
proving (X93 3 3)
proving (X94 (-1) (-1))
proving (X94 0 0)
proving (X94 3 3)
proving (X95 (-1) (-1))
proving (X95 0 0)
proving (X95 3 3)
proving (X96 (-1) (-1))
proving (X96 0 0)
proving (X96 3 3)
*** Example Instances obtained by Resolution:


************** current phase of 46th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (52): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );..]
*** undecided (351): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(0, 0) => );..]

*** labeling with SAT solving
************** current phase of 47th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (55):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (74):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFT


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (67):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X2(-2, -1) /\ X95(-1, -1) => )
constr: [#S_2263] (#paramvar364 < 0 \/ #paramvar361 + -#paramvar362 + -#paramvar363 < 0 \/ #paramvar358 + -#paramvar359 + -#paramvar360 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + -#paramvar355 + -#paramvar356 < 0 \/ #paramvar351 + -#paramvar352 + -#paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * -2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * -2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * -2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -2 + -#paramvar229 < 0)
gen constr of example:(X2(-1, -1) /\ X93(1, 1) => )
constr: [#S_2264] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 + #paramvar335 < 0 \/ #paramvar330 + #paramvar331 + #paramvar332 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 + #paramvar328 < 0 \/ #paramvar323 + #paramvar324 + #paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + -#paramvar229 < 0)
gen constr of example:(X2(3, -3) /\ X91(2, 2) => )
constr: [#S_2265] (#paramvar308 < 0 \/ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 < 0 \/ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 < 0 \/ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 * -3 < 0)
gen constr of example:(X3(-2, -3) => X2(-2, -3))
constr: [#S_2266] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 + #paramvar281 * -3 < 0 \/ #paramvar276 + #paramvar277 * -2 + #paramvar278 * -3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 + #paramvar270 * -3 < 0 \/ #paramvar265 + #paramvar266 * -2 + #paramvar267 * -3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 + #paramvar259 * -3 < 0 \/ #paramvar254 + #paramvar255 * -2 + #paramvar256 * -3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -2 + #paramvar250 * -3 >= 0 /\ #paramvar245 + #paramvar246 * -2 + #paramvar247 * -3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -2 + #paramvar241 * -3 >= 0 /\ #paramvar236 + #paramvar237 * -2 + #paramvar238 * -3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -2 + #paramvar232 * -3 >= 0 /\ #paramvar227 + #paramvar228 * -2 + #paramvar229 * -3 >= 0
gen constr of example:(X91(-2, 3) => X3(-2, -4))
constr: [#S_2267] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * -2 + #paramvar307 * 3 < 0 \/ #paramvar302 + #paramvar303 * -2 + #paramvar304 * 3 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * -2 + #paramvar300 * 3 < 0 \/ #paramvar295 + #paramvar296 * -2 + #paramvar297 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * -4 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * -4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * -4 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * -4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * -4 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * -4 >= 0
gen constr of example:(X2(-1, 1) => X90(0, 0) \/ X91(0, 0) \/ X92(0, 0) \/ X93(0, 0) \/ X94(0, 0) \/ X95(0, 0) \/ X96(0, 0))
constr: [#S_2268] (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 >= 0 /\ #paramvar302 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 >= 0 /\ #paramvar295 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 >= 0 /\ #paramvar316 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 >= 0 /\ #paramvar309 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 >= 0 /\ #paramvar330 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 >= 0 /\ #paramvar323 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 >= 0 /\ #paramvar344 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 >= 0 /\ #paramvar337 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 >= 0 /\ #paramvar358 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 >= 0 /\ #paramvar351 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 >= 0 /\ #paramvar372 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 >= 0 /\ #paramvar365 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 >= 0
bounds constr: [#S_2269] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2270] true
bounds constr: [#S_2271] true
bounds constr: [#S_2272] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2273] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2274] true
bounds constr: [#S_2275] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2276] true
bounds constr: [#S_2277] true
bounds constr: [#S_2278] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2279] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2280] true
bounds constr: [#S_2281] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2282] true
bounds constr: [#S_2283] true
bounds constr: [#S_2284] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2285] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2286] true
bounds constr: [#S_2287] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2288] true
bounds constr: [#S_2289] true
bounds constr: [#S_2290] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2291] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2292] true
bounds constr: [#S_2293] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2294] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2295] true
bounds constr: [#S_2296] true
bounds constr: [#S_2297] true
bounds constr: [#S_2298] true
constraints generated
sat
************** current phase of 47th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -2 + x1 >= 0 /\ 2 + -x1 >= 0 \/ x2 = 0 /\ -2 + -2 * x1 >= 0 /\ 2 + -x1 + -x2 >= 0 \/ -1 + -x1 + -x2 >= 0 /\ -1 + x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ 1 + x1 + 2 * x2 >= 0 /\ -2 + -2 * x1 + -x2 >= 0 \/ x2 != 0 /\ -1 + -x1 + x2 != 0 /\ 1 + -x1 + x2 >= 0 /\ 2 * x1 + -x2 >= 0 \/ 1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ 2 + x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 2 + -2 * x1 >= 0 /\ -2 + 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -x2 >= 0 /\ 2 * x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + x2 >= 0 /\ -1 + x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -2 * x2 >= 0 /\ -2 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -2 * x1 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + x1 >= 0 /\ -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + -2 * x2 >= 0 /\ 2 * x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ x1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-2, 0) /\ X96(-1, -1) => X1(-2, -1));
(X2(1, -3) /\ X92(-2, -3) => X1(1, -3));
(X2(2, -1) /\ X91(0, 0) => X1(2, 0));
(X2(2, 2) /\ X93(-2, -2) => X1(2, -2));
(X3(3, 6) /\ X3(6, 6) => X2(6, 6));
(X91(1, -5) => X3(1, 4));
(X96(-3, -3) => X3(-3, 0))

************** current phase of 47th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (52): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );..]
*** undecided (358): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 47th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-2) 0)
refuting (X2 1 (-3))
refuting (X2 2 (-1))
refuting (X2 2 2)
refuting (X2 6 6)
refuting (X3 (-3) 0)
refuting (X3 1 4)
refuting (X3 3 6)
refuting (X3 6 6)
refuting (X91 0 0)
refuting (X91 1 (-5))
refuting (X92 (-2) (-3))
refuting (X93 (-2) (-2))
refuting (X96 (-3) (-3))
refuting (X96 (-1) (-1))
proving (X2 (-2) 0)
proving (X2 1 (-3))
proving (X2 2 (-1))
proving (X2 2 2)
proving (X2 6 6)
proving (X3 (-3) 0)
proving (X3 1 4)
proving (X3 3 6)
proving (X3 6 6)
proving (X91 0 0)
proving (X91 1 (-5))
proving (X92 (-2) (-3))
proving (X93 (-2) (-2))
proving (X96 (-3) (-3))
proving (X96 (-1) (-1))
*** Example Instances obtained by Resolution:


************** current phase of 47th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (52): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );..]
*** undecided (358): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 48th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (55):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (78):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (69):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X2(-2, 0) /\ X96(-1, -1) => )
constr: [#S_2299] (#paramvar378 < 0 \/ #paramvar375 + -#paramvar376 + -#paramvar377 < 0 \/ #paramvar372 + -#paramvar373 + -#paramvar374 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + -#paramvar369 + -#paramvar370 < 0 \/ #paramvar365 + -#paramvar366 + -#paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0)
gen constr of example:(X2(1, -3) /\ X92(-2, -3) => )
constr: [#S_2300] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -3 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -3 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -3 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -3 < 0)
gen constr of example:(X2(2, -1) /\ X91(0, 0) => )
constr: [#S_2301] (#paramvar308 < 0 \/ #paramvar305 < 0 \/ #paramvar302 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 < 0 \/ #paramvar295 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + -#paramvar229 < 0)
gen constr of example:(X2(2, 2) /\ X93(-2, -2) => )
constr: [#S_2302] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 * 2 < 0)
gen constr of example:(X3(3, 6) /\ X3(6, 6) => X2(6, 6))
constr: [#S_2303] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 3 + #paramvar281 * 6 < 0 \/ #paramvar276 + #paramvar277 * 3 + #paramvar278 * 6 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 3 + #paramvar270 * 6 < 0 \/ #paramvar265 + #paramvar266 * 3 + #paramvar267 * 6 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 3 + #paramvar259 * 6 < 0 \/ #paramvar254 + #paramvar255 * 3 + #paramvar256 * 6 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 6 + #paramvar281 * 6 < 0 \/ #paramvar276 + #paramvar277 * 6 + #paramvar278 * 6 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 6 + #paramvar270 * 6 < 0 \/ #paramvar265 + #paramvar266 * 6 + #paramvar267 * 6 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 6 + #paramvar259 * 6 < 0 \/ #paramvar254 + #paramvar255 * 6 + #paramvar256 * 6 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 6 + #paramvar250 * 6 >= 0 /\ #paramvar245 + #paramvar246 * 6 + #paramvar247 * 6 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 6 + #paramvar241 * 6 >= 0 /\ #paramvar236 + #paramvar237 * 6 + #paramvar238 * 6 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 6 + #paramvar232 * 6 >= 0 /\ #paramvar227 + #paramvar228 * 6 + #paramvar229 * 6 >= 0
gen constr of example:(X96(-3, -3) => X3(-3, 0))
constr: [#S_2304] (#paramvar378 < 0 \/ #paramvar375 + #paramvar376 * -3 + #paramvar377 * -3 < 0 \/ #paramvar372 + #paramvar373 * -3 + #paramvar374 * -3 < 0) /\ (#paramvar371 < 0 \/ #paramvar368 + #paramvar369 * -3 + #paramvar370 * -3 < 0 \/ #paramvar365 + #paramvar366 * -3 + #paramvar367 * -3 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 >= 0 /\ #paramvar276 + #paramvar277 * -3 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 >= 0 /\ #paramvar265 + #paramvar266 * -3 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 >= 0 /\ #paramvar254 + #paramvar255 * -3 >= 0
gen constr of example:(X91(1, -5) => X3(1, 4))
constr: [#S_2305] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 + #paramvar307 * -5 < 0 \/ #paramvar302 + #paramvar303 + #paramvar304 * -5 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 + #paramvar300 * -5 < 0 \/ #paramvar295 + #paramvar296 + #paramvar297 * -5 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 * 4 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 * 4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 * 4 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 * 4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 * 4 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 * 4 >= 0
bounds constr: [#S_2306] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2307] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2308] true
bounds constr: [#S_2309] true
bounds constr: [#S_2310] true
bounds constr: [#S_2311] true
bounds constr: [#S_2312] true
bounds constr: [#S_2313] true
bounds constr: [#S_2314] true
bounds constr: [#S_2315] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2316] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2317] true
bounds constr: [#S_2318] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2319] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2320] true
bounds constr: [#S_2321] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2322] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2323] true
bounds constr: [#S_2324] true
bounds constr: [#S_2325] true
bounds constr: [#S_2326] true
bounds constr: [#S_2327] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2328] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2329] true
bounds constr: [#S_2330] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2331] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2332] true
bounds constr: [#S_2333] true
bounds constr: [#S_2334] true
bounds constr: [#S_2335] true
constraints generated
sat
************** current phase of 48th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ x2 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ -1 + x1 + x2 >= 0 /\ 2 + -x1 >= 0 \/ x2 = 0 /\ -2 + -2 * x1 >= 0 /\ 2 + -x1 + -x2 >= 0 \/ x2 != 0 /\ 1 + -x1 + x2 >= 0 /\ -1 + x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ 1 + x1 + x2 >= 0 /\ -1 + -2 * x1 + -x2 >= 0 \/ -1 + x2 = 0 /\ 1 + -x1 + x2 >= 0 /\ 2 * x1 + -x2 >= 0 \/ x2 = 0 /\ -1 + x2 = 0 /\ -1 + -x1 + -2 * x2 >= 0 /\ 2 + x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 2 + -2 * x1 >= 0 /\ -2 + x1 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ 2 + x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -x1 + x2 >= 0 /\ -2 + x1 + x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + 2 * x2 >= 0 /\ -x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 != 0 /\ x2 >= 0 /\ -2 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -2) /\ X2(5, 4) => X1(-1, -3) \/ X1(5, -3) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3));
(X2(-1, -2) /\ X92(-2, -2) => X1(-1, -2));
(X2(-2, 0) => X1(-2, -1) \/ X3(-1, 2) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(0, 4) => X1(0, -3) \/ X3(-3, -2) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3));
(X2(2, -1) /\ X95(0, 0) => X1(2, 0));
(X2(2, 1) /\ X94(3, 3) => X1(2, 3));
(X3(-2, 2) /\ X3(-3, 2) => X2(-2, 2));
(X92(-2, -2) => X3(-2, -2));
(X94(3, 3) => X3(3, 1))

************** current phase of 48th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (52): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -2) => );
(X1(-1, 0) => );..]
*** undecided (367): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 48th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-1) (-3))
  added as a negative example with: 
  add negative example(X1(-1, -3) => )
refuting (X1 0 (-3))
  added as a negative example with: 
  add negative example(X1(0, -3) => )
refuting (X2 (-2) 0)
refuting (X2 (-2) 2)
refuting (X2 (-1) (-2))
refuting (X2 0 4)
refuting (X2 2 (-1))
refuting (X2 2 1)
refuting (X2 5 4)
refuting (X3 (-3) (-2))
refuting (X3 (-3) 2)
refuting (X3 (-2) (-2))
refuting (X3 (-2) 2)
refuting (X3 (-1) 2)
refuting (X3 3 1)
refuting (X90 (-3) (-3))
refuting (X90 (-1) (-1))
refuting (X91 (-3) (-3))
refuting (X91 (-1) (-1))
refuting (X92 (-3) (-3))
refuting (X92 (-2) (-2))
refuting (X92 (-1) (-1))
refuting (X93 (-3) (-3))
refuting (X93 (-1) (-1))
refuting (X94 (-3) (-3))
refuting (X94 (-1) (-1))
refuting (X94 3 3)
refuting (X95 (-3) (-3))
refuting (X95 (-1) (-1))
refuting (X95 0 0)
refuting (X96 (-3) (-3))
refuting (X96 (-1) (-1))
proving (X1 (-1) (-3))
proving (X1 0 (-3))
proving (X2 (-2) 0)
proving (X2 (-2) 2)
proving (X2 (-1) (-2))
proving (X2 0 4)
proving (X2 2 (-1))
proving (X2 2 1)
proving (X2 5 4)
proving (X3 (-3) (-2))
proving (X3 (-3) 2)
proving (X3 (-2) (-2))
proving (X3 (-2) 2)
proving (X3 (-1) 2)
proving (X3 3 1)
proving (X90 (-3) (-3))
proving (X90 (-1) (-1))
proving (X91 (-3) (-3))
proving (X91 (-1) (-1))
proving (X92 (-3) (-3))
proving (X92 (-2) (-2))
proving (X92 (-1) (-1))
proving (X93 (-3) (-3))
proving (X93 (-1) (-1))
proving (X94 (-3) (-3))
proving (X94 (-1) (-1))
proving (X94 3 3)
proving (X95 (-3) (-3))
proving (X95 (-1) (-1))
proving (X95 0 0)
proving (X96 (-3) (-3))
proving (X96 (-1) (-1))
*** Example Instances obtained by Resolution:
(X1(-1, -3) => );
(X1(0, -3) => )

************** current phase of 48th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (54): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -3) => );
(X1(-1, -2) => );..]
*** undecided (367): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 49th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (57):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (79):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (69):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X1(-1, -3) => )
constr: [#S_2336] #paramvar226 > 0 \/ #paramvar223 + -#paramvar224 + #paramvar225 * -3 < 0
gen constr of example:(X1(0, -3) => )
constr: [#S_2337] #paramvar226 > 0 \/ #paramvar223 + #paramvar225 * -3 < 0
gen constr of example:(X2(-1, -2) /\ X92(-2, -2) => )
constr: [#S_2338] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * -2 < 0)
gen constr of example:(X2(2, -1) /\ X95(0, 0) => )
constr: [#S_2339] (#paramvar364 < 0 \/ #paramvar361 < 0 \/ #paramvar358 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 < 0 \/ #paramvar351 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + -#paramvar229 < 0)
gen constr of example:(X2(2, 1) /\ X94(3, 3) => )
constr: [#S_2340] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * 3 + #paramvar349 * 3 < 0 \/ #paramvar344 + #paramvar345 * 3 + #paramvar346 * 3 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * 3 + #paramvar342 * 3 < 0 \/ #paramvar337 + #paramvar338 * 3 + #paramvar339 * 3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 < 0)
gen constr of example:(X3(-2, 2) /\ X3(-3, 2) => X2(-2, 2))
constr: [#S_2341] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -3 + #paramvar281 * 2 < 0 \/ #paramvar276 + #paramvar277 * -3 + #paramvar278 * 2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -3 + #paramvar270 * 2 < 0 \/ #paramvar265 + #paramvar266 * -3 + #paramvar267 * 2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -3 + #paramvar259 * 2 < 0 \/ #paramvar254 + #paramvar255 * -3 + #paramvar256 * 2 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 + #paramvar281 * 2 < 0 \/ #paramvar276 + #paramvar277 * -2 + #paramvar278 * 2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 + #paramvar270 * 2 < 0 \/ #paramvar265 + #paramvar266 * -2 + #paramvar267 * 2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 + #paramvar259 * 2 < 0 \/ #paramvar254 + #paramvar255 * -2 + #paramvar256 * 2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -2 + #paramvar250 * 2 >= 0 /\ #paramvar245 + #paramvar246 * -2 + #paramvar247 * 2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -2 + #paramvar241 * 2 >= 0 /\ #paramvar236 + #paramvar237 * -2 + #paramvar238 * 2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -2 + #paramvar232 * 2 >= 0 /\ #paramvar227 + #paramvar228 * -2 + #paramvar229 * 2 >= 0
gen constr of example:(X92(-2, -2) => X3(-2, -2))
constr: [#S_2342] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * -2 >= 0
gen constr of example:(X94(3, 3) => X3(3, 1))
constr: [#S_2343] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * 3 + #paramvar349 * 3 < 0 \/ #paramvar344 + #paramvar345 * 3 + #paramvar346 * 3 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * 3 + #paramvar342 * 3 < 0 \/ #paramvar337 + #paramvar338 * 3 + #paramvar339 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 3 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 3 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 3 + #paramvar256 >= 0
gen constr of example:(X2(0, 4) => X3(-3, -2) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3))
constr: [#S_2344] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar229 * 4 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 >= 0 /\ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 >= 0 /\ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -3 >= 0 /\ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -3 >= 0 /\ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -3 >= 0 /\ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -3 >= 0 /\ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -3 + #paramvar349 * -3 >= 0 /\ #paramvar344 + #paramvar345 * -3 + #paramvar346 * -3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -3 + #paramvar342 * -3 >= 0 /\ #paramvar337 + #paramvar338 * -3 + #paramvar339 * -3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 >= 0 /\ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 >= 0 /\ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -3 + #paramvar377 * -3 >= 0 /\ #paramvar372 + #paramvar373 * -3 + #paramvar374 * -3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -3 + #paramvar370 * -3 >= 0 /\ #paramvar365 + #paramvar366 * -3 + #paramvar367 * -3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -3 + #paramvar293 * -3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -3 + #paramvar289 * -3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 * -2 >= 0
gen constr of example:(X2(-2, 0) => X3(-1, 2) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_2345] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + -#paramvar280 + #paramvar281 * 2 >= 0 /\ #paramvar276 + -#paramvar277 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + -#paramvar269 + #paramvar270 * 2 >= 0 /\ #paramvar265 + -#paramvar266 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + -#paramvar258 + #paramvar259 * 2 >= 0 /\ #paramvar254 + -#paramvar255 + #paramvar256 * 2 >= 0
gen constr of example:(X2(-1, -2) /\ X2(5, 4) => X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3))
constr: [#S_2346] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 5 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar246 * 5 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 5 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar237 * 5 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 5 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar228 * 5 + #paramvar229 * 4 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 >= 0 /\ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 >= 0 /\ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -3 >= 0 /\ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -3 >= 0 /\ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -3 >= 0 /\ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -3 >= 0 /\ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -3 + #paramvar349 * -3 >= 0 /\ #paramvar344 + #paramvar345 * -3 + #paramvar346 * -3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -3 + #paramvar342 * -3 >= 0 /\ #paramvar337 + #paramvar338 * -3 + #paramvar339 * -3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 >= 0 /\ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 >= 0 /\ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -3 + #paramvar377 * -3 >= 0 /\ #paramvar372 + #paramvar373 * -3 + #paramvar374 * -3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -3 + #paramvar370 * -3 >= 0 /\ #paramvar365 + #paramvar366 * -3 + #paramvar367 * -3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -3 + #paramvar293 * -3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -3 + #paramvar289 * -3 >= 0
bounds constr: [#S_2347] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2348] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2349] true
bounds constr: [#S_2350] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2351] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2352] true
bounds constr: [#S_2353] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2354] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2355] true
bounds constr: [#S_2356] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2357] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2358] true
bounds constr: [#S_2359] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2360] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2361] true
bounds constr: [#S_2362] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2363] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2364] true
bounds constr: [#S_2365] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2366] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2367] true
bounds constr: [#S_2368] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2369] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2370] true
bounds constr: [#S_2371] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2372] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2373] true
bounds constr: [#S_2374] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2375] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2376] true
constraints generated
sat
************** current phase of 49th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  -2 + -x1 >= 0 /\ 2 + 2 * x1 >= 0 \/ 1 + -x1 + -x2 >= 0 /\ -1 + x1 + x2 >= 0
X3(x1: int, x2: int) :=
  1 + x2 = 0 /\ -1 + -x1 + x2 = 0 /\ -1 + x1 + -x2 >= 0 /\ -1 + 2 * x1 + -x2 >= 0 \/ 1 + x2 = 0 /\ -1 + x1 + x2 = 0 /\ -1 + -3 * x2 >= 0 /\ -1 + 2 * x1 + -x2 >= 0 \/ -1 + x1 + x2 = 0 /\ -1 + x1 + x2 >= 0 /\ -1 + x1 + x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  -1 + -x1 + -x2 >= 0 /\ -1 + x1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 * x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ -2 + -x1 >= 0 /\ -2 + x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 + -x2 >= 0 /\ -1 + x1 + -x2 >= 0 \/ -2 + -x1 >= 0 /\ -2 + x1 + -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ x1 + x2 >= 0 /\ -2 * x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ -1 + -x1 + x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ -1 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 2) /\ X2(1, 0) => X1(-1, 1) \/ X1(1, 1) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X2(-1, 2) /\ X92(-2, 2) => X1(-1, 2));
(X2(-3, 4) /\ X93(-2, -4) => X1(-3, -4));
(X2(1, 0) => X1(1, 1) \/ X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X92(-2, 4) => X3(-2, 4));
(X93(-2, -4) => X3(-2, 4))

************** current phase of 49th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (54): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -3) => );
(X1(-1, -2) => );..]
*** undecided (373): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );
(X2(-2, 0) /\ X96(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 49th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-3) (-4))
  added as a negative example with: 
  add negative example(X1(-3, -4) => )
refuting (X1 1 1)
refuting (X2 (-3) 4)
refuting (X2 (-1) (-2))
refuting (X2 (-1) 2)
refuting (X2 0 4)
refuting (X2 1 0)
refuting (X2 5 4)
refuting (X3 (-3) (-2))
refuting (X3 (-2) 4)
refuting (X3 1 2)
refuting (X90 (-3) (-3))
refuting (X90 1 1)
refuting (X91 (-3) (-3))
refuting (X91 1 1)
refuting (X92 (-3) (-3))
refuting (X92 (-2) 2)
refuting (X92 (-2) 4)
refuting (X92 1 1)
refuting (X93 (-3) (-3))
refuting (X93 (-2) (-4))
refuting (X93 1 1)
refuting (X94 (-3) (-3))
refuting (X94 1 1)
refuting (X95 (-3) (-3))
refuting (X95 1 1)
refuting (X96 (-3) (-3))
refuting (X96 1 1)
proving (X1 (-3) (-4))
proving (X1 (-1) (-3))
proving (X1 0 (-3))
proving (X1 1 1)
proving (X2 (-3) 4)
proving (X2 (-1) (-2))
proving (X2 (-1) 2)
proving (X2 0 4)
proving (X2 1 0)
proving (X2 5 4)
proving (X3 (-3) (-2))
proving (X3 (-2) 4)
proving (X3 1 2)
proving (X90 (-3) (-3))
proving (X90 1 1)
proving (X91 (-3) (-3))
proving (X91 1 1)
proving (X92 (-3) (-3))
proving (X92 (-2) 2)
proving (X92 (-2) 4)
proving (X92 1 1)
proving (X93 (-3) (-3))
proving (X93 (-2) (-4))
proving (X93 1 1)
proving (X94 (-3) (-3))
proving (X94 1 1)
proving (X95 (-3) (-3))
proving (X95 1 1)
proving (X96 (-3) (-3))
proving (X96 1 1)
*** Example Instances obtained by Resolution:
(X1(-3, -4) => )

************** current phase of 49th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (55): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -3) => );..]
*** undecided (373): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );..]

*** labeling with SAT solving
************** current phase of 50th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (58):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (80):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (70):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X1(-3, -4) => )
constr: [#S_2377] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -3 + #paramvar225 * -4 < 0
gen constr of example:(X2(-3, 4) /\ X93(-2, -4) => )
constr: [#S_2378] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -4 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -4 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -4 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -4 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 4 < 0)
gen constr of example:(X2(-1, 2) /\ X92(-2, 2) => )
constr: [#S_2379] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * 2 < 0)
gen constr of example:(X92(-2, 4) => X3(-2, 4))
constr: [#S_2380] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * 4 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * 4 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * 4 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * 4 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * 4 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * 4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * 4 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * 4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * 4 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * 4 >= 0
gen constr of example:(X93(-2, -4) => X3(-2, 4))
constr: [#S_2381] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -4 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -4 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -4 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -4 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * 4 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * 4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * 4 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * 4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * 4 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * 4 >= 0
gen constr of example:(X2(1, 0) => X1(1, 1) \/ X3(1, 2) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_2382] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + #paramvar224 + #paramvar225 >= 0 \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 * 2 >= 0
gen constr of example:(X2(-1, 2) /\ X2(1, 0) => X1(1, 1) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_2383] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 < 0 \/ #paramvar245 + #paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 < 0 \/ #paramvar236 + #paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 < 0 \/ #paramvar227 + #paramvar228 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * 2 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + #paramvar224 + #paramvar225 >= 0 \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0
bounds constr: [#S_2384] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2385] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2386] true
bounds constr: [#S_2387] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2388] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2389] true
bounds constr: [#S_2390] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2391] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2392] true
bounds constr: [#S_2393] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2394] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2395] true
bounds constr: [#S_2396] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2397] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2398] true
bounds constr: [#S_2399] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2400] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2401] true
bounds constr: [#S_2402] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2403] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2404] true
bounds constr: [#S_2405] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2406] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2407] true
bounds constr: [#S_2408] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2409] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2410] true
bounds constr: [#S_2411] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2412] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2413] true
constraints generated
sat
************** current phase of 50th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ -1 + x2 = 0 /\ -2 + -2 * x1 >= 0 /\ -2 + -x1 >= 0 \/ -2 + -x1 >= 0 /\ -1 + x1 + x2 >= 0 \/ -1 + x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -1 + x1 + x2 >= 0
X3(x1: int, x2: int) :=
  x1 + x2 >= 0 /\ -1 + -x1 + -2 * x2 >= 0 \/ -1 + x1 + x2 = 0 /\ -2 + -x2 >= 0 /\ -2 + 2 * x1 + x2 >= 0 \/ -1 + x1 + x2 = 0 /\ -1 + x1 + x2 >= 0 /\ -1 + -2 * x1 + x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  -1 + -x1 + -x2 >= 0 /\ -1 + x1 + x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 * x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ -2 + -2 * x1 >= 0 /\ -2 + 2 * x1 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + 2 * x1 >= 0 /\ 2 + -x2 >= 0 \/ -2 + -x1 + x2 >= 0 /\ -2 + x1 + -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ x1 + x2 >= 0 /\ -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -x1 + x2 >= 0 /\ -2 + x1 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ -1 + 2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-2, 4) => X1(-2, -3) \/ X3(-3, -2) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3));
(X3(-1, 2) => X2(-1, 2));
(X95(2, 3) => X3(2, -1))

************** current phase of 50th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (55): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -3) => );..]
*** undecided (376): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );..]

*** labeling with SAT solving
************** current phase of 50th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-3) 4)
refuting (X2 (-2) 4)
refuting (X2 (-1) 2)
refuting (X3 (-3) (-2))
refuting (X3 (-1) 2)
refuting (X3 2 (-1))
refuting (X90 (-3) (-3))
refuting (X91 (-3) (-3))
refuting (X92 (-3) (-3))
refuting (X93 (-3) (-3))
refuting (X93 (-2) (-4))
refuting (X94 (-3) (-3))
refuting (X95 (-3) (-3))
refuting (X95 2 3)
refuting (X96 (-3) (-3))
proving (X1 (-3) (-4))
proving (X2 (-3) 4)
proving (X2 (-2) 4)
proving (X2 (-1) 2)
proving (X3 (-3) (-2))
proving (X3 (-1) 2)
proving (X3 2 (-1))
proving (X90 (-3) (-3))
proving (X91 (-3) (-3))
proving (X92 (-3) (-3))
proving (X93 (-3) (-3))
proving (X93 (-2) (-4))
proving (X94 (-3) (-3))
proving (X95 (-3) (-3))
proving (X95 2 3)
proving (X96 (-3) (-3))
*** Example Instances obtained by Resolution:


************** current phase of 50th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (55): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -3) => );..]
*** undecided (376): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );..]

*** labeling with SAT solving
************** current phase of 51st iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (58):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (80):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (71):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X3(-1, 2) => X2(-1, 2))
constr: [#S_2414] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 > 0 \/ #paramvar279 + -#paramvar280 + #paramvar281 * 2 < 0 \/ #paramvar276 + -#paramvar277 + #paramvar278 * 2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 > 0 \/ #paramvar268 + -#paramvar269 + #paramvar270 * 2 < 0 \/ #paramvar265 + -#paramvar266 + #paramvar267 * 2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 > 0 \/ #paramvar257 + -#paramvar258 + #paramvar259 * 2 < 0 \/ #paramvar254 + -#paramvar255 + #paramvar256 * 2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + -#paramvar249 + #paramvar250 * 2 >= 0 /\ #paramvar245 + -#paramvar246 + #paramvar247 * 2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + -#paramvar240 + #paramvar241 * 2 >= 0 /\ #paramvar236 + -#paramvar237 + #paramvar238 * 2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + -#paramvar231 + #paramvar232 * 2 >= 0 /\ #paramvar227 + -#paramvar228 + #paramvar229 * 2 >= 0
gen constr of example:(X95(2, 3) => X3(2, -1))
constr: [#S_2415] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 3 < 0 \/ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 3 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 3 < 0 \/ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + -#paramvar256 >= 0
gen constr of example:(X2(-2, 4) => X3(-3, -2) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3))
constr: [#S_2416] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * 4 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 >= 0 /\ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 >= 0 /\ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -3 >= 0 /\ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -3 >= 0 /\ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -3 >= 0 /\ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -3 >= 0 /\ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -3 + #paramvar349 * -3 >= 0 /\ #paramvar344 + #paramvar345 * -3 + #paramvar346 * -3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -3 + #paramvar342 * -3 >= 0 /\ #paramvar337 + #paramvar338 * -3 + #paramvar339 * -3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 >= 0 /\ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 >= 0 /\ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -3 + #paramvar377 * -3 >= 0 /\ #paramvar372 + #paramvar373 * -3 + #paramvar374 * -3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -3 + #paramvar370 * -3 >= 0 /\ #paramvar365 + #paramvar366 * -3 + #paramvar367 * -3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -3 + #paramvar293 * -3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -3 + #paramvar289 * -3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 * -2 >= 0
bounds constr: [#S_2417] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2418] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2419] true
bounds constr: [#S_2420] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2421] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2422] true
bounds constr: [#S_2423] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2424] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2425] true
bounds constr: [#S_2426] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2427] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2428] true
bounds constr: [#S_2429] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2430] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2431] true
bounds constr: [#S_2432] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2433] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2434] true
bounds constr: [#S_2435] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2436] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2437] true
bounds constr: [#S_2438] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2439] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2440] true
bounds constr: [#S_2441] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2442] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2443] true
bounds constr: [#S_2444] true
bounds constr: [#S_2445] true
bounds constr: [#S_2446] true
constraints generated
sat
************** current phase of 51st iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ -1 + x2 = 0 /\ -2 + -x1 >= 0 /\ -2 + -x1 >= 0 \/ -2 + -x1 >= 0 /\ -1 + x1 + x2 >= 0 \/ 1 + -2 * x1 >= 0 /\ -1 + x1 + x2 >= 0
X3(x1: int, x2: int) :=
  x1 + x2 >= 0 /\ -1 + -x1 + -2 * x2 >= 0 \/ -1 + x1 + x2 = 0 /\ -2 + -x2 >= 0 /\ -2 + 2 * x1 + x2 >= 0 \/ -2 + x1 + 2 * x2 >= 0 /\ -1 + -2 * x1 + x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 * x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ -2 + -x1 + x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + 2 * x1 >= 0 /\ 2 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ x1 + -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ x1 + x2 >= 0 /\ 1 + -2 * x2 >= 0
X95(x1: int, x2: int) :=
  false
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ -1 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 2) /\ X93(-2, -2) => X1(-1, -2));
(X2(0, 2) => X1(0, -1) \/ X3(-1, 0) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X3(3, -2) => X2(3, -2))

************** current phase of 51st iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (55): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -3) => );..]
*** undecided (379): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );..]

*** labeling with SAT solving
************** current phase of 51st iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-1) 2)
refuting (X2 0 2)
refuting (X2 3 (-2))
refuting (X3 (-1) 0)
refuting (X3 3 (-2))
refuting (X90 (-1) (-1))
refuting (X91 (-1) (-1))
refuting (X92 (-1) (-1))
refuting (X93 (-2) (-2))
refuting (X93 (-1) (-1))
refuting (X94 (-1) (-1))
refuting (X95 (-1) (-1))
refuting (X96 (-1) (-1))
proving (X2 (-1) 2)
proving (X2 0 2)
proving (X2 3 (-2))
proving (X3 (-1) 0)
proving (X3 3 (-2))
proving (X90 (-1) (-1))
proving (X91 (-1) (-1))
proving (X92 (-1) (-1))
proving (X93 (-2) (-2))
proving (X93 (-1) (-1))
proving (X94 (-1) (-1))
proving (X95 (-1) (-1))
proving (X96 (-1) (-1))
*** Example Instances obtained by Resolution:


************** current phase of 51st iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (55): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -3) => );..]
*** undecided (379): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );
(X2(-2, 0) /\ X96(-2, -1) => );..]

*** labeling with SAT solving
************** current phase of 52nd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFF


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (58):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (80):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (71):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X2(-1, 2) /\ X93(-2, -2) => )
constr: [#S_2447] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 * 2 < 0)
gen constr of example:(X3(3, -2) => X2(3, -2))
constr: [#S_2448] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 3 + #paramvar281 * -2 < 0 \/ #paramvar276 + #paramvar277 * 3 + #paramvar278 * -2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 3 + #paramvar270 * -2 < 0 \/ #paramvar265 + #paramvar266 * 3 + #paramvar267 * -2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 3 + #paramvar259 * -2 < 0 \/ #paramvar254 + #paramvar255 * 3 + #paramvar256 * -2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 3 + #paramvar250 * -2 >= 0 /\ #paramvar245 + #paramvar246 * 3 + #paramvar247 * -2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 3 + #paramvar241 * -2 >= 0 /\ #paramvar236 + #paramvar237 * 3 + #paramvar238 * -2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 3 + #paramvar232 * -2 >= 0 /\ #paramvar227 + #paramvar228 * 3 + #paramvar229 * -2 >= 0
gen constr of example:(X2(0, 2) => X3(-1, 0) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_2449] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
bounds constr: [#S_2450] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2451] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2452] true
bounds constr: [#S_2453] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2454] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2455] true
bounds constr: [#S_2456] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2457] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2458] true
bounds constr: [#S_2459] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2460] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2461] true
bounds constr: [#S_2462] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2463] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2464] true
bounds constr: [#S_2465] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2466] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2467] true
bounds constr: [#S_2468] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2469] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2470] true
bounds constr: [#S_2471] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2472] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2473] true
bounds constr: [#S_2474] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2475] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2476] true
bounds constr: [#S_2477] true
bounds constr: [#S_2478] true
bounds constr: [#S_2479] true
constraints generated
sat
************** current phase of 52nd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  1 + x1 + -x2 >= 0 /\ -1 + -x1 + x2 >= 0 \/ -1 + x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -1 + x1 + x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ -x1 >= 0 /\ -1 + -x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -2 + -x1 + 2 * x2 >= 0 /\ 1 + x1 + -x2 >= 0 \/ -1 + -x1 + x2 = 0 /\ -2 + -x1 + 2 * x2 >= 0 /\ 2 + -x1 + 2 * x2 >= 0 \/ -1 + x1 + x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ 1 + x1 + 2 * x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + 2 * x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -2 * x2 >= 0 /\ 1 + 2 * x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x2 >= 0 /\ 2 + 2 * x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + x1 >= 0 /\ -1 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ 2 + -x1 + -x2 >= 0 \/ x1 + -x2 != 0 /\ -2 + x1 + x2 >= 0 /\ 1 + -x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + 2 * x2 >= 0 /\ -1 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + 2 * x1 >= 0 /\ -1 + -2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 0) /\ X2(-3, 2) => X1(-1, 1) \/ X1(-3, 1) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X2(-3, 2) /\ X92(2, 2) => X1(-3, 2));
(X2(-4, -3) /\ X93(2, 3) => X1(-4, 3));
(X2(0, 1) /\ X94(-2, -2) => X1(0, -2));
(X2(1, 2) => X1(1, 1) \/ X3(1, 0) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X3(-2, 1) /\ X3(0, 1) => X2(-2, 1));
(X93(2, 3) => X3(2, -3));
(X94(-4, -4) => X3(-4, 1))

************** current phase of 52nd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (55): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );
(X1(-1, -3) => );..]
*** undecided (387): [
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );
(X2(-2, 0) /\ X93(0, 0) => );..]

*** labeling with SAT solving
************** current phase of 52nd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-4) 3)
  added as a negative example with: 
  add negative example(X1(-4, 3) => )
refuting (X1 1 1)
refuting (X2 (-4) (-3))
refuting (X2 (-3) 2)
refuting (X2 (-2) 1)
refuting (X2 (-1) 0)
refuting (X2 0 1)
refuting (X2 1 2)
refuting (X3 (-4) 1)
refuting (X3 (-2) 1)
refuting (X3 0 1)
refuting (X3 1 0)
refuting (X3 2 (-3))
refuting (X90 1 1)
refuting (X91 1 1)
refuting (X92 1 1)
refuting (X92 2 2)
refuting (X93 1 1)
refuting (X93 2 3)
refuting (X94 (-4) (-4))
refuting (X94 (-2) (-2))
refuting (X94 1 1)
refuting (X95 1 1)
refuting (X96 1 1)
proving (X1 (-4) 3)
proving (X1 1 1)
proving (X2 (-4) (-3))
proving (X2 (-3) 2)
proving (X2 (-2) 1)
proving (X2 (-1) 0)
proving (X2 0 1)
proving (X2 1 2)
proving (X3 (-4) 1)
proving (X3 (-2) 1)
proving (X3 0 1)
proving (X3 1 0)
proving (X3 2 (-3))
proving (X90 1 1)
proving (X91 1 1)
proving (X92 1 1)
proving (X92 2 2)
proving (X93 1 1)
proving (X93 2 3)
proving (X94 (-4) (-4))
proving (X94 (-2) (-2))
proving (X94 1 1)
proving (X95 1 1)
proving (X96 1 1)
*** Example Instances obtained by Resolution:
(X1(-4, 3) => )

************** current phase of 52nd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (56): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );..]
*** undecided (387): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );..]

*** labeling with SAT solving
************** current phase of 53rd iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
28 (0): X94(-4, -4)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (59):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
58 (0): X1(-4, 3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
29 (0): X93(2, 3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (81):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
80 (0): X3(-4, 1)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFT
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (71):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X1(-4, 3) => )
constr: [#S_2480] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -4 + #paramvar225 * 3 < 0
gen constr of example:(X2(-4, -3) /\ X93(2, 3) => )
constr: [#S_2481] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 3 < 0 \/ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 3 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 3 < 0 \/ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -4 + #paramvar250 * -3 < 0 \/ #paramvar245 + #paramvar246 * -4 + #paramvar247 * -3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -4 + #paramvar241 * -3 < 0 \/ #paramvar236 + #paramvar237 * -4 + #paramvar238 * -3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -4 + #paramvar232 * -3 < 0 \/ #paramvar227 + #paramvar228 * -4 + #paramvar229 * -3 < 0)
gen constr of example:(X2(-3, 2) /\ X92(2, 2) => )
constr: [#S_2482] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 2 < 0)
gen constr of example:(X2(0, 1) /\ X94(-2, -2) => )
constr: [#S_2483] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar250 < 0 \/ #paramvar245 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar241 < 0 \/ #paramvar236 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar232 < 0 \/ #paramvar227 + #paramvar229 < 0)
gen constr of example:(X3(-2, 1) /\ X3(0, 1) => X2(-2, 1))
constr: [#S_2484] (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 + #paramvar281 < 0 \/ #paramvar276 + #paramvar277 * -2 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 + #paramvar270 < 0 \/ #paramvar265 + #paramvar266 * -2 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 + #paramvar259 < 0 \/ #paramvar254 + #paramvar255 * -2 + #paramvar256 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 < 0 \/ #paramvar286 < 0 \/ #paramvar279 + #paramvar281 < 0 \/ #paramvar276 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 < 0 \/ #paramvar275 < 0 \/ #paramvar268 + #paramvar270 < 0 \/ #paramvar265 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 < 0 \/ #paramvar264 < 0 \/ #paramvar257 + #paramvar259 < 0 \/ #paramvar254 + #paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 <= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -2 + #paramvar250 >= 0 /\ #paramvar245 + #paramvar246 * -2 + #paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 <= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -2 + #paramvar241 >= 0 /\ #paramvar236 + #paramvar237 * -2 + #paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 <= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -2 + #paramvar232 >= 0 /\ #paramvar227 + #paramvar228 * -2 + #paramvar229 >= 0
gen constr of example:(X94(-4, -4) => X3(-4, 1))
constr: [#S_2485] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * -4 + #paramvar349 * -4 < 0 \/ #paramvar344 + #paramvar345 * -4 + #paramvar346 * -4 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * -4 + #paramvar342 * -4 < 0 \/ #paramvar337 + #paramvar338 * -4 + #paramvar339 * -4 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -4 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -4 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -4 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -4 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -4 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -4 + #paramvar256 >= 0
gen constr of example:(X93(2, 3) => X3(2, -3))
constr: [#S_2486] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 3 < 0 \/ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 3 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 3 < 0 \/ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + #paramvar281 * -3 >= 0 /\ #paramvar276 + #paramvar277 * 2 + #paramvar278 * -3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + #paramvar270 * -3 >= 0 /\ #paramvar265 + #paramvar266 * 2 + #paramvar267 * -3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + #paramvar259 * -3 >= 0 /\ #paramvar254 + #paramvar255 * 2 + #paramvar256 * -3 >= 0
gen constr of example:(X2(1, 2) => X1(1, 1) \/ X3(1, 0) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_2487] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * 2 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + #paramvar224 + #paramvar225 >= 0 \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 >= 0 /\ #paramvar276 + #paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 >= 0 /\ #paramvar265 + #paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 >= 0 /\ #paramvar254 + #paramvar255 >= 0
gen constr of example:(X2(-1, 0) /\ X2(-3, 2) => X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_2488] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0
bounds constr: [#S_2489] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2490] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2491] true
bounds constr: [#S_2492] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2493] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2494] true
bounds constr: [#S_2495] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2496] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2497] true
bounds constr: [#S_2498] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2499] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2500] true
bounds constr: [#S_2501] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2502] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2503] true
bounds constr: [#S_2504] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2505] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2506] true
bounds constr: [#S_2507] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2508] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2509] true
bounds constr: [#S_2510] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2511] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2512] true
bounds constr: [#S_2513] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2514] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2515] true
bounds constr: [#S_2516] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2517] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2518] true
constraints generated
sat
************** current phase of 53rd iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  -x1 + -x2 >= 0 /\ x1 + x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ -x1 + x2 >= 0 /\ 1 + x1 + -x2 >= 0 \/ -1 + x2 = 0 /\ 1 + x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x1 + x2 != 0 /\ 1 + 2 * x1 + -x2 >= 0 /\ -x1 + x2 >= 0 \/ -1 + x2 = 0 /\ -2 + -2 * x1 + -x2 >= 0 /\ -1 + x2 >= 0 \/ x2 = 0 /\ 1 + x2 = 0 /\ -1 + -2 * x1 + -x2 >= 0 /\ -1 + -2 * x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + -x2 >= 0 /\ -2 + x1 >= 0 \/ -2 + -x2 >= 0 /\ x2 >= 0
X92(x1: int, x2: int) :=
  -2 + 2 * x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + 2 * x1 >= 0 /\ -1 + -x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 * x2 >= 0 /\ x1 >= 0
X94(x1: int, x2: int) :=
  -2 + -x1 >= 0 /\ 1 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ -2 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + x2 >= 0 /\ 2 + -x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ 2 * x2 >= 0 \/ x1 + -x2 = 0 /\ x1 + x2 >= 0 /\ -x1 + -x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -1) /\ X2(3, 3) => X1(-1, 2) \/ X1(3, 2) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X2(-1, 1) /\ X92(-3, 1) => X1(-1, 1));
(X2(-1, 1) /\ X94(-2, -2) => X1(-1, -2));
(X2(-2, 2) /\ X91(2, -3) => X1(-2, -3));
(X2(1, -1) /\ X95(0, 2) => X1(1, 2));
(X2(2, 2) => X1(2, 1) \/ X3(1, 0) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1));
(X3(-2, 1) => X2(-2, 1));
(X91(2, -1) => X3(2, 0));
(X92(-4, 2) => X3(-4, 2));
(X95(-2, 2) => X3(-2, -1))

************** current phase of 53rd iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (56): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );..]
*** undecided (397): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );..]

*** labeling with SAT solving
************** current phase of 53rd iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-4) (-3))
refuting (X2 (-2) 1)
refuting (X2 (-2) 2)
refuting (X2 (-1) (-1))
refuting (X2 (-1) 1)
refuting (X2 1 (-1))
refuting (X2 2 2)
refuting (X2 3 3)
refuting (X3 (-4) 2)
refuting (X3 (-2) (-1))
refuting (X3 (-2) 1)
refuting (X3 1 0)
refuting (X3 2 0)
refuting (X90 1 1)
refuting (X90 2 2)
refuting (X91 1 1)
refuting (X91 2 (-3))
refuting (X91 2 (-1))
refuting (X91 2 2)
refuting (X92 (-4) 2)
refuting (X92 (-3) 1)
refuting (X92 1 1)
refuting (X92 2 2)
refuting (X93 1 1)
refuting (X93 2 2)
refuting (X93 2 3)
refuting (X94 (-2) (-2))
refuting (X94 1 1)
refuting (X94 2 2)
refuting (X95 (-2) 2)
refuting (X95 0 2)
refuting (X95 1 1)
refuting (X95 2 2)
refuting (X96 1 1)
refuting (X96 2 2)
proving (X1 (-4) 3)
proving (X2 (-4) (-3))
proving (X2 (-2) 1)
proving (X2 (-2) 2)
proving (X2 (-1) (-1))
proving (X2 (-1) 1)
proving (X2 1 (-1))
proving (X2 2 2)
proving (X2 3 3)
proving (X3 (-4) 2)
proving (X3 (-2) (-1))
proving (X3 (-2) 1)
proving (X3 1 0)
proving (X3 2 0)
proving (X90 1 1)
proving (X90 2 2)
proving (X91 1 1)
proving (X91 2 (-3))
proving (X91 2 (-1))
proving (X91 2 2)
proving (X92 (-4) 2)
proving (X92 (-3) 1)
proving (X92 1 1)
proving (X92 2 2)
proving (X93 1 1)
proving (X93 2 2)
proving (X93 2 3)
proving (X94 (-2) (-2))
proving (X94 1 1)
proving (X94 2 2)
proving (X95 (-2) 2)
proving (X95 0 2)
proving (X95 1 1)
proving (X95 2 2)
proving (X96 1 1)
proving (X96 2 2)
*** Example Instances obtained by Resolution:


************** current phase of 53rd iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (56): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );..]
*** undecided (397): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );
(X2(-2, 0) /\ X92(-2, 0) => );
(X2(-2, 0) /\ X92(0, 0) => );..]

*** labeling with SAT solving
************** current phase of 54th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
28 (0): X94(-4, -4)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (28):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (59):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
58 (0): X1(-4, 3)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
30 (0): X92(-4, 2)
31 (0): X92(-3, 1)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
29 (0): X93(2, 3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
30 (0): X91(2, -3)
31 (0): X91(2, -1)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (81):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
80 (0): X3(-4, 1)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFT
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (31):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
29 (0): X95(-2, 2)
30 (0): X95(0, 2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (71):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X2(-2, 2) /\ X91(2, -3) => )
constr: [#S_2519] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * 2 + #paramvar307 * -3 < 0 \/ #paramvar302 + #paramvar303 * 2 + #paramvar304 * -3 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * 2 + #paramvar300 * -3 < 0 \/ #paramvar295 + #paramvar296 * 2 + #paramvar297 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -2 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -2 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -2 + #paramvar229 * 2 < 0)
gen constr of example:(X2(-1, 1) /\ X92(-3, 1) => )
constr: [#S_2520] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -3 + #paramvar321 < 0 \/ #paramvar316 + #paramvar317 * -3 + #paramvar318 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -3 + #paramvar314 < 0 \/ #paramvar309 + #paramvar310 * -3 + #paramvar311 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(-1, 1) /\ X94(-2, -2) => )
constr: [#S_2521] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 < 0 \/ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 < 0 \/ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0)
gen constr of example:(X2(1, -1) /\ X95(0, 2) => )
constr: [#S_2522] (#paramvar364 > 0 \/ #paramvar361 + #paramvar363 * 2 < 0 \/ #paramvar358 + #paramvar360 * 2 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar356 * 2 < 0 \/ #paramvar351 + #paramvar353 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 + -#paramvar229 < 0)
gen constr of example:(X3(-2, 1) => X2(-2, 1))
constr: [#S_2523] (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 + #paramvar281 < 0 \/ #paramvar276 + #paramvar277 * -2 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 + #paramvar270 < 0 \/ #paramvar265 + #paramvar266 * -2 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 + #paramvar259 < 0 \/ #paramvar254 + #paramvar255 * -2 + #paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 <= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -2 + #paramvar250 >= 0 /\ #paramvar245 + #paramvar246 * -2 + #paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 <= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -2 + #paramvar241 >= 0 /\ #paramvar236 + #paramvar237 * -2 + #paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 <= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -2 + #paramvar232 >= 0 /\ #paramvar227 + #paramvar228 * -2 + #paramvar229 >= 0
gen constr of example:(X92(-4, 2) => X3(-4, 2))
constr: [#S_2524] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -4 + #paramvar321 * 2 < 0 \/ #paramvar316 + #paramvar317 * -4 + #paramvar318 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -4 + #paramvar314 * 2 < 0 \/ #paramvar309 + #paramvar310 * -4 + #paramvar311 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -4 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 * -4 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -4 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 * -4 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -4 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 * -4 + #paramvar256 * 2 >= 0
gen constr of example:(X95(-2, 2) => X3(-2, -1))
constr: [#S_2525] (#paramvar364 > 0 \/ #paramvar361 + #paramvar362 * -2 + #paramvar363 * 2 < 0 \/ #paramvar358 + #paramvar359 * -2 + #paramvar360 * 2 < 0) /\ (#paramvar357 > 0 \/ #paramvar354 + #paramvar355 * -2 + #paramvar356 * 2 < 0 \/ #paramvar351 + #paramvar352 * -2 + #paramvar353 * 2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 * -2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * -2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 * -2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * -2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 * -2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * -2 + -#paramvar256 >= 0
gen constr of example:(X91(2, -1) => X3(2, 0))
constr: [#S_2526] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 * 2 + -#paramvar307 < 0 \/ #paramvar302 + #paramvar303 * 2 + -#paramvar304 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 * 2 + -#paramvar300 < 0 \/ #paramvar295 + #paramvar296 * 2 + -#paramvar297 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 >= 0 /\ #paramvar276 + #paramvar277 * 2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 >= 0 /\ #paramvar265 + #paramvar266 * 2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 >= 0 /\ #paramvar254 + #paramvar255 * 2 >= 0
gen constr of example:(X2(2, 2) => X3(1, 0) \/ X90(1, 1) \/ X91(1, 1) \/ X92(1, 1) \/ X93(1, 1) \/ X94(1, 1) \/ X95(1, 1) \/ X96(1, 1))
constr: [#S_2527] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 + #paramvar307 >= 0 /\ #paramvar302 + #paramvar303 + #paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 + #paramvar300 >= 0 /\ #paramvar295 + #paramvar296 + #paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 + #paramvar321 >= 0 /\ #paramvar316 + #paramvar317 + #paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 + #paramvar314 >= 0 /\ #paramvar309 + #paramvar310 + #paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 + #paramvar335 >= 0 /\ #paramvar330 + #paramvar331 + #paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 + #paramvar328 >= 0 /\ #paramvar323 + #paramvar324 + #paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 + #paramvar349 >= 0 /\ #paramvar344 + #paramvar345 + #paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 + #paramvar342 >= 0 /\ #paramvar337 + #paramvar338 + #paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 + #paramvar363 >= 0 /\ #paramvar358 + #paramvar359 + #paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 + #paramvar356 >= 0 /\ #paramvar351 + #paramvar352 + #paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 + #paramvar377 >= 0 /\ #paramvar372 + #paramvar373 + #paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 + #paramvar370 >= 0 /\ #paramvar365 + #paramvar366 + #paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 + #paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 + #paramvar289 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 >= 0 /\ #paramvar276 + #paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 >= 0 /\ #paramvar265 + #paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 >= 0 /\ #paramvar254 + #paramvar255 >= 0
gen constr of example:(X2(-1, -1) /\ X2(3, 3) => X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_2528] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + -#paramvar229 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0
bounds constr: [#S_2529] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2530] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2531] true
bounds constr: [#S_2532] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2533] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2534] true
bounds constr: [#S_2535] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2536] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2537] true
bounds constr: [#S_2538] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2539] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2540] true
bounds constr: [#S_2541] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2542] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2543] true
bounds constr: [#S_2544] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2545] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2546] true
bounds constr: [#S_2547] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2548] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2549] true
bounds constr: [#S_2550] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2551] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2552] true
bounds constr: [#S_2553] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2554] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2555] true
bounds constr: [#S_2556] true
bounds constr: [#S_2557] true
bounds constr: [#S_2558] true
constraints generated
sat
************** current phase of 54th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ 2 + -x1 + -x2 >= 0 \/ 1 + x2 != 0 /\ -x1 + -x2 >= 0 /\ x1 + x2 >= 0 \/ x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ -1 + -x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ x1 + x2 >= 0 /\ -2 * x1 + -x2 >= 0 \/ 1 + x2 != 0 /\ -1 + -x1 + 2 * x2 >= 0 /\ -1 + 2 * x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 2 + 2 * x2 >= 0 /\ -2 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 + -x2 >= 0 /\ -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + x2 >= 0 /\ -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + -x2 >= 0 /\ -2 + 2 * x1 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + x1 + x2 >= 0 /\ -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ -2 + -x1 + x2 >= 0
X96(x1: int, x2: int) :=
  -2 + x1 + -x2 >= 0 /\ -1 + -x1 + x2 >= 0 \/ -2 + -x1 + x2 >= 0 /\ 1 + -2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, -1) /\ X2(-5, 3) => X1(-1, 2) \/ X1(-5, 2) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X2(-3, 1) /\ X93(-1, -1) => X1(-3, -1));
(X2(-3, 1) /\ X94(1, 1) => X1(-3, 1));
(X2(-5, 3) => X1(-5, 2) \/ X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X2(0, 0) /\ X96(-3, -1) => X1(0, -1));
(X3(-2, 4) /\ X3(7, 4) => X2(7, 4));
(X96(-2, 0) => X3(-2, 0))

************** current phase of 54th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (56): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );
(X1(-2, 3) => );..]
*** undecided (404): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 54th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-5) 2)
  added as a negative example with: 
  add negative example(X1(-5, 2) => )
refuting (X2 (-5) 3)
refuting (X2 (-3) 1)
refuting (X2 (-1) (-1))
refuting (X2 0 0)
refuting (X2 7 4)
refuting (X3 (-2) 0)
refuting (X3 (-2) 4)
refuting (X3 2 (-1))
refuting (X3 7 4)
refuting (X90 2 2)
refuting (X91 2 2)
refuting (X92 2 2)
refuting (X93 (-1) (-1))
refuting (X93 2 2)
refuting (X94 1 1)
refuting (X94 2 2)
refuting (X95 2 2)
refuting (X96 (-3) (-1))
refuting (X96 (-2) 0)
refuting (X96 2 2)
proving (X1 (-5) 2)
proving (X2 (-5) 3)
proving (X2 (-3) 1)
proving (X2 (-1) (-1))
proving (X2 0 0)
proving (X2 7 4)
proving (X3 (-2) 0)
proving (X3 (-2) 4)
proving (X3 2 (-1))
proving (X3 7 4)
proving (X90 2 2)
proving (X91 2 2)
proving (X92 2 2)
proving (X93 (-1) (-1))
proving (X93 2 2)
proving (X94 1 1)
proving (X94 2 2)
proving (X95 2 2)
proving (X96 (-3) (-1))
proving (X96 (-2) 0)
proving (X96 2 2)
*** Example Instances obtained by Resolution:
(X1(-5, 2) => )

************** current phase of 54th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (57): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );..]
*** undecided (404): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 55th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
28 (0): X94(-4, -4)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
28 (0): X96(-2, 0)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (60):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
58 (0): X1(-4, 3)
59 (0): X1(-5, 2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
30 (0): X92(-4, 2)
31 (0): X92(-3, 1)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
29 (0): X93(2, 3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
30 (0): X91(2, -3)
31 (0): X91(2, -1)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (81):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
80 (0): X3(-4, 1)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFT
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (31):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
29 (0): X95(-2, 2)
30 (0): X95(0, 2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (72):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
71 (0): X2(-5, 3)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X1(-5, 2) => )
constr: [#S_2559] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -5 + #paramvar225 * 2 < 0
gen constr of example:(X2(-3, 1) /\ X93(-1, -1) => )
constr: [#S_2560] (#paramvar336 < 0 \/ #paramvar333 + -#paramvar334 + -#paramvar335 < 0 \/ #paramvar330 + -#paramvar331 + -#paramvar332 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + -#paramvar327 + -#paramvar328 < 0 \/ #paramvar323 + -#paramvar324 + -#paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 < 0)
gen constr of example:(X2(-3, 1) /\ X94(1, 1) => )
constr: [#S_2561] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 + #paramvar349 < 0 \/ #paramvar344 + #paramvar345 + #paramvar346 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 + #paramvar342 < 0 \/ #paramvar337 + #paramvar338 + #paramvar339 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 < 0)
gen constr of example:(X2(0, 0) /\ X96(-3, -1) => )
constr: [#S_2562] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * -3 + -#paramvar377 < 0 \/ #paramvar372 + #paramvar373 * -3 + -#paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * -3 + -#paramvar370 < 0 \/ #paramvar365 + #paramvar366 * -3 + -#paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 < 0 \/ #paramvar245 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 < 0 \/ #paramvar236 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 < 0 \/ #paramvar227 < 0)
gen constr of example:(X3(-2, 4) /\ X3(7, 4) => X2(7, 4))
constr: [#S_2563] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 + #paramvar281 * 4 < 0 \/ #paramvar276 + #paramvar277 * -2 + #paramvar278 * 4 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 + #paramvar270 * 4 < 0 \/ #paramvar265 + #paramvar266 * -2 + #paramvar267 * 4 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 + #paramvar259 * 4 < 0 \/ #paramvar254 + #paramvar255 * -2 + #paramvar256 * 4 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 7 + #paramvar281 * 4 < 0 \/ #paramvar276 + #paramvar277 * 7 + #paramvar278 * 4 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 7 + #paramvar270 * 4 < 0 \/ #paramvar265 + #paramvar266 * 7 + #paramvar267 * 4 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 7 + #paramvar259 * 4 < 0 \/ #paramvar254 + #paramvar255 * 7 + #paramvar256 * 4 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 7 + #paramvar250 * 4 >= 0 /\ #paramvar245 + #paramvar246 * 7 + #paramvar247 * 4 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 7 + #paramvar241 * 4 >= 0 /\ #paramvar236 + #paramvar237 * 7 + #paramvar238 * 4 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 7 + #paramvar232 * 4 >= 0 /\ #paramvar227 + #paramvar228 * 7 + #paramvar229 * 4 >= 0
gen constr of example:(X96(-2, 0) => X3(-2, 0))
constr: [#S_2564] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * -2 < 0 \/ #paramvar372 + #paramvar373 * -2 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * -2 < 0 \/ #paramvar365 + #paramvar366 * -2 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -2 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -2 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -2 >= 0
gen constr of example:(X2(-5, 3) => X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_2565] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -5 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar246 * -5 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -5 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar237 * -5 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -5 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar228 * -5 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + -#paramvar256 >= 0
gen constr of example:(X2(-1, -1) /\ X2(-5, 3) => X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_2566] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + -#paramvar249 + -#paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + -#paramvar240 + -#paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + -#paramvar231 + -#paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + -#paramvar229 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -5 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar246 * -5 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -5 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar237 * -5 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -5 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar228 * -5 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0
bounds constr: [#S_2567] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2568] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2569] true
bounds constr: [#S_2570] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2571] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2572] true
bounds constr: [#S_2573] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2574] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2575] true
bounds constr: [#S_2576] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2577] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2578] true
bounds constr: [#S_2579] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2580] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2581] true
bounds constr: [#S_2582] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2583] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2584] true
bounds constr: [#S_2585] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2586] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2587] true
bounds constr: [#S_2588] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2589] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2590] true
bounds constr: [#S_2591] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2592] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2593] true
bounds constr: [#S_2594] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2595] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2596] true
constraints generated
sat
************** current phase of 55th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x2 >= 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ -1 + x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ 2 + -x1 + -x2 >= 0 \/ 1 + x2 != 0 /\ -x1 + -x2 >= 0 /\ x1 + x2 >= 0 \/ x2 = 0 /\ -1 + x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -1 + -x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ x1 + x2 >= 0 /\ -x1 + -x2 >= 0 \/ 1 + x2 != 0 /\ -1 + -x1 + 2 * x2 >= 0 /\ -1 + 2 * x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  false
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 2 + 2 * x2 >= 0 /\ -2 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x1 + -x2 >= 0 /\ 1 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + x1 + x2 >= 0 /\ -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + -x2 >= 0 /\ -2 + 2 * x1 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + x1 + x2 >= 0 /\ -x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ -2 + -x1 + x2 >= 0
X96(x1: int, x2: int) :=
  -2 + x1 + -x2 >= 0 /\ -1 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ 1 + -2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 1) /\ X94(1, 1) => X1(-1, 1));
(X2(-3, 3) => X1(-3, 2) \/ X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2));
(X2(-4, 4) /\ X2(2, -2) => X1(-4, 3) \/ X1(2, 3) \/ X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3));
(X3(1, 1) => X2(1, 1))

************** current phase of 55th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (57): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );..]
*** undecided (408): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 55th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-5) 3)
refuting (X2 (-4) 4)
refuting (X2 (-3) 3)
refuting (X2 (-1) (-1))
refuting (X2 (-1) 1)
refuting (X2 1 1)
refuting (X2 2 (-2))
refuting (X3 1 1)
refuting (X3 2 (-1))
refuting (X90 2 2)
refuting (X90 3 3)
refuting (X91 2 2)
refuting (X91 3 3)
refuting (X92 2 2)
refuting (X92 3 3)
refuting (X93 2 2)
refuting (X93 3 3)
refuting (X94 1 1)
refuting (X94 2 2)
refuting (X94 3 3)
refuting (X95 2 2)
refuting (X95 3 3)
refuting (X96 2 2)
refuting (X96 3 3)
proving (X1 (-5) 2)
proving (X2 (-5) 3)
proving (X2 (-4) 4)
proving (X2 (-3) 3)
proving (X2 (-1) (-1))
proving (X2 (-1) 1)
proving (X2 1 1)
proving (X2 2 (-2))
proving (X3 1 1)
proving (X3 2 (-1))
proving (X90 2 2)
proving (X90 3 3)
proving (X91 2 2)
proving (X91 3 3)
proving (X92 2 2)
proving (X92 3 3)
proving (X93 2 2)
proving (X93 3 3)
proving (X94 1 1)
proving (X94 2 2)
proving (X94 3 3)
proving (X95 2 2)
proving (X95 3 3)
proving (X96 2 2)
proving (X96 3 3)
*** Example Instances obtained by Resolution:


************** current phase of 55th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (57): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );..]
*** undecided (408): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 56th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
28 (0): X94(-4, -4)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
28 (0): X96(-2, 0)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (60):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
58 (0): X1(-4, 3)
59 (0): X1(-5, 2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
30 (0): X92(-4, 2)
31 (0): X92(-3, 1)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
29 (0): X93(2, 3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
30 (0): X91(2, -3)
31 (0): X91(2, -1)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (81):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
80 (0): X3(-4, 1)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFT
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (31):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
29 (0): X95(-2, 2)
30 (0): X95(0, 2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (73):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
71 (0): X2(-5, 3)
72 (0): X2(-4, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X2(-1, 1) /\ X94(1, 1) => )
constr: [#S_2597] (#paramvar350 < 0 \/ #paramvar347 + #paramvar348 + #paramvar349 < 0 \/ #paramvar344 + #paramvar345 + #paramvar346 < 0) /\ (#paramvar343 < 0 \/ #paramvar340 + #paramvar341 + #paramvar342 < 0 \/ #paramvar337 + #paramvar338 + #paramvar339 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 > 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 + #paramvar250 < 0 \/ #paramvar245 + -#paramvar246 + #paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 > 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 + #paramvar241 < 0 \/ #paramvar236 + -#paramvar237 + #paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 > 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 + #paramvar232 < 0 \/ #paramvar227 + -#paramvar228 + #paramvar229 < 0)
gen constr of example:(X3(1, 1) => X2(1, 1))
constr: [#S_2598] (#paramvar282 > 0 \/ #paramvar283 < 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + #paramvar281 < 0 \/ #paramvar276 + #paramvar277 + #paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 < 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + #paramvar270 < 0 \/ #paramvar265 + #paramvar266 + #paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 < 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + #paramvar259 < 0 \/ #paramvar254 + #paramvar255 + #paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 <= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 + #paramvar250 >= 0 /\ #paramvar245 + #paramvar246 + #paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 <= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 + #paramvar241 >= 0 /\ #paramvar236 + #paramvar237 + #paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 <= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 + #paramvar232 >= 0 /\ #paramvar227 + #paramvar228 + #paramvar229 >= 0
gen constr of example:(X2(-3, 3) => X3(2, -1) \/ X90(2, 2) \/ X91(2, 2) \/ X92(2, 2) \/ X93(2, 2) \/ X94(2, 2) \/ X95(2, 2) \/ X96(2, 2))
constr: [#S_2599] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 2 + #paramvar307 * 2 >= 0 /\ #paramvar302 + #paramvar303 * 2 + #paramvar304 * 2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 2 + #paramvar300 * 2 >= 0 /\ #paramvar295 + #paramvar296 * 2 + #paramvar297 * 2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 2 + #paramvar321 * 2 >= 0 /\ #paramvar316 + #paramvar317 * 2 + #paramvar318 * 2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 2 + #paramvar314 * 2 >= 0 /\ #paramvar309 + #paramvar310 * 2 + #paramvar311 * 2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 >= 0 /\ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 >= 0 /\ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 2 + #paramvar349 * 2 >= 0 /\ #paramvar344 + #paramvar345 * 2 + #paramvar346 * 2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 2 + #paramvar342 * 2 >= 0 /\ #paramvar337 + #paramvar338 * 2 + #paramvar339 * 2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 2 + #paramvar363 * 2 >= 0 /\ #paramvar358 + #paramvar359 * 2 + #paramvar360 * 2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 2 + #paramvar356 * 2 >= 0 /\ #paramvar351 + #paramvar352 * 2 + #paramvar353 * 2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 2 + #paramvar377 * 2 >= 0 /\ #paramvar372 + #paramvar373 * 2 + #paramvar374 * 2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 2 + #paramvar370 * 2 >= 0 /\ #paramvar365 + #paramvar366 * 2 + #paramvar367 * 2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 2 + #paramvar293 * 2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 2 + #paramvar289 * 2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 >= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 2 + -#paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 2 + -#paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 >= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 2 + -#paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 2 + -#paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 >= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 2 + -#paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 2 + -#paramvar256 >= 0
gen constr of example:(X2(-4, 4) /\ X2(2, -2) => X90(3, 3) \/ X91(3, 3) \/ X92(3, 3) \/ X93(3, 3) \/ X94(3, 3) \/ X95(3, 3) \/ X96(3, 3))
constr: [#S_2600] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -4 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar246 * -4 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -4 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar237 * -4 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -4 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar228 * -4 + #paramvar229 * 4 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 * -2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * 3 + #paramvar307 * 3 >= 0 /\ #paramvar302 + #paramvar303 * 3 + #paramvar304 * 3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * 3 + #paramvar300 * 3 >= 0 /\ #paramvar295 + #paramvar296 * 3 + #paramvar297 * 3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * 3 + #paramvar321 * 3 >= 0 /\ #paramvar316 + #paramvar317 * 3 + #paramvar318 * 3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * 3 + #paramvar314 * 3 >= 0 /\ #paramvar309 + #paramvar310 * 3 + #paramvar311 * 3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * 3 + #paramvar335 * 3 >= 0 /\ #paramvar330 + #paramvar331 * 3 + #paramvar332 * 3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * 3 + #paramvar328 * 3 >= 0 /\ #paramvar323 + #paramvar324 * 3 + #paramvar325 * 3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * 3 + #paramvar349 * 3 >= 0 /\ #paramvar344 + #paramvar345 * 3 + #paramvar346 * 3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * 3 + #paramvar342 * 3 >= 0 /\ #paramvar337 + #paramvar338 * 3 + #paramvar339 * 3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * 3 + #paramvar363 * 3 >= 0 /\ #paramvar358 + #paramvar359 * 3 + #paramvar360 * 3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * 3 + #paramvar356 * 3 >= 0 /\ #paramvar351 + #paramvar352 * 3 + #paramvar353 * 3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * 3 + #paramvar377 * 3 >= 0 /\ #paramvar372 + #paramvar373 * 3 + #paramvar374 * 3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * 3 + #paramvar370 * 3 >= 0 /\ #paramvar365 + #paramvar366 * 3 + #paramvar367 * 3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * 3 + #paramvar293 * 3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * 3 + #paramvar289 * 3 >= 0
bounds constr: [#S_2601] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2602] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2603] true
bounds constr: [#S_2604] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2605] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2606] true
bounds constr: [#S_2607] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2608] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2609] true
bounds constr: [#S_2610] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2611] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2612] true
bounds constr: [#S_2613] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2614] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2615] true
bounds constr: [#S_2616] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2617] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2618] true
bounds constr: [#S_2619] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2620] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2621] true
bounds constr: [#S_2622] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2623] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2624] true
bounds constr: [#S_2625] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2626] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2627] true
bounds constr: [#S_2628] true
bounds constr: [#S_2629] true
bounds constr: [#S_2630] true
constraints generated
sat
************** current phase of 56th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  x2 = 0 /\ -1 + x2 = 0 /\ -1 + -x1 >= 0 /\ -2 + -x1 >= 0 \/ 1 + x1 + x2 >= 0 /\ -2 + -2 * x1 >= 0 \/ -1 + x1 + -x2 >= 0 /\ 1 + -x1 + x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ 1 + x2 != 0 /\ 1 + -x1 + x2 >= 0 /\ -1 + x1 + -2 * x2 >= 0 \/ -1 + x1 + -x2 >= 0 /\ 2 + -x1 + 2 * x2 >= 0 \/ -1 + x1 + x2 != 0 /\ 1 + -x1 + -x2 >= 0 /\ -2 + 2 * x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x1 >= 0 \/ x1 + -x2 = 0 /\ 1 + -x1 + x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 * x1 >= 0 /\ -x2 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ 2 * x2 >= 0 /\ -2 + x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + -x1 + x2 >= 0 /\ x1 + -x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0 /\ 1 + 2 * x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x1 + -x2 >= 0 /\ x1 + x2 >= 0 \/ -1 + x1 + x2 >= 0 /\ -2 + -x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 + x2 >= 0 /\ -2 * x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-1, 0) /\ X90(1, 1) => X1(-1, 1));
(X2(-1, 0) /\ X92(2, 0) => X1(-1, 0));
(X3(-6, -6) /\ X3(4, -6) => X2(4, -6));
(X92(5, 1) => X3(5, 1))

************** current phase of 56th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (57): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );..]
*** undecided (412): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 56th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X2 (-1) 0)
refuting (X2 4 (-6))
refuting (X3 (-6) (-6))
refuting (X3 4 (-6))
refuting (X3 5 1)
refuting (X90 1 1)
refuting (X92 2 0)
refuting (X92 5 1)
proving (X2 (-1) 0)
proving (X2 4 (-6))
proving (X3 (-6) (-6))
proving (X3 4 (-6))
proving (X3 5 1)
proving (X90 1 1)
proving (X92 2 0)
proving (X92 5 1)
*** Example Instances obtained by Resolution:


************** current phase of 56th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (57): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );..]
*** undecided (412): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );
(X2(-2, 0) /\ X91(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 57th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
28 (0): X94(-4, -4)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
28 (0): X96(-2, 0)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (60):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
58 (0): X1(-4, 3)
59 (0): X1(-5, 2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (33):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
30 (0): X92(-4, 2)
31 (0): X92(-3, 1)
32 (0): X92(5, 1)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
29 (0): X93(2, 3)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
30 (0): X91(2, -3)
31 (0): X91(2, -1)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (84):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
80 (0): X3(-4, 1)
81 (0): X3(-6, -6)
82 (0): X3(4, -6)
83 (0): X3(5, 1)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFT
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (31):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
29 (0): X95(-2, 2)
30 (0): X95(0, 2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (74):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
71 (0): X2(-5, 3)
72 (0): X2(-4, 4)
73 (0): X2(4, -6)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X2(-1, 0) /\ X90(1, 1) => )
constr: [#S_2631] (#paramvar294 < 0 \/ #paramvar291 + #paramvar292 + #paramvar293 < 0) /\ (#paramvar290 < 0 \/ #paramvar287 + #paramvar288 + #paramvar289 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X2(-1, 0) /\ X92(2, 0) => )
constr: [#S_2632] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * 2 < 0 \/ #paramvar316 + #paramvar317 * 2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * 2 < 0 \/ #paramvar309 + #paramvar310 * 2 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + -#paramvar249 < 0 \/ #paramvar245 + -#paramvar246 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + -#paramvar240 < 0 \/ #paramvar236 + -#paramvar237 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + -#paramvar231 < 0 \/ #paramvar227 + -#paramvar228 < 0)
gen constr of example:(X3(-6, -6) /\ X3(4, -6) => X2(4, -6))
constr: [#S_2633] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -6 + #paramvar281 * -6 < 0 \/ #paramvar276 + #paramvar277 * -6 + #paramvar278 * -6 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -6 + #paramvar270 * -6 < 0 \/ #paramvar265 + #paramvar266 * -6 + #paramvar267 * -6 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -6 + #paramvar259 * -6 < 0 \/ #paramvar254 + #paramvar255 * -6 + #paramvar256 * -6 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * 4 + #paramvar281 * -6 < 0 \/ #paramvar276 + #paramvar277 * 4 + #paramvar278 * -6 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * 4 + #paramvar270 * -6 < 0 \/ #paramvar265 + #paramvar266 * 4 + #paramvar267 * -6 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * 4 + #paramvar259 * -6 < 0 \/ #paramvar254 + #paramvar255 * 4 + #paramvar256 * -6 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * 4 + #paramvar250 * -6 >= 0 /\ #paramvar245 + #paramvar246 * 4 + #paramvar247 * -6 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * 4 + #paramvar241 * -6 >= 0 /\ #paramvar236 + #paramvar237 * 4 + #paramvar238 * -6 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * 4 + #paramvar232 * -6 >= 0 /\ #paramvar227 + #paramvar228 * 4 + #paramvar229 * -6 >= 0
gen constr of example:(X92(5, 1) => X3(5, 1))
constr: [#S_2634] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * 5 + #paramvar321 < 0 \/ #paramvar316 + #paramvar317 * 5 + #paramvar318 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * 5 + #paramvar314 < 0 \/ #paramvar309 + #paramvar310 * 5 + #paramvar311 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 >= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 5 + #paramvar281 >= 0 /\ #paramvar276 + #paramvar277 * 5 + #paramvar278 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 >= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 5 + #paramvar270 >= 0 /\ #paramvar265 + #paramvar266 * 5 + #paramvar267 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 >= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 5 + #paramvar259 >= 0 /\ #paramvar254 + #paramvar255 * 5 + #paramvar256 >= 0
bounds constr: [#S_2635] true
bounds constr: [#S_2636] true
bounds constr: [#S_2637] true
bounds constr: [#S_2638] true
bounds constr: [#S_2639] true
bounds constr: [#S_2640] true
bounds constr: [#S_2641] true
bounds constr: [#S_2642] true
bounds constr: [#S_2643] true
bounds constr: [#S_2644] true
bounds constr: [#S_2645] true
bounds constr: [#S_2646] true
bounds constr: [#S_2647] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2648] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2649] true
bounds constr: [#S_2650] true
bounds constr: [#S_2651] true
bounds constr: [#S_2652] true
bounds constr: [#S_2653] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2654] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2655] true
bounds constr: [#S_2656] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2657] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2658] true
bounds constr: [#S_2659] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2660] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2661] true
bounds constr: [#S_2662] true
bounds constr: [#S_2663] true
bounds constr: [#S_2664] true
constraints generated
sat
************** current phase of 57th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ 1 + x1 + x2 >= 0 /\ -1 + -x1 + -x2 >= 0 \/ -1 + x2 != 0 /\ -2 + -x1 + x2 >= 0 /\ -1 + -x1 + -x2 >= 0 \/ -1 + -x1 >= 0 /\ -1 + x1 + x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x2 != 0 /\ 1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ 2 + -x1 + 2 * x2 >= 0 /\ -1 + -x1 + -x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ -1 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0 \/ x2 != 0 /\ -1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ 1 + -2 * x1 + x2 >= 0 /\ 2 * x1 + x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + x1 >= 0 /\ -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ 2 + x1 + -x2 >= 0 /\ x1 >= 0
X92(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + x2 >= 0 /\ -2 + -x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x2 >= 0 /\ 2 + x1 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -1 + -x1 + x2 >= 0 /\ -2 + -x2 >= 0 \/ -2 + -x1 >= 0 /\ -2 + x1 + x2 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + 2 * x2 >= 0 /\ -1 + -x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -x2 >= 0 /\ x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ x1 + x2 >= 0 /\ -2 * x2 >= 0
X96(x1: int, x2: int) :=
  -1 + x1 + -x2 >= 0 /\ -2 + 2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ -2 + -x1 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-2, 0) /\ X2(-3, 2) => X1(-2, -1) \/ X1(-3, -1) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(-2, 0) /\ X96(2, 1) => X1(-2, 1));
(X2(-3, -1) /\ X91(0, 0) => X1(-3, 0));
(X2(-3, -1) /\ X95(0, 0) => X1(-3, 0));
(X2(-3, 2) /\ X93(-3, -2) => X1(-3, -2));
(X2(-3, 2) => X1(-3, -1) \/ X3(-1, 0) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1));
(X2(1, -2) /\ X92(-2, -2) => X1(1, -2));
(X3(-2, -2) => X2(-2, -2));
(X93(-2, 6) => X3(-2, -6));
(X96(3, 1) => X3(3, 0))

************** current phase of 57th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (57): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );
(X1(-2, 2) => );..]
*** undecided (422): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );
(X2(-2, -1) /\ X95(-3, -3) => );
(X2(-2, -1) /\ X95(-1, -1) => );..]

*** labeling with SAT solving
************** current phase of 57th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 (-3) 0)
  added as a negative example with: 
  add negative example(X1(-3, 0) => )
refuting (X2 (-3) (-1))
refuting (X2 (-3) 2)
refuting (X2 (-2) (-2))
refuting (X2 (-2) 0)
refuting (X2 1 (-2))
refuting (X3 (-2) (-6))
refuting (X3 (-2) (-2))
refuting (X3 (-1) 0)
refuting (X3 3 0)
refuting (X90 (-1) (-1))
refuting (X91 (-1) (-1))
refuting (X91 0 0)
refuting (X92 (-2) (-2))
refuting (X92 (-1) (-1))
refuting (X93 (-3) (-2))
refuting (X93 (-2) 6)
refuting (X93 (-1) (-1))
refuting (X94 (-1) (-1))
refuting (X95 (-1) (-1))
refuting (X95 0 0)
refuting (X96 (-1) (-1))
refuting (X96 2 1)
refuting (X96 3 1)
proving (X1 (-3) 0)
proving (X2 (-3) (-1))
proving (X2 (-3) 2)
proving (X2 (-2) (-2))
proving (X2 (-2) 0)
proving (X2 1 (-2))
proving (X3 (-2) (-6))
proving (X3 (-2) (-2))
proving (X3 (-1) 0)
proving (X3 3 0)
proving (X90 (-1) (-1))
proving (X91 (-1) (-1))
proving (X91 0 0)
proving (X92 (-2) (-2))
proving (X92 (-1) (-1))
proving (X93 (-3) (-2))
proving (X93 (-2) 6)
proving (X93 (-1) (-1))
proving (X94 (-1) (-1))
proving (X95 (-1) (-1))
proving (X95 0 0)
proving (X96 (-1) (-1))
proving (X96 2 1)
proving (X96 3 1)
*** Example Instances obtained by Resolution:
(X1(-3, 0) => )

************** current phase of 57th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (58): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 0) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );..]
*** undecided (422): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, -1) /\ X91(0, 0) => );
(X2(-3, -1) /\ X95(0, 0) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 58th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
28 (0): X94(-4, -4)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
28 (0): X96(-2, 0)
29 (0): X96(3, 1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (61):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
58 (0): X1(-4, 3)
59 (0): X1(-5, 2)
60 (0): X1(-3, 0)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (33):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
30 (0): X92(-4, 2)
31 (0): X92(-3, 1)
32 (0): X92(5, 1)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
29 (0): X93(2, 3)
30 (0): X93(-3, -2)
31 (0): X93(-2, 6)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
30 (0): X91(2, -3)
31 (0): X91(2, -1)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (85):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
80 (0): X3(-4, 1)
81 (0): X3(-6, -6)
82 (0): X3(4, -6)
83 (0): X3(5, 1)
84 (0): X3(-2, -6)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFTF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (31):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
29 (0): X95(-2, 2)
30 (0): X95(0, 2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (74):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
71 (0): X2(-5, 3)
72 (0): X2(-4, 4)
73 (0): X2(4, -6)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X1(-3, 0) => )
constr: [#S_2665] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * -3 < 0
gen constr of example:(X2(-3, -1) /\ X91(0, 0) => )
constr: [#S_2666] (#paramvar308 < 0 \/ #paramvar305 < 0 \/ #paramvar302 < 0) /\ (#paramvar301 < 0 \/ #paramvar298 < 0 \/ #paramvar295 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * -3 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -3 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * -3 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -3 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * -3 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -3 + -#paramvar229 < 0)
gen constr of example:(X2(-3, -1) /\ X95(0, 0) => )
constr: [#S_2667] (#paramvar364 < 0 \/ #paramvar361 < 0 \/ #paramvar358 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 < 0 \/ #paramvar351 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * -3 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -3 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * -3 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -3 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * -3 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -3 + -#paramvar229 < 0)
gen constr of example:(X2(-3, 2) /\ X93(-3, -2) => )
constr: [#S_2668] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -2 < 0 \/ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -2 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -2 < 0 \/ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 2 < 0)
gen constr of example:(X2(-2, 0) /\ X96(2, 1) => )
constr: [#S_2669] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * 2 + #paramvar377 < 0 \/ #paramvar372 + #paramvar373 * 2 + #paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * 2 + #paramvar370 < 0 \/ #paramvar365 + #paramvar366 * 2 + #paramvar367 < 0) \/ (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0)
gen constr of example:(X2(1, -2) /\ X92(-2, -2) => )
constr: [#S_2670] (#paramvar322 < 0 \/ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 < 0) /\ (#paramvar315 < 0 \/ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * -2 < 0)
gen constr of example:(X3(-2, -2) => X2(-2, -2))
constr: [#S_2671] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -2 + #paramvar281 * -2 < 0 \/ #paramvar276 + #paramvar277 * -2 + #paramvar278 * -2 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -2 + #paramvar270 * -2 < 0 \/ #paramvar265 + #paramvar266 * -2 + #paramvar267 * -2 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -2 + #paramvar259 * -2 < 0 \/ #paramvar254 + #paramvar255 * -2 + #paramvar256 * -2 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -2 + #paramvar250 * -2 >= 0 /\ #paramvar245 + #paramvar246 * -2 + #paramvar247 * -2 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -2 + #paramvar241 * -2 >= 0 /\ #paramvar236 + #paramvar237 * -2 + #paramvar238 * -2 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -2 + #paramvar232 * -2 >= 0 /\ #paramvar227 + #paramvar228 * -2 + #paramvar229 * -2 >= 0
gen constr of example:(X93(-2, 6) => X3(-2, -6))
constr: [#S_2672] (#paramvar336 > 0 \/ #paramvar333 + #paramvar334 * -2 + #paramvar335 * 6 < 0 \/ #paramvar330 + #paramvar331 * -2 + #paramvar332 * 6 < 0) /\ (#paramvar329 > 0 \/ #paramvar326 + #paramvar327 * -2 + #paramvar328 * 6 < 0 \/ #paramvar323 + #paramvar324 * -2 + #paramvar325 * 6 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * -6 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * -6 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * -6 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * -6 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * -6 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * -6 >= 0
gen constr of example:(X96(3, 1) => X3(3, 0))
constr: [#S_2673] (#paramvar378 > 0 \/ #paramvar375 + #paramvar376 * 3 + #paramvar377 < 0 \/ #paramvar372 + #paramvar373 * 3 + #paramvar374 < 0) /\ (#paramvar371 > 0 \/ #paramvar368 + #paramvar369 * 3 + #paramvar370 < 0 \/ #paramvar365 + #paramvar366 * 3 + #paramvar367 < 0) \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * 3 >= 0 /\ #paramvar276 + #paramvar277 * 3 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * 3 >= 0 /\ #paramvar265 + #paramvar266 * 3 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * 3 >= 0 /\ #paramvar254 + #paramvar255 * 3 >= 0
gen constr of example:(X2(-3, 2) => X3(-1, 0) \/ X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_2674] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0 \/ #paramvar282 >= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + -#paramvar280 >= 0 /\ #paramvar276 + -#paramvar277 >= 0 \/ #paramvar271 >= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + -#paramvar269 >= 0 /\ #paramvar265 + -#paramvar266 >= 0 \/ #paramvar260 >= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + -#paramvar258 >= 0 /\ #paramvar254 + -#paramvar255 >= 0
gen constr of example:(X2(-2, 0) /\ X2(-3, 2) => X90(-1, -1) \/ X91(-1, -1) \/ X92(-1, -1) \/ X93(-1, -1) \/ X94(-1, -1) \/ X95(-1, -1) \/ X96(-1, -1))
constr: [#S_2675] (#paramvar251 > 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -2 < 0 \/ #paramvar245 + #paramvar246 * -2 < 0) /\ (#paramvar242 > 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -2 < 0 \/ #paramvar236 + #paramvar237 * -2 < 0) /\ (#paramvar233 > 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -2 < 0 \/ #paramvar227 + #paramvar228 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + -#paramvar306 + -#paramvar307 >= 0 /\ #paramvar302 + -#paramvar303 + -#paramvar304 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + -#paramvar299 + -#paramvar300 >= 0 /\ #paramvar295 + -#paramvar296 + -#paramvar297 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + -#paramvar320 + -#paramvar321 >= 0 /\ #paramvar316 + -#paramvar317 + -#paramvar318 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + -#paramvar313 + -#paramvar314 >= 0 /\ #paramvar309 + -#paramvar310 + -#paramvar311 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + -#paramvar334 + -#paramvar335 >= 0 /\ #paramvar330 + -#paramvar331 + -#paramvar332 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + -#paramvar327 + -#paramvar328 >= 0 /\ #paramvar323 + -#paramvar324 + -#paramvar325 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + -#paramvar348 + -#paramvar349 >= 0 /\ #paramvar344 + -#paramvar345 + -#paramvar346 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + -#paramvar341 + -#paramvar342 >= 0 /\ #paramvar337 + -#paramvar338 + -#paramvar339 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + -#paramvar362 + -#paramvar363 >= 0 /\ #paramvar358 + -#paramvar359 + -#paramvar360 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + -#paramvar355 + -#paramvar356 >= 0 /\ #paramvar351 + -#paramvar352 + -#paramvar353 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + -#paramvar376 + -#paramvar377 >= 0 /\ #paramvar372 + -#paramvar373 + -#paramvar374 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + -#paramvar369 + -#paramvar370 >= 0 /\ #paramvar365 + -#paramvar366 + -#paramvar367 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + -#paramvar292 + -#paramvar293 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + -#paramvar288 + -#paramvar289 >= 0
bounds constr: [#S_2676] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2677] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2678] true
bounds constr: [#S_2679] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2680] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2681] true
bounds constr: [#S_2682] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2683] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2684] true
bounds constr: [#S_2685] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2686] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2687] true
bounds constr: [#S_2688] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2689] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2690] true
bounds constr: [#S_2691] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2692] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2693] true
bounds constr: [#S_2694] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2695] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2696] true
bounds constr: [#S_2697] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2698] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2699] true
bounds constr: [#S_2700] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2701] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2702] true
bounds constr: [#S_2703] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2704] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) <= 1
bounds constr: [#S_2705] true
constraints generated
sat
************** current phase of 58th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ -2 + x1 + x2 >= 0 \/ -1 + -x1 + x2 >= 0 /\ 1 + x1 + -x2 >= 0 \/ -1 + x2 = 0 /\ 1 + x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -2 + x1 + x2 >= 0
X3(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ -1 + x1 + x2 != 0 /\ -1 + -x1 + x2 != 0 /\ x1 + x2 >= 0 /\ x1 + x2 >= 0 \/ -1 + -x1 + x2 = 0 /\ -1 + -2 * x1 + x2 >= 0 /\ 2 + -2 * x1 + -x2 >= 0 \/ 1 + x2 = 0 /\ -1 + -x1 + x2 = 0 /\ -1 + -x1 + -x2 >= 0 /\ -1 + -x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  false
X91(x1: int, x2: int) :=
  2 + x1 + x2 >= 0 /\ -2 + -x1 + -x2 >= 0 \/ -2 + -x1 + -x2 >= 0 /\ 2 + x1 + x2 >= 0
X92(x1: int, x2: int) :=
  -2 + -x1 + x2 >= 0 /\ -2 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ -1 + -x1 >= 0 \/ x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ -1 + 2 * x1 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + 2 * x2 >= 0 /\ 1 + -2 * x2 >= 0 \/ x1 + -x2 = 0 /\ 1 + 2 * x1 >= 0 /\ 1 + -2 * x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -2 * x1 >= 0 /\ -1 + 2 * x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ 2 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(-2, -1) /\ X93(1, 1) => X1(-2, 1));
(X2(2, 2) /\ X91(1, -3) => X1(2, -3));
(X2(3, -1) /\ X2(3, 3) => X1(3, -2) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2));
(X2(3, -1) /\ X95(1, 1) => X1(3, 1));
(X2(3, -1) => X1(3, -2) \/ X3(-2, 3) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2));
(X2(4, -2) /\ X92(-4, -2) => X1(4, -2));
(X3(-3, 3) => X2(-3, 3));
(X91(1, -3) => X3(1, 2));
(X92(-4, -2) => X3(-4, -2))

************** current phase of 58th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (58): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 0) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );..]
*** undecided (431): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, -1) /\ X91(0, 0) => );
(X2(-3, -1) /\ X95(0, 0) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 58th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 2 (-3))
  added as a negative example with: 
  add negative example(X1(2, -3) => )
refuting (X1 4 (-2))
  added as a negative example with: 
  add negative example(X1(4, -2) => )
refuting (X2 (-3) (-1))
refuting (X2 (-3) 3)
refuting (X2 (-2) (-1))
refuting (X2 2 2)
refuting (X2 3 (-1))
refuting (X2 3 3)
refuting (X2 4 (-2))
refuting (X3 (-4) (-2))
refuting (X3 (-3) 3)
refuting (X3 (-2) 3)
refuting (X3 1 2)
refuting (X90 (-2) (-2))
refuting (X91 (-2) (-2))
refuting (X91 0 0)
refuting (X91 1 (-3))
refuting (X92 (-4) (-2))
refuting (X92 (-2) (-2))
refuting (X93 (-2) (-2))
refuting (X93 1 1)
refuting (X94 (-2) (-2))
refuting (X95 (-2) (-2))
refuting (X95 0 0)
refuting (X95 1 1)
refuting (X96 (-2) (-2))
proving (X1 (-3) 0)
proving (X1 2 (-3))
proving (X1 4 (-2))
proving (X2 (-3) (-1))
proving (X2 (-3) 3)
proving (X2 (-2) (-1))
proving (X2 2 2)
proving (X2 3 (-1))
proving (X2 3 3)
proving (X2 4 (-2))
proving (X3 (-4) (-2))
proving (X3 (-3) 3)
proving (X3 (-2) 3)
proving (X3 1 2)
proving (X90 (-2) (-2))
proving (X91 (-2) (-2))
proving (X91 0 0)
proving (X91 1 (-3))
proving (X92 (-4) (-2))
proving (X92 (-2) (-2))
proving (X93 (-2) (-2))
proving (X93 1 1)
proving (X94 (-2) (-2))
proving (X95 (-2) (-2))
proving (X95 0 0)
proving (X95 1 1)
proving (X96 (-2) (-2))
*** Example Instances obtained by Resolution:
(X1(2, -3) => );
(X1(4, -2) => )

************** current phase of 58th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (60): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 0) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );..]
*** undecided (431): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, -1) /\ X91(0, 0) => );
(X2(-3, -1) /\ X95(0, 0) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 59th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
28 (0): X94(-4, -4)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
28 (0): X96(-2, 0)
29 (0): X96(3, 1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (63):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
58 (0): X1(-4, 3)
59 (0): X1(-5, 2)
60 (0): X1(-3, 0)
61 (0): X1(2, -3)
62 (0): X1(4, -2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (34):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
30 (0): X92(-4, 2)
31 (0): X92(-3, 1)
32 (0): X92(5, 1)
33 (0): X92(-4, -2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
29 (0): X93(2, 3)
30 (0): X93(-3, -2)
31 (0): X93(-2, 6)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (33):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
30 (0): X91(2, -3)
31 (0): X91(2, -1)
32 (0): X91(1, -3)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (86):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
80 (0): X3(-4, 1)
81 (0): X3(-6, -6)
82 (0): X3(4, -6)
83 (0): X3(5, 1)
84 (0): X3(-2, -6)
85 (0): X3(-4, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFTFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (31):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
29 (0): X95(-2, 2)
30 (0): X95(0, 2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (75):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
71 (0): X2(-5, 3)
72 (0): X2(-4, 4)
73 (0): X2(4, -6)
74 (0): X2(4, -2)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X1(2, -3) => )
constr: [#S_2706] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 2 + #paramvar225 * -3 < 0
gen constr of example:(X1(4, -2) => )
constr: [#S_2707] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 4 + #paramvar225 * -2 < 0
gen constr of example:(X2(-2, -1) /\ X93(1, 1) => )
constr: [#S_2708] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 + #paramvar335 < 0 \/ #paramvar330 + #paramvar331 + #paramvar332 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 + #paramvar328 < 0 \/ #paramvar323 + #paramvar324 + #paramvar325 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * -2 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * -2 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * -2 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * -2 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * -2 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * -2 + -#paramvar229 < 0)
gen constr of example:(X2(2, 2) /\ X91(1, -3) => )
constr: [#S_2709] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 + #paramvar307 * -3 < 0 \/ #paramvar302 + #paramvar303 + #paramvar304 * -3 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 + #paramvar300 * -3 < 0 \/ #paramvar295 + #paramvar296 + #paramvar297 * -3 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 * 2 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 * 2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 * 2 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 * 2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 * 2 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 * 2 < 0)
gen constr of example:(X2(3, -1) /\ X95(1, 1) => )
constr: [#S_2710] (#paramvar364 < 0 \/ #paramvar361 + #paramvar362 + #paramvar363 < 0 \/ #paramvar358 + #paramvar359 + #paramvar360 < 0) /\ (#paramvar357 < 0 \/ #paramvar354 + #paramvar355 + #paramvar356 < 0 \/ #paramvar351 + #paramvar352 + #paramvar353 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 3 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 3 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 3 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 3 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 3 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 3 + -#paramvar229 < 0)
gen constr of example:(X2(4, -2) /\ X92(-4, -2) => )
constr: [#S_2711] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -4 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -4 + #paramvar318 * -2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -4 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -4 + #paramvar311 * -2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 4 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 4 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 4 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 4 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 4 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 4 + #paramvar229 * -2 < 0)
gen constr of example:(X3(-3, 3) => X2(-3, 3))
constr: [#S_2712] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 > 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 * -3 + #paramvar281 * 3 < 0 \/ #paramvar276 + #paramvar277 * -3 + #paramvar278 * 3 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 > 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 * -3 + #paramvar270 * 3 < 0 \/ #paramvar265 + #paramvar266 * -3 + #paramvar267 * 3 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 > 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 * -3 + #paramvar259 * 3 < 0 \/ #paramvar254 + #paramvar255 * -3 + #paramvar256 * 3 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 >= 0 /\ #paramvar248 + #paramvar249 * -3 + #paramvar250 * 3 >= 0 /\ #paramvar245 + #paramvar246 * -3 + #paramvar247 * 3 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 >= 0 /\ #paramvar239 + #paramvar240 * -3 + #paramvar241 * 3 >= 0 /\ #paramvar236 + #paramvar237 * -3 + #paramvar238 * 3 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 >= 0 /\ #paramvar230 + #paramvar231 * -3 + #paramvar232 * 3 >= 0 /\ #paramvar227 + #paramvar228 * -3 + #paramvar229 * 3 >= 0
gen constr of example:(X92(-4, -2) => X3(-4, -2))
constr: [#S_2713] (#paramvar322 > 0 \/ #paramvar319 + #paramvar320 * -4 + #paramvar321 * -2 < 0 \/ #paramvar316 + #paramvar317 * -4 + #paramvar318 * -2 < 0) /\ (#paramvar315 > 0 \/ #paramvar312 + #paramvar313 * -4 + #paramvar314 * -2 < 0 \/ #paramvar309 + #paramvar310 * -4 + #paramvar311 * -2 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -4 + #paramvar281 * -2 >= 0 /\ #paramvar276 + #paramvar277 * -4 + #paramvar278 * -2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -4 + #paramvar270 * -2 >= 0 /\ #paramvar265 + #paramvar266 * -4 + #paramvar267 * -2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -4 + #paramvar259 * -2 >= 0 /\ #paramvar254 + #paramvar255 * -4 + #paramvar256 * -2 >= 0
gen constr of example:(X91(1, -3) => X3(1, 2))
constr: [#S_2714] (#paramvar308 > 0 \/ #paramvar305 + #paramvar306 + #paramvar307 * -3 < 0 \/ #paramvar302 + #paramvar303 + #paramvar304 * -3 < 0) /\ (#paramvar301 > 0 \/ #paramvar298 + #paramvar299 + #paramvar300 * -3 < 0 \/ #paramvar295 + #paramvar296 + #paramvar297 * -3 < 0) \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 <= 0 /\ #paramvar286 >= 0 /\ #paramvar279 + #paramvar280 + #paramvar281 * 2 >= 0 /\ #paramvar276 + #paramvar277 + #paramvar278 * 2 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 <= 0 /\ #paramvar275 >= 0 /\ #paramvar268 + #paramvar269 + #paramvar270 * 2 >= 0 /\ #paramvar265 + #paramvar266 + #paramvar267 * 2 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 <= 0 /\ #paramvar264 >= 0 /\ #paramvar257 + #paramvar258 + #paramvar259 * 2 >= 0 /\ #paramvar254 + #paramvar255 + #paramvar256 * 2 >= 0
gen constr of example:(X2(3, -1) => X3(-2, 3) \/ X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_2715] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 3 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 3 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 3 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 3 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 3 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 3 + -#paramvar229 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -2 + #paramvar307 * -2 >= 0 /\ #paramvar302 + #paramvar303 * -2 + #paramvar304 * -2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -2 + #paramvar300 * -2 >= 0 /\ #paramvar295 + #paramvar296 * -2 + #paramvar297 * -2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 >= 0 /\ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 >= 0 /\ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 >= 0 /\ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 >= 0 /\ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 >= 0 /\ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 >= 0 /\ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -2 + #paramvar363 * -2 >= 0 /\ #paramvar358 + #paramvar359 * -2 + #paramvar360 * -2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -2 + #paramvar356 * -2 >= 0 /\ #paramvar351 + #paramvar352 * -2 + #paramvar353 * -2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -2 + #paramvar377 * -2 >= 0 /\ #paramvar372 + #paramvar373 * -2 + #paramvar374 * -2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -2 + #paramvar370 * -2 >= 0 /\ #paramvar365 + #paramvar366 * -2 + #paramvar367 * -2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -2 + #paramvar293 * -2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -2 + #paramvar289 * -2 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -2 + #paramvar281 * 3 >= 0 /\ #paramvar276 + #paramvar277 * -2 + #paramvar278 * 3 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -2 + #paramvar270 * 3 >= 0 /\ #paramvar265 + #paramvar266 * -2 + #paramvar267 * 3 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -2 + #paramvar259 * 3 >= 0 /\ #paramvar254 + #paramvar255 * -2 + #paramvar256 * 3 >= 0
gen constr of example:(X2(3, -1) /\ X2(3, 3) => X90(-2, -2) \/ X91(-2, -2) \/ X92(-2, -2) \/ X93(-2, -2) \/ X94(-2, -2) \/ X95(-2, -2) \/ X96(-2, -2))
constr: [#S_2716] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 > 0 \/ #paramvar248 + #paramvar249 * 3 + -#paramvar250 < 0 \/ #paramvar245 + #paramvar246 * 3 + -#paramvar247 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 > 0 \/ #paramvar239 + #paramvar240 * 3 + -#paramvar241 < 0 \/ #paramvar236 + #paramvar237 * 3 + -#paramvar238 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 > 0 \/ #paramvar230 + #paramvar231 * 3 + -#paramvar232 < 0 \/ #paramvar227 + #paramvar228 * 3 + -#paramvar229 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 3 + #paramvar250 * 3 < 0 \/ #paramvar245 + #paramvar246 * 3 + #paramvar247 * 3 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 3 + #paramvar241 * 3 < 0 \/ #paramvar236 + #paramvar237 * 3 + #paramvar238 * 3 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 3 + #paramvar232 * 3 < 0 \/ #paramvar227 + #paramvar228 * 3 + #paramvar229 * 3 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -2 + #paramvar307 * -2 >= 0 /\ #paramvar302 + #paramvar303 * -2 + #paramvar304 * -2 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -2 + #paramvar300 * -2 >= 0 /\ #paramvar295 + #paramvar296 * -2 + #paramvar297 * -2 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -2 + #paramvar321 * -2 >= 0 /\ #paramvar316 + #paramvar317 * -2 + #paramvar318 * -2 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -2 + #paramvar314 * -2 >= 0 /\ #paramvar309 + #paramvar310 * -2 + #paramvar311 * -2 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -2 + #paramvar335 * -2 >= 0 /\ #paramvar330 + #paramvar331 * -2 + #paramvar332 * -2 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -2 + #paramvar328 * -2 >= 0 /\ #paramvar323 + #paramvar324 * -2 + #paramvar325 * -2 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -2 + #paramvar349 * -2 >= 0 /\ #paramvar344 + #paramvar345 * -2 + #paramvar346 * -2 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -2 + #paramvar342 * -2 >= 0 /\ #paramvar337 + #paramvar338 * -2 + #paramvar339 * -2 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -2 + #paramvar363 * -2 >= 0 /\ #paramvar358 + #paramvar359 * -2 + #paramvar360 * -2 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -2 + #paramvar356 * -2 >= 0 /\ #paramvar351 + #paramvar352 * -2 + #paramvar353 * -2 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -2 + #paramvar377 * -2 >= 0 /\ #paramvar372 + #paramvar373 * -2 + #paramvar374 * -2 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -2 + #paramvar370 * -2 >= 0 /\ #paramvar365 + #paramvar366 * -2 + #paramvar367 * -2 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -2 + #paramvar293 * -2 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -2 + #paramvar289 * -2 >= 0
bounds constr: [#S_2717] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2718] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2719] true
bounds constr: [#S_2720] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2721] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2722] true
bounds constr: [#S_2723] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2724] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2725] true
bounds constr: [#S_2726] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2727] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2728] true
bounds constr: [#S_2729] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2730] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2731] true
bounds constr: [#S_2732] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2733] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2734] true
bounds constr: [#S_2735] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2736] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2737] true
bounds constr: [#S_2738] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2739] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2740] true
bounds constr: [#S_2741] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2742] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2743] true
bounds constr: [#S_2744] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2745] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2746] true
constraints generated
sat
************** current phase of 59th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  x2 != 0 /\ -1 + x2 != 0 /\ 1 + x2 != 0 /\ -2 + x1 + x2 >= 0 \/ 1 + x2 != 0 /\ -1 + -x1 + x2 >= 0 /\ 1 + x1 + -x2 >= 0 \/ -1 + x2 = 0 /\ 1 + x2 = 0 /\ 1 + -x1 + -x2 >= 0 /\ -2 + -x1 + -x2 >= 0
X3(x1: int, x2: int) :=
  -1 + x1 + x2 != 0 /\ x1 + x2 >= 0 /\ -1 + -x1 + -2 * x2 >= 0 \/ -1 + -x1 + x2 = 0 /\ -1 + -2 * x1 + x2 >= 0 /\ 1 + x1 + -x2 >= 0 \/ 1 + x2 = 0 /\ -1 + -x1 + -2 * x2 >= 0 /\ -2 + 2 * x1 + -x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  -1 + -x1 >= 0 /\ x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + -2 * x1 >= 0 /\ 2 + x1 + x2 >= 0
X92(x1: int, x2: int) :=
  -2 + -x1 + x2 >= 0 /\ -2 + x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + 2 * x1 >= 0 /\ -2 + x2 >= 0 \/ x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ -1 + x1 >= 0
X94(x1: int, x2: int) :=
  x1 + -x2 != 0 /\ -2 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 2 + -x1 + -x2 >= 0 /\ -1 + 2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ -2 + x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ 2 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(1, 4) /\ X2(4, -2) => X1(1, -3) \/ X1(4, -3) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3));
(X2(4, -2) /\ X93(2, 2) => X1(4, 2));
(X2(4, -2) => X1(4, -3) \/ X3(-3, 4) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3));
(X3(-2, -1) /\ X3(1, -1) => X2(1, -1))

************** current phase of 59th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (60): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 0) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );..]
*** undecided (435): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, -1) /\ X91(0, 0) => );
(X2(-3, -1) /\ X95(0, 0) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 59th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 4 (-3))
  added as a negative example with: 
  add negative example(X1(4, -3) => )
refuting (X1 4 2)
  added as a negative example with: 
  add negative example(X1(4, 2) => )
refuting (X2 1 (-1))
refuting (X2 1 4)
refuting (X2 2 2)
refuting (X2 4 (-2))
refuting (X3 (-3) 4)
refuting (X3 (-2) (-1))
refuting (X3 1 (-1))
refuting (X90 (-3) (-3))
refuting (X91 (-3) (-3))
refuting (X91 1 (-3))
refuting (X92 (-4) (-2))
refuting (X92 (-3) (-3))
refuting (X93 (-3) (-3))
refuting (X93 2 2)
refuting (X94 (-3) (-3))
refuting (X95 (-3) (-3))
refuting (X96 (-3) (-3))
proving (X1 2 (-3))
proving (X1 4 (-3))
proving (X1 4 (-2))
proving (X1 4 2)
proving (X2 1 (-1))
proving (X2 1 4)
proving (X2 2 2)
proving (X2 4 (-2))
proving (X3 (-3) 4)
proving (X3 (-2) (-1))
proving (X3 1 (-1))
proving (X90 (-3) (-3))
proving (X91 (-3) (-3))
proving (X91 1 (-3))
proving (X92 (-4) (-2))
proving (X92 (-3) (-3))
proving (X93 (-3) (-3))
proving (X93 2 2)
proving (X94 (-3) (-3))
proving (X95 (-3) (-3))
proving (X96 (-3) (-3))
*** Example Instances obtained by Resolution:
(X1(4, -3) => );
(X1(4, 2) => )

************** current phase of 59th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (62): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 0) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );..]
*** undecided (435): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, -1) /\ X91(0, 0) => );
(X2(-3, -1) /\ X95(0, 0) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 60th iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
28 (0): X94(-4, -4)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
28 (0): X96(-2, 0)
29 (0): X96(3, 1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (65):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
58 (0): X1(-4, 3)
59 (0): X1(-5, 2)
60 (0): X1(-3, 0)
61 (0): X1(2, -3)
62 (0): X1(4, -2)
63 (0): X1(4, -3)
64 (0): X1(4, 2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFF


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (34):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
30 (0): X92(-4, 2)
31 (0): X92(-3, 1)
32 (0): X92(5, 1)
33 (0): X92(-4, -2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
29 (0): X93(2, 3)
30 (0): X93(-3, -2)
31 (0): X93(-2, 6)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (33):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
30 (0): X91(2, -3)
31 (0): X91(2, -1)
32 (0): X91(1, -3)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (86):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
80 (0): X3(-4, 1)
81 (0): X3(-6, -6)
82 (0): X3(4, -6)
83 (0): X3(5, 1)
84 (0): X3(-2, -6)
85 (0): X3(-4, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFTFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (31):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
29 (0): X95(-2, 2)
30 (0): X95(0, 2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (76):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
71 (0): X2(-5, 3)
72 (0): X2(-4, 4)
73 (0): X2(4, -6)
74 (0): X2(4, -2)
75 (0): X2(1, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X1(4, -3) => )
constr: [#S_2747] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 4 + #paramvar225 * -3 < 0
gen constr of example:(X1(4, 2) => )
constr: [#S_2748] #paramvar226 > 0 \/ #paramvar223 + #paramvar224 * 4 + #paramvar225 * 2 < 0
gen constr of example:(X2(4, -2) /\ X93(2, 2) => )
constr: [#S_2749] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 < 0 \/ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 < 0 \/ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 4 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 4 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 4 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 4 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 4 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 4 + #paramvar229 * -2 < 0)
gen constr of example:(X3(-2, -1) /\ X3(1, -1) => X2(1, -1))
constr: [#S_2750] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + -#paramvar281 < 0 \/ #paramvar276 + #paramvar277 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + -#paramvar270 < 0 \/ #paramvar265 + #paramvar266 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + -#paramvar259 < 0 \/ #paramvar254 + #paramvar255 + -#paramvar256 < 0) \/ (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 < 0 \/ #paramvar279 + #paramvar280 * -2 + -#paramvar281 < 0 \/ #paramvar276 + #paramvar277 * -2 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 < 0 \/ #paramvar268 + #paramvar269 * -2 + -#paramvar270 < 0 \/ #paramvar265 + #paramvar266 * -2 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 < 0 \/ #paramvar257 + #paramvar258 * -2 + -#paramvar259 < 0 \/ #paramvar254 + #paramvar255 * -2 + -#paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 <= 0 /\ #paramvar248 + #paramvar249 + -#paramvar250 >= 0 /\ #paramvar245 + #paramvar246 + -#paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 <= 0 /\ #paramvar239 + #paramvar240 + -#paramvar241 >= 0 /\ #paramvar236 + #paramvar237 + -#paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 <= 0 /\ #paramvar230 + #paramvar231 + -#paramvar232 >= 0 /\ #paramvar227 + #paramvar228 + -#paramvar229 >= 0
gen constr of example:(X2(4, -2) => X3(-3, 4) \/ X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3))
constr: [#S_2751] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 4 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 4 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 4 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 4 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 4 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 4 + #paramvar229 * -2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 >= 0 /\ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 >= 0 /\ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -3 >= 0 /\ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -3 >= 0 /\ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -3 >= 0 /\ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -3 >= 0 /\ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -3 + #paramvar349 * -3 >= 0 /\ #paramvar344 + #paramvar345 * -3 + #paramvar346 * -3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -3 + #paramvar342 * -3 >= 0 /\ #paramvar337 + #paramvar338 * -3 + #paramvar339 * -3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 >= 0 /\ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 >= 0 /\ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -3 + #paramvar377 * -3 >= 0 /\ #paramvar372 + #paramvar373 * -3 + #paramvar374 * -3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -3 + #paramvar370 * -3 >= 0 /\ #paramvar365 + #paramvar366 * -3 + #paramvar367 * -3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -3 + #paramvar293 * -3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -3 + #paramvar289 * -3 >= 0 \/ #paramvar282 <= 0 /\ #paramvar283 <= 0 /\ #paramvar284 <= 0 /\ #paramvar285 >= 0 /\ #paramvar286 <= 0 /\ #paramvar279 + #paramvar280 * -3 + #paramvar281 * 4 >= 0 /\ #paramvar276 + #paramvar277 * -3 + #paramvar278 * 4 >= 0 \/ #paramvar271 <= 0 /\ #paramvar272 <= 0 /\ #paramvar273 <= 0 /\ #paramvar274 >= 0 /\ #paramvar275 <= 0 /\ #paramvar268 + #paramvar269 * -3 + #paramvar270 * 4 >= 0 /\ #paramvar265 + #paramvar266 * -3 + #paramvar267 * 4 >= 0 \/ #paramvar260 <= 0 /\ #paramvar261 <= 0 /\ #paramvar262 <= 0 /\ #paramvar263 >= 0 /\ #paramvar264 <= 0 /\ #paramvar257 + #paramvar258 * -3 + #paramvar259 * 4 >= 0 /\ #paramvar254 + #paramvar255 * -3 + #paramvar256 * 4 >= 0
gen constr of example:(X2(1, 4) /\ X2(4, -2) => X90(-3, -3) \/ X91(-3, -3) \/ X92(-3, -3) \/ X93(-3, -3) \/ X94(-3, -3) \/ X95(-3, -3) \/ X96(-3, -3))
constr: [#S_2752] (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 + #paramvar250 * 4 < 0 \/ #paramvar245 + #paramvar246 + #paramvar247 * 4 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 + #paramvar241 * 4 < 0 \/ #paramvar236 + #paramvar237 + #paramvar238 * 4 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 + #paramvar232 * 4 < 0 \/ #paramvar227 + #paramvar228 + #paramvar229 * 4 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 4 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 4 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 4 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 4 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 4 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 4 + #paramvar229 * -2 < 0) \/ #paramvar308 >= 0 /\ #paramvar305 + #paramvar306 * -3 + #paramvar307 * -3 >= 0 /\ #paramvar302 + #paramvar303 * -3 + #paramvar304 * -3 >= 0 \/ #paramvar301 >= 0 /\ #paramvar298 + #paramvar299 * -3 + #paramvar300 * -3 >= 0 /\ #paramvar295 + #paramvar296 * -3 + #paramvar297 * -3 >= 0 \/ #paramvar322 >= 0 /\ #paramvar319 + #paramvar320 * -3 + #paramvar321 * -3 >= 0 /\ #paramvar316 + #paramvar317 * -3 + #paramvar318 * -3 >= 0 \/ #paramvar315 >= 0 /\ #paramvar312 + #paramvar313 * -3 + #paramvar314 * -3 >= 0 /\ #paramvar309 + #paramvar310 * -3 + #paramvar311 * -3 >= 0 \/ #paramvar336 >= 0 /\ #paramvar333 + #paramvar334 * -3 + #paramvar335 * -3 >= 0 /\ #paramvar330 + #paramvar331 * -3 + #paramvar332 * -3 >= 0 \/ #paramvar329 >= 0 /\ #paramvar326 + #paramvar327 * -3 + #paramvar328 * -3 >= 0 /\ #paramvar323 + #paramvar324 * -3 + #paramvar325 * -3 >= 0 \/ #paramvar350 >= 0 /\ #paramvar347 + #paramvar348 * -3 + #paramvar349 * -3 >= 0 /\ #paramvar344 + #paramvar345 * -3 + #paramvar346 * -3 >= 0 \/ #paramvar343 >= 0 /\ #paramvar340 + #paramvar341 * -3 + #paramvar342 * -3 >= 0 /\ #paramvar337 + #paramvar338 * -3 + #paramvar339 * -3 >= 0 \/ #paramvar364 >= 0 /\ #paramvar361 + #paramvar362 * -3 + #paramvar363 * -3 >= 0 /\ #paramvar358 + #paramvar359 * -3 + #paramvar360 * -3 >= 0 \/ #paramvar357 >= 0 /\ #paramvar354 + #paramvar355 * -3 + #paramvar356 * -3 >= 0 /\ #paramvar351 + #paramvar352 * -3 + #paramvar353 * -3 >= 0 \/ #paramvar378 >= 0 /\ #paramvar375 + #paramvar376 * -3 + #paramvar377 * -3 >= 0 /\ #paramvar372 + #paramvar373 * -3 + #paramvar374 * -3 >= 0 \/ #paramvar371 >= 0 /\ #paramvar368 + #paramvar369 * -3 + #paramvar370 * -3 >= 0 /\ #paramvar365 + #paramvar366 * -3 + #paramvar367 * -3 >= 0 \/ #paramvar294 >= 0 /\ #paramvar291 + #paramvar292 * -3 + #paramvar293 * -3 >= 0 \/ #paramvar290 >= 0 /\ #paramvar287 + #paramvar288 * -3 + #paramvar289 * -3 >= 0
bounds constr: [#S_2753] (if (#paramvar375 >= 0) then #paramvar375 else -#paramvar375) <= 2 /\ (if (#paramvar372 >= 0) then #paramvar372 else -#paramvar372) <= 2 /\ (if (#paramvar368 >= 0) then #paramvar368 else -#paramvar368) <= 2 /\ (if (#paramvar365 >= 0) then #paramvar365 else -#paramvar365) <= 2
bounds constr: [#S_2754] (if (#paramvar376 >= 0) then #paramvar376 else -#paramvar376) + (if (#paramvar377 >= 0) then #paramvar377 else -#paramvar377) <= 2 /\ (if (#paramvar373 >= 0) then #paramvar373 else -#paramvar373) + (if (#paramvar374 >= 0) then #paramvar374 else -#paramvar374) <= 2 /\ (if (#paramvar369 >= 0) then #paramvar369 else -#paramvar369) + (if (#paramvar370 >= 0) then #paramvar370 else -#paramvar370) <= 2 /\ (if (#paramvar366 >= 0) then #paramvar366 else -#paramvar366) + (if (#paramvar367 >= 0) then #paramvar367 else -#paramvar367) <= 2
bounds constr: [#S_2755] true
bounds constr: [#S_2756] (if (#paramvar361 >= 0) then #paramvar361 else -#paramvar361) <= 2 /\ (if (#paramvar358 >= 0) then #paramvar358 else -#paramvar358) <= 2 /\ (if (#paramvar354 >= 0) then #paramvar354 else -#paramvar354) <= 2 /\ (if (#paramvar351 >= 0) then #paramvar351 else -#paramvar351) <= 2
bounds constr: [#S_2757] (if (#paramvar362 >= 0) then #paramvar362 else -#paramvar362) + (if (#paramvar363 >= 0) then #paramvar363 else -#paramvar363) <= 2 /\ (if (#paramvar359 >= 0) then #paramvar359 else -#paramvar359) + (if (#paramvar360 >= 0) then #paramvar360 else -#paramvar360) <= 2 /\ (if (#paramvar355 >= 0) then #paramvar355 else -#paramvar355) + (if (#paramvar356 >= 0) then #paramvar356 else -#paramvar356) <= 2 /\ (if (#paramvar352 >= 0) then #paramvar352 else -#paramvar352) + (if (#paramvar353 >= 0) then #paramvar353 else -#paramvar353) <= 2
bounds constr: [#S_2758] true
bounds constr: [#S_2759] (if (#paramvar347 >= 0) then #paramvar347 else -#paramvar347) <= 2 /\ (if (#paramvar344 >= 0) then #paramvar344 else -#paramvar344) <= 2 /\ (if (#paramvar340 >= 0) then #paramvar340 else -#paramvar340) <= 2 /\ (if (#paramvar337 >= 0) then #paramvar337 else -#paramvar337) <= 2
bounds constr: [#S_2760] (if (#paramvar348 >= 0) then #paramvar348 else -#paramvar348) + (if (#paramvar349 >= 0) then #paramvar349 else -#paramvar349) <= 2 /\ (if (#paramvar345 >= 0) then #paramvar345 else -#paramvar345) + (if (#paramvar346 >= 0) then #paramvar346 else -#paramvar346) <= 2 /\ (if (#paramvar341 >= 0) then #paramvar341 else -#paramvar341) + (if (#paramvar342 >= 0) then #paramvar342 else -#paramvar342) <= 2 /\ (if (#paramvar338 >= 0) then #paramvar338 else -#paramvar338) + (if (#paramvar339 >= 0) then #paramvar339 else -#paramvar339) <= 2
bounds constr: [#S_2761] true
bounds constr: [#S_2762] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2763] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2764] true
bounds constr: [#S_2765] (if (#paramvar319 >= 0) then #paramvar319 else -#paramvar319) <= 2 /\ (if (#paramvar316 >= 0) then #paramvar316 else -#paramvar316) <= 2 /\ (if (#paramvar312 >= 0) then #paramvar312 else -#paramvar312) <= 2 /\ (if (#paramvar309 >= 0) then #paramvar309 else -#paramvar309) <= 2
bounds constr: [#S_2766] (if (#paramvar320 >= 0) then #paramvar320 else -#paramvar320) + (if (#paramvar321 >= 0) then #paramvar321 else -#paramvar321) <= 2 /\ (if (#paramvar317 >= 0) then #paramvar317 else -#paramvar317) + (if (#paramvar318 >= 0) then #paramvar318 else -#paramvar318) <= 2 /\ (if (#paramvar313 >= 0) then #paramvar313 else -#paramvar313) + (if (#paramvar314 >= 0) then #paramvar314 else -#paramvar314) <= 2 /\ (if (#paramvar310 >= 0) then #paramvar310 else -#paramvar310) + (if (#paramvar311 >= 0) then #paramvar311 else -#paramvar311) <= 2
bounds constr: [#S_2767] true
bounds constr: [#S_2768] (if (#paramvar305 >= 0) then #paramvar305 else -#paramvar305) <= 2 /\ (if (#paramvar302 >= 0) then #paramvar302 else -#paramvar302) <= 2 /\ (if (#paramvar298 >= 0) then #paramvar298 else -#paramvar298) <= 2 /\ (if (#paramvar295 >= 0) then #paramvar295 else -#paramvar295) <= 2
bounds constr: [#S_2769] (if (#paramvar306 >= 0) then #paramvar306 else -#paramvar306) + (if (#paramvar307 >= 0) then #paramvar307 else -#paramvar307) <= 2 /\ (if (#paramvar303 >= 0) then #paramvar303 else -#paramvar303) + (if (#paramvar304 >= 0) then #paramvar304 else -#paramvar304) <= 2 /\ (if (#paramvar299 >= 0) then #paramvar299 else -#paramvar299) + (if (#paramvar300 >= 0) then #paramvar300 else -#paramvar300) <= 2 /\ (if (#paramvar296 >= 0) then #paramvar296 else -#paramvar296) + (if (#paramvar297 >= 0) then #paramvar297 else -#paramvar297) <= 2
bounds constr: [#S_2770] true
bounds constr: [#S_2771] (if (#paramvar291 >= 0) then #paramvar291 else -#paramvar291) <= 1 /\ (if (#paramvar287 >= 0) then #paramvar287 else -#paramvar287) <= 1
bounds constr: [#S_2772] (if (#paramvar292 >= 0) then #paramvar292 else -#paramvar292) + (if (#paramvar293 >= 0) then #paramvar293 else -#paramvar293) <= 2 /\ (if (#paramvar288 >= 0) then #paramvar288 else -#paramvar288) + (if (#paramvar289 >= 0) then #paramvar289 else -#paramvar289) <= 2
bounds constr: [#S_2773] true
bounds constr: [#S_2774] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2775] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2776] true
bounds constr: [#S_2777] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2778] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2779] true
bounds constr: [#S_2780] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2781] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2782] true
constraints generated
sat
************** current phase of 60th iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0 /\ -x1 >= 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ 1 + x2 = 0 /\ -2 + x1 + x2 >= 0 /\ 2 + 2 * x1 >= 0 \/ x2 = 0 /\ 1 + x2 = 0 /\ -1 + -x1 >= 0 /\ 1 + x1 + -x2 >= 0 \/ 1 + x2 != 0 /\ -x1 + -x2 >= 0 /\ x1 + x2 >= 0
X3(x1: int, x2: int) :=
  x2 = 0 /\ x1 + x2 >= 0 /\ -x1 + -2 * x2 >= 0 \/ x2 = 0 /\ 1 + x2 = 0 /\ -1 + x1 + x2 = 0 /\ -1 + -2 * x1 + x2 >= 0 /\ x1 + -x2 >= 0 \/ -x1 + -x2 >= 0 /\ x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 >= 0 /\ 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + -2 * x1 >= 0 /\ x1 >= 0
X92(x1: int, x2: int) :=
  -2 + -x1 + x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ x2 >= 0 /\ 1 + -2 * x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -2 * x1 >= 0 /\ -1 + -x1 >= 0 \/ x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ -1 + x2 >= 0
X94(x1: int, x2: int) :=
  -2 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -1 + 2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ -2 + x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 * x1 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ 2 + x1 + x2 >= 0

******************************************
*** All the candidates are not genuine ***
******************************************

*** Counterexamples to the Candidate Solutions:
(X2(2, -2) /\ X93(2, 2) => X1(2, 2));
(X3(1, -1) => X2(1, -1))

************** current phase of 60th iteration **************

Synthesis >> Validation >> [Labeling] >> Resolution >> Labeling

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (62): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 0) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );..]
*** undecided (437): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, -1) /\ X91(0, 0) => );
(X2(-3, -1) /\ X95(0, 0) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 60th iteration **************

Synthesis >> Validation >> Labeling >> [Resolution] >> Labeling

*************************************************************
refuting (X1 2 2)
refuting (X2 1 (-1))
refuting (X2 1 4)
refuting (X2 2 (-2))
refuting (X2 4 (-2))
refuting (X3 (-3) 4)
refuting (X3 1 (-1))
refuting (X90 (-3) (-3))
refuting (X91 (-3) (-3))
refuting (X92 (-3) (-3))
refuting (X93 (-3) (-3))
refuting (X93 2 2)
refuting (X94 (-3) (-3))
refuting (X95 (-3) (-3))
refuting (X96 (-3) (-3))
proving (X1 2 2)
proving (X1 4 (-3))
proving (X1 4 2)
proving (X2 1 (-1))
proving (X2 1 4)
proving (X2 2 (-2))
proving (X2 4 (-2))
proving (X3 (-3) 4)
proving (X3 1 (-1))
proving (X90 (-3) (-3))
proving (X91 (-3) (-3))
proving (X92 (-3) (-3))
proving (X93 (-3) (-3))
proving (X93 2 2)
proving (X94 (-3) (-3))
proving (X95 (-3) (-3))
proving (X96 (-3) (-3))
*** Example Instances obtained by Resolution:


************** current phase of 60th iteration **************

Synthesis >> Validation >> Labeling >> Resolution >> [Labeling]

*************************************************************
**** labeler
>>> unit propagation
<<< unit propagation
********* given example instances *********
*** decided positive (0): [
]
*** decided negative (62): [
(X1(-7, -5) => );
(X1(-5, -3) => );
(X1(-5, 1) => );
(X1(-5, 2) => );
(X1(-5, 3) => );
(X1(-4, -3) => );
(X1(-4, -2) => );
(X1(-4, 2) => );
(X1(-4, 3) => );
(X1(-4, 4) => );
(X1(-3, -4) => );
(X1(-3, -2) => );
(X1(-3, -1) => );
(X1(-3, 0) => );
(X1(-3, 1) => );
(X1(-3, 2) => );
(X1(-2, -3) => );
(X1(-2, -1) => );
(X1(-2, 0) => );
(X1(-2, 1) => );..]
*** undecided (437): [
(X2(-4, -3) /\ X93(2, 3) => );
(X2(-4, -2) /\ X92(-3, -2) => );
(X2(-4, 2) /\ X91(-3, -3) => );
(X2(-4, 2) /\ X91(0, -3) => );
(X2(-3, -2) /\ X92(-2, -2) => );
(X2(-3, -1) /\ X91(0, 0) => );
(X2(-3, -1) /\ X95(0, 0) => );
(X2(-3, 1) /\ X93(-1, -1) => );
(X2(-3, 1) /\ X94(-2, -2) => );
(X2(-3, 1) /\ X94(0, -2) => );
(X2(-3, 1) /\ X94(1, 1) => );
(X2(-3, 1) /\ X94(3, -2) => );
(X2(-3, 2) /\ X92(2, 2) => );
(X2(-3, 2) /\ X93(-3, -2) => );
(X2(-3, 2) /\ X93(-2, -2) => );
(X2(-3, 2) /\ X93(0, -2) => );
(X2(-3, 4) /\ X93(-2, -4) => );
(X2(-2, -3) /\ X91(2, 2) => );
(X2(-2, -2) /\ X90(-1, -1) => );
(X2(-2, -2) /\ X91(1, 1) => );..]

*** labeling with SAT solving
************** current phase of 61st iteration **************

[Synthesis] >> Validation >> Labeling >> Resolution >> Labeling

*************************************************************
**************************************
***** Template Based Synthesizer *****
**************************************

===== X94 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (29):
0 (0): X94(0, 1)
1 (0): X94(1, 1)
2 (0): X94(0, -1)
3 (0): X94(1, 0)
4 (0): X94(-1, -2)
5 (0): X94(0, 0)
6 (0): X94($1, 1)
7 (0): X94(-2, -2)
8 (0): X94(1, 2)
9 (0): X94(-1, -1)
10 (0): X94(2, 2)
11 (0): X94(-3, 0)
12 (0): X94(-3, $1)
13 (0): X94(3, 3)
14 (0): X94(4, 4)
15 (0): X94(3, 0)
16 (0): X94(2, 1)
17 (0): X94(0, -2)
18 (0): X94(1, -3)
19 (0): X94(-5, -5)
20 (0): X94(-3, -3)
21 (0): X94(-1, 1)
22 (0): X94(3, -2)
23 (0): X94(1, -2)
24 (0): X94(-5, 4)
25 (0): X94(-1, 0)
26 (0): X94(-1, 2)
27 (0): X94(2, -2)
28 (0): X94(-4, -4)
table:
FTFFFT_TFTTF_TTFFFFTTFFFFFFFT


===== X96 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (30):
0 (0): X96(0, 1)
1 (0): X96(1, 1)
2 (0): X96(1, 0)
3 (0): X96(-1, 0)
4 (0): X96(-1, -1)
5 (0): X96(0, 0)
6 (0): X96($1, 1)
7 (0): X96(-2, -2)
8 (0): X96(-2, -3)
9 (0): X96(0, -2)
10 (0): X96(2, 2)
11 (0): X96(3, 3)
12 (0): X96(4, 4)
13 (0): X96(-3, -1)
14 (0): X96(0, 2)
15 (0): X96(-5, -5)
16 (0): X96(-3, -3)
17 (0): X96(-2, -1)
18 (0): X96(-2, 1)
19 (0): X96(0, -1)
20 (0): X96(-4, 2)
21 (0): X96(-2, 2)
22 (0): X96(-2, -4)
23 (0): X96(2, -1)
24 (0): X96(2, 5)
25 (0): X96(1, -2)
26 (0): X96(2, 1)
27 (0): X96(3, -1)
28 (0): X96(-2, 0)
29 (0): X96(3, 1)
table:
FTFFTT_TFFTTTFFTTFFFFFFFFFFFFF


===== X1 =====
qualifiers (1):
0 (1, 2, 7): -1 * x1 + x2 = 0
atoms (66):
0 (0): X1(0, 1)
1 (0): X1(-1, 0)
2 (0): X1(0, -1)
3 (0): X1(1, 0)
4 (0): X1(-2, -1)
5 (0): X1(-4, -3)
6 (0): X1(-3, -2)
7 (0): X1(-1, -2)
8 (0): X1(-1, 2)
9 (0): X1(-1, 3)
10 (0): X1(0, -2)
11 (0): X1(-1, 1)
12 (0): X1(1, -2)
13 (0): X1(1, -1)
14 (0): X1(2, 1)
15 (0): X1(0, 2)
16 (0): X1(1, 2)
17 (0): X1(-1, -1)
18 (0): X1(1, 1)
19 (0): X1(-5, 1)
20 (0): X1(-3, 1)
21 (0): X1(-2, -3)
22 (0): X1(-2, 2)
23 (0): X1(5, -3)
24 (0): X1(-4, 4)
25 (0): X1(0, 3)
26 (0): X1(0, 4)
27 (0): X1(3, -2)
28 (0): X1(3, 2)
29 (0): X1(-4, -2)
30 (0): X1(-4, 2)
31 (0): X1(-3, 2)
32 (0): X1(-7, -5)
33 (0): X1(-5, -3)
34 (0): X1(1, -3)
35 (0): X1(3, -3)
36 (0): X1(-2, 0)
37 (0): X1(-2, 1)
38 (0): X1(3, 1)
39 (0): X1(2, -1)
40 (0): X1(2, 0)
41 (0): X1(2, 3)
42 (0): X1(1, 4)
43 (0): X1(2, -2)
44 (0): X1(3, 4)
45 (0): X1(5, 2)
46 (0): X1(7, 4)
47 (0): X1(-2, 3)
48 (0): X1(0, -4)
49 (0): X1(3, 0)
50 (0): X1(4, 3)
51 (0): X1(4, 1)
52 (0): X1(-5, 3)
53 (0): X1(-3, -1)
54 (0): X1(-2, -2)
55 (0): X1(-1, -3)
56 (0): X1(0, -3)
57 (0): X1(-3, -4)
58 (0): X1(-4, 3)
59 (0): X1(-5, 2)
60 (0): X1(-3, 0)
61 (0): X1(2, -3)
62 (0): X1(4, -2)
63 (0): X1(4, -3)
64 (0): X1(4, 2)
65 (0): X1(2, 2)
table:
FFFFFFFFFFFFFFFFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFT


===== X92 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (34):
0 (0): X92(0, 1)
1 (0): X92(1, 1)
2 (0): X92(1, 0)
3 (0): X92(-1, 0)
4 (0): X92(-1, -1)
5 (0): X92(-2, 0)
6 (0): X92(2, 0)
7 (0): X92($1, 1)
8 (0): X92(-2, -2)
9 (0): X92(2, 2)
10 (0): X92(0, 0)
11 (0): X92(1, 2)
12 (0): X92(-3, -3)
13 (0): X92(-2, -3)
14 (0): X92(1, -3)
15 (0): X92(3, 3)
16 (0): X92(4, 4)
17 (0): X92(3, 2)
18 (0): X92(4, 2)
19 (0): X92(0, 2)
20 (0): X92(5, 7)
21 (0): X92(-3, -2)
22 (0): X92(-5, -5)
23 (0): X92(-1, -2)
24 (0): X92(1, -2)
25 (0): X92(-1, 2)
26 (0): X92(-3, 2)
27 (0): X92(7, -5)
28 (0): X92(-2, 2)
29 (0): X92(-2, 4)
30 (0): X92(-4, 2)
31 (0): X92(-3, 1)
32 (0): X92(5, 1)
33 (0): X92(-4, -2)
table:
FTFFTFF_TTTFTFFTTFFFFFTFFFFFFFFFFF


===== X93 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (32):
0 (0): X93(0, 1)
1 (0): X93(1, 1)
2 (0): X93(0, 0)
3 (0): X93(-1, 0)
4 (0): X93(0, -1)
5 (0): X93(-1, -1)
6 (0): X93(-2, -1)
7 (0): X93(1, 0)
8 (0): X93(2, 0)
9 (0): X93($1, 1)
10 (0): X93($1, -1)
11 (0): X93($1, 0)
12 (0): X93(-2, -2)
13 (0): X93(0, -2)
14 (0): X93(-2, 0)
15 (0): X93(-1, 1)
16 (0): X93(2, 2)
17 (0): X93(-3, -1)
18 (0): X93(-1, -2)
19 (0): X93(3, 3)
20 (0): X93(4, 4)
21 (0): X93(0, 2)
22 (0): X93(0, 3)
23 (0): X93(-5, -5)
24 (0): X93(-3, -3)
25 (0): X93(1, -3)
26 (0): X93(-2, 1)
27 (0): X93(-1, -3)
28 (0): X93(-2, -4)
29 (0): X93(2, 3)
30 (0): X93(-3, -2)
31 (0): X93(-2, 6)
table:
FTTFFTFFF___TFFFTFFTTFFTTFFFFFFF


===== X90 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (24):
0 (0): X90(0, 1)
1 (0): X90(1, 1)
2 (0): X90(-2, 0)
3 (0): X90(-1, -1)
4 (0): X90(1, 0)
5 (0): X90($1, 1)
6 (0): X90(-2, -2)
7 (0): X90(0, 0)
8 (0): X90(0, 3)
9 (0): X90(0, 2)
10 (0): X90(-2, -3)
11 (0): X90(3, -1)
12 (0): X90(-1, 1)
13 (0): X90(0, -1)
14 (0): X90(2, 2)
15 (0): X90(-3, -2)
16 (0): X90(-3, 0)
17 (0): X90(3, 3)
18 (0): X90(4, 4)
19 (0): X90(-5, -5)
20 (0): X90(-3, -3)
21 (0): X90(3, 2)
22 (0): X90(-4, 3)
23 (0): X90(2, -3)
table:
FTFTF_TTFFFFFFTFFTTTTFFF


===== X91 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (33):
0 (0): X91(0, 1)
1 (0): X91(1, 1)
2 (0): X91(0, -1)
3 (0): X91(-2, 0)
4 (0): X91(0, 0)
5 (0): X91(3, 0)
6 (0): X91($1, 1)
7 (0): X91($1, -1)
8 (0): X91(-2, -2)
9 (0): X91(0, -3)
10 (0): X91(0, -2)
11 (0): X91(-3, 1)
12 (0): X91(-3, -2)
13 (0): X91(4, 1)
14 (0): X91(-1, -1)
15 (0): X91(2, 2)
16 (0): X91(3, 3)
17 (0): X91(4, 4)
18 (0): X91(-5, -5)
19 (0): X91(-3, -3)
20 (0): X91(-2, -1)
21 (0): X91(2, 3)
22 (0): X91(3, 1)
23 (0): X91(-7, 2)
24 (0): X91(0, 2)
25 (0): X91(-4, -4)
26 (0): X91(-4, 6)
27 (0): X91(-1, 3)
28 (0): X91(-2, 3)
29 (0): X91(1, -5)
30 (0): X91(2, -3)
31 (0): X91(2, -1)
32 (0): X91(1, -3)
table:
FTFFTF__TFFFFFTTTTTTFFFFFTFFFFFFF


===== X3 =====
qualifiers (5):
0 (0, 1, 3): x2 = 0
1 (1, 1, 5): -1 + x2 = 0
2 (1, 1, 5): 1 + x2 = 0
3 (1, 2, 7): -1 + x1 + x2 = 0
4 (1, 2, 9): -1 + -1 * x1 + x2 = 0
atoms (86):
0 (0): X3(0, 1)
1 (0): X3(-2, -1)
2 (0): X3(-2, 0)
3 (0): X3(-1, 0)
4 (0): X3(-1, -2)
5 (0): X3(-1, -1)
6 (0): X3(-1, 1)
7 (0): X3(1, 1)
8 (0): X3(-3, -1)
9 (0): X3(-2, 1)
10 (0): X3(0, -1)
11 (0): X3(0, 0)
12 (0): X3(1, -1)
13 (0): X3(1, 2)
14 (0): X3(1, 0)
15 (0): X3(2, 0)
16 (0): X3(3, -1)
17 (0): X3($1, 1)
18 (0): X3($2, 1)
19 (0): X3(-3, -2)
20 (0): X3(1, 3)
21 (0): X3(3, 3)
22 (0): X3(-2, 3)
23 (0): X3(0, 2)
24 (0): X3(4, -2)
25 (0): X3(-2, -4)
26 (0): X3(-3, -3)
27 (0): X3(0, -3)
28 (0): X3(3, -2)
29 (0): X3(1, -3)
30 (0): X3(2, -1)
31 (0): X3(2, 3)
32 (0): X3(1, -2)
33 (0): X3(-3, 1)
34 (0): X3(-2, -3)
35 (0): X3(-1, -3)
36 (0): X3(2, 1)
37 (0): X3(2, -3)
38 (0): X3(-1, 2)
39 (0): X3(6, -3)
40 (0): X3(-2, 2)
41 (0): X3(3, 1)
42 (0): X3(4, 2)
43 (0): X3(0, -2)
44 (0): X3(5, 7)
45 (0): X3(-5, -4)
46 (0): X3(-5, 6)
47 (0): X3(2, -4)
48 (0): X3(-4, -1)
49 (0): X3(-3, 4)
50 (0): X3(-1, 3)
51 (0): X3(2, 2)
52 (0): X3(3, -3)
53 (0): X3(-5, -2)
54 (0): X3(-7, -3)
55 (0): X3(-6, -5)
56 (0): X3(-3, -5)
57 (0): X3(-4, 0)
58 (0): X3(-3, 3)
59 (0): X3(-4, 4)
60 (0): X3(2, 4)
61 (0): X3(2, -2)
62 (0): X3(4, 5)
63 (0): X3(-6, 4)
64 (0): X3(7, 4)
65 (0): X3(7, -5)
66 (0): X3(-4, -7)
67 (0): X3(-3, -6)
68 (0): X3(-3, 2)
69 (0): X3(3, 0)
70 (0): X3(11, -6)
71 (0): X3(4, 0)
72 (0): X3(-4, 2)
73 (0): X3(3, 4)
74 (0): X3(-3, 0)
75 (0): X3(1, 4)
76 (0): X3(3, 6)
77 (0): X3(6, 6)
78 (0): X3(-2, -2)
79 (0): X3(-2, 4)
80 (0): X3(-4, 1)
81 (0): X3(-6, -6)
82 (0): X3(4, -6)
83 (0): X3(5, 1)
84 (0): X3(-2, -6)
85 (0): X3(-4, -2)
table:
FFTTFFFFFFFTFFTTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFFFFFFFFFFTFTFFTFFFFFFFFFFF
TFFFFFTTFTFFFFFFFTTFFFFFFFFFFFFFFTFFTFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFTFFTFF
FTFFFTFFTFTFTFFFTFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TFFFFFFFFFFFFFTFF__FFFTFFFFFTFTFFFFFFFTFFFFFFFTFFTFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
TTFTFFFFFFFFFTFFF__TFFFFFFFFFFFTFFFFFFFFFFFFFTFFFFFFFFFTFFFFFFTFFFFFFFFFFTFFFFFFFFFFFF


===== X95 =====
qualifiers (1):
0 (1, 2, 7): x1 + -1 * x2 = 0
atoms (31):
0 (0): X95(0, 1)
1 (0): X95(1, 1)
2 (0): X95(-2, 0)
3 (0): X95(-1, -1)
4 (0): X95(-3, -4)
5 (0): X95(1, 0)
6 (0): X95($1, 1)
7 (0): X95(-2, -2)
8 (0): X95(0, 0)
9 (0): X95(0, -1)
10 (0): X95(3, 0)
11 (0): X95(-3, 0)
12 (0): X95(2, 1)
13 (0): X95(0, $1)
14 (0): X95(2, 2)
15 (0): X95(-1, 1)
16 (0): X95(-3, -3)
17 (0): X95(1, -1)
18 (0): X95(3, 3)
19 (0): X95(4, 4)
20 (0): X95(-1, -3)
21 (0): X95(1, -2)
22 (0): X95(-5, -5)
23 (0): X95(-4, 0)
24 (0): X95(-4, -5)
25 (0): X95(0, -2)
26 (0): X95(-3, -1)
27 (0): X95(2, -2)
28 (0): X95(2, 3)
29 (0): X95(-2, 2)
30 (0): X95(0, 2)
table:
FTFTFF_TTFFFF_TFTFTTFFTFFFFFFFF


===== X2 =====
qualifiers (3):
0 (0, 1, 3): x2 != 0
1 (1, 1, 5): -1 + x2 != 0
2 (1, 1, 5): 1 + x2 != 0
atoms (76):
0 (0): X2(0, -2)
1 (0): X2(0, -1)
2 (0): X2(0, 0)
3 (0): X2(0, 1)
4 (0): X2(-1, 0)
5 (0): X2(1, 0)
6 (0): X2(-2, 0)
7 (0): X2(1, 1)
8 (0): X2(-2, 1)
9 (0): X2(1, 2)
10 (0): X2($1, 1)
11 (0): X2(-4, 2)
12 (0): X2(-3, 2)
13 (0): X2(-1, 2)
14 (0): X2(-1, 3)
15 (0): X2(-1, -1)
16 (0): X2(1, -1)
17 (0): X2(3, 3)
18 (0): X2(-2, 3)
19 (0): X2(-1, 1)
20 (0): X2(3, -1)
21 (0): X2(0, -3)
22 (0): X2(1, -2)
23 (0): X2(2, -1)
24 (0): X2(1, -3)
25 (0): X2(-2, -2)
26 (0): X2(-1, -2)
27 (0): X2(2, 0)
28 (0): X2(-2, -3)
29 (0): X2(-1, -3)
30 (0): X2(-3, -2)
31 (0): X2(0, 2)
32 (0): X2(-5, 2)
33 (0): X2(-3, 0)
34 (0): X2(-2, -1)
35 (0): X2(5, -3)
36 (0): X2(-4, -3)
37 (0): X2(-3, 1)
38 (0): X2(-2, 2)
39 (0): X2(0, 4)
40 (0): X2(0, 5)
41 (0): X2(6, -3)
42 (0): X2(2, 1)
43 (0): X2(3, 2)
44 (0): X2(-4, -2)
45 (0): X2(-4, 3)
46 (0): X2(-3, -1)
47 (0): X2(-7, 6)
48 (0): X2(-5, 4)
49 (0): X2(3, -2)
50 (0): X2(-5, -2)
51 (0): X2(-6, -5)
52 (0): X2(2, 4)
53 (0): X2(2, -2)
54 (0): X2(3, 1)
55 (0): X2(5, 3)
56 (0): X2(7, 5)
57 (0): X2(0, 3)
58 (0): X2(7, 4)
59 (0): X2(-3, 3)
60 (0): X2(5, 4)
61 (0): X2(2, -3)
62 (0): X2(4, -4)
63 (0): X2(4, 2)
64 (0): X2(11, -6)
65 (0): X2(4, 0)
66 (0): X2(3, -3)
67 (0): X2(2, 2)
68 (0): X2(6, 6)
69 (0): X2(-3, 4)
70 (0): X2(-2, 4)
71 (0): X2(-5, 3)
72 (0): X2(-4, 4)
73 (0): X2(4, -6)
74 (0): X2(4, -2)
75 (0): X2(1, 4)
table:
TTFTFFFTTTTTTTTTTTTTTTTTTTTFTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTFTTTTTTTTTT
TTTFTTTFFTFTTTTTTTTFTTTTTTTTTTTTTTTTTFTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTT
TFTTTTTTTTTTTTTFFTTTFTTFTTTTTTTTTTFTTTTTTTTTTTFTTTTTTTTTTTTTTTTTTTTTTTTTTTTT

gen constr of example:(X2(2, -2) /\ X93(2, 2) => X1(2, 2))
constr: [#S_2783] (#paramvar336 < 0 \/ #paramvar333 + #paramvar334 * 2 + #paramvar335 * 2 < 0 \/ #paramvar330 + #paramvar331 * 2 + #paramvar332 * 2 < 0) /\ (#paramvar329 < 0 \/ #paramvar326 + #paramvar327 * 2 + #paramvar328 * 2 < 0 \/ #paramvar323 + #paramvar324 * 2 + #paramvar325 * 2 < 0) \/ (#paramvar251 < 0 \/ #paramvar252 < 0 \/ #paramvar253 < 0 \/ #paramvar248 + #paramvar249 * 2 + #paramvar250 * -2 < 0 \/ #paramvar245 + #paramvar246 * 2 + #paramvar247 * -2 < 0) /\ (#paramvar242 < 0 \/ #paramvar243 < 0 \/ #paramvar244 < 0 \/ #paramvar239 + #paramvar240 * 2 + #paramvar241 * -2 < 0 \/ #paramvar236 + #paramvar237 * 2 + #paramvar238 * -2 < 0) /\ (#paramvar233 < 0 \/ #paramvar234 < 0 \/ #paramvar235 < 0 \/ #paramvar230 + #paramvar231 * 2 + #paramvar232 * -2 < 0 \/ #paramvar227 + #paramvar228 * 2 + #paramvar229 * -2 < 0) \/ #paramvar226 >= 0 /\ #paramvar223 + #paramvar224 * 2 + #paramvar225 * 2 >= 0
gen constr of example:(X3(1, -1) => X2(1, -1))
constr: [#S_2784] (#paramvar282 > 0 \/ #paramvar283 > 0 \/ #paramvar284 < 0 \/ #paramvar285 > 0 \/ #paramvar286 > 0 \/ #paramvar279 + #paramvar280 + -#paramvar281 < 0 \/ #paramvar276 + #paramvar277 + -#paramvar278 < 0) /\ (#paramvar271 > 0 \/ #paramvar272 > 0 \/ #paramvar273 < 0 \/ #paramvar274 > 0 \/ #paramvar275 > 0 \/ #paramvar268 + #paramvar269 + -#paramvar270 < 0 \/ #paramvar265 + #paramvar266 + -#paramvar267 < 0) /\ (#paramvar260 > 0 \/ #paramvar261 > 0 \/ #paramvar262 < 0 \/ #paramvar263 > 0 \/ #paramvar264 > 0 \/ #paramvar257 + #paramvar258 + -#paramvar259 < 0 \/ #paramvar254 + #paramvar255 + -#paramvar256 < 0) \/ #paramvar251 >= 0 /\ #paramvar252 >= 0 /\ #paramvar253 <= 0 /\ #paramvar248 + #paramvar249 + -#paramvar250 >= 0 /\ #paramvar245 + #paramvar246 + -#paramvar247 >= 0 \/ #paramvar242 >= 0 /\ #paramvar243 >= 0 /\ #paramvar244 <= 0 /\ #paramvar239 + #paramvar240 + -#paramvar241 >= 0 /\ #paramvar236 + #paramvar237 + -#paramvar238 >= 0 \/ #paramvar233 >= 0 /\ #paramvar234 >= 0 /\ #paramvar235 <= 0 /\ #paramvar230 + #paramvar231 + -#paramvar232 >= 0 /\ #paramvar227 + #paramvar228 + -#paramvar229 >= 0
bounds constr: [#S_2785] true
bounds constr: [#S_2786] true
bounds constr: [#S_2787] true
bounds constr: [#S_2788] true
bounds constr: [#S_2789] true
bounds constr: [#S_2790] true
bounds constr: [#S_2791] true
bounds constr: [#S_2792] true
bounds constr: [#S_2793] true
bounds constr: [#S_2794] (if (#paramvar333 >= 0) then #paramvar333 else -#paramvar333) <= 2 /\ (if (#paramvar330 >= 0) then #paramvar330 else -#paramvar330) <= 2 /\ (if (#paramvar326 >= 0) then #paramvar326 else -#paramvar326) <= 2 /\ (if (#paramvar323 >= 0) then #paramvar323 else -#paramvar323) <= 2
bounds constr: [#S_2795] (if (#paramvar334 >= 0) then #paramvar334 else -#paramvar334) + (if (#paramvar335 >= 0) then #paramvar335 else -#paramvar335) <= 2 /\ (if (#paramvar331 >= 0) then #paramvar331 else -#paramvar331) + (if (#paramvar332 >= 0) then #paramvar332 else -#paramvar332) <= 2 /\ (if (#paramvar327 >= 0) then #paramvar327 else -#paramvar327) + (if (#paramvar328 >= 0) then #paramvar328 else -#paramvar328) <= 2 /\ (if (#paramvar324 >= 0) then #paramvar324 else -#paramvar324) + (if (#paramvar325 >= 0) then #paramvar325 else -#paramvar325) <= 2
bounds constr: [#S_2796] true
bounds constr: [#S_2797] true
bounds constr: [#S_2798] true
bounds constr: [#S_2799] true
bounds constr: [#S_2800] true
bounds constr: [#S_2801] true
bounds constr: [#S_2802] true
bounds constr: [#S_2803] true
bounds constr: [#S_2804] true
bounds constr: [#S_2805] true
bounds constr: [#S_2806] (if (#paramvar279 >= 0) then #paramvar279 else -#paramvar279) <= 2 /\ (if (#paramvar276 >= 0) then #paramvar276 else -#paramvar276) <= 2 /\ (if (#paramvar268 >= 0) then #paramvar268 else -#paramvar268) <= 2 /\ (if (#paramvar265 >= 0) then #paramvar265 else -#paramvar265) <= 2 /\ (if (#paramvar257 >= 0) then #paramvar257 else -#paramvar257) <= 2 /\ (if (#paramvar254 >= 0) then #paramvar254 else -#paramvar254) <= 2
bounds constr: [#S_2807] (if (#paramvar280 >= 0) then #paramvar280 else -#paramvar280) + (if (#paramvar281 >= 0) then #paramvar281 else -#paramvar281) <= 3 /\ (if (#paramvar277 >= 0) then #paramvar277 else -#paramvar277) + (if (#paramvar278 >= 0) then #paramvar278 else -#paramvar278) <= 3 /\ (if (#paramvar269 >= 0) then #paramvar269 else -#paramvar269) + (if (#paramvar270 >= 0) then #paramvar270 else -#paramvar270) <= 3 /\ (if (#paramvar266 >= 0) then #paramvar266 else -#paramvar266) + (if (#paramvar267 >= 0) then #paramvar267 else -#paramvar267) <= 3 /\ (if (#paramvar258 >= 0) then #paramvar258 else -#paramvar258) + (if (#paramvar259 >= 0) then #paramvar259 else -#paramvar259) <= 3 /\ (if (#paramvar255 >= 0) then #paramvar255 else -#paramvar255) + (if (#paramvar256 >= 0) then #paramvar256 else -#paramvar256) <= 3
bounds constr: [#S_2808] true
bounds constr: [#S_2809] (if (#paramvar248 >= 0) then #paramvar248 else -#paramvar248) <= 2 /\ (if (#paramvar245 >= 0) then #paramvar245 else -#paramvar245) <= 2 /\ (if (#paramvar239 >= 0) then #paramvar239 else -#paramvar239) <= 2 /\ (if (#paramvar236 >= 0) then #paramvar236 else -#paramvar236) <= 2 /\ (if (#paramvar230 >= 0) then #paramvar230 else -#paramvar230) <= 2 /\ (if (#paramvar227 >= 0) then #paramvar227 else -#paramvar227) <= 2
bounds constr: [#S_2810] (if (#paramvar249 >= 0) then #paramvar249 else -#paramvar249) + (if (#paramvar250 >= 0) then #paramvar250 else -#paramvar250) <= 2 /\ (if (#paramvar246 >= 0) then #paramvar246 else -#paramvar246) + (if (#paramvar247 >= 0) then #paramvar247 else -#paramvar247) <= 2 /\ (if (#paramvar240 >= 0) then #paramvar240 else -#paramvar240) + (if (#paramvar241 >= 0) then #paramvar241 else -#paramvar241) <= 2 /\ (if (#paramvar237 >= 0) then #paramvar237 else -#paramvar237) + (if (#paramvar238 >= 0) then #paramvar238 else -#paramvar238) <= 2 /\ (if (#paramvar231 >= 0) then #paramvar231 else -#paramvar231) + (if (#paramvar232 >= 0) then #paramvar232 else -#paramvar232) <= 2 /\ (if (#paramvar228 >= 0) then #paramvar228 else -#paramvar228) + (if (#paramvar229 >= 0) then #paramvar229 else -#paramvar229) <= 2
bounds constr: [#S_2811] true
bounds constr: [#S_2812] (if (#paramvar223 >= 0) then #paramvar223 else -#paramvar223) <= 0
bounds constr: [#S_2813] (if (#paramvar224 >= 0) then #paramvar224 else -#paramvar224) + (if (#paramvar225 >= 0) then #paramvar225 else -#paramvar225) <= 1
bounds constr: [#S_2814] true
constraints generated
sat
************** current phase of 61st iteration **************

Synthesis >> [Validation] >> Labeling >> Resolution >> Labeling

*************************************************************
**** Validator
**** 0th candidate solution 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ 1 + x2 = 0 /\ -2 + x1 + x2 >= 0 /\ 2 + 2 * x1 >= 0 \/ x2 = 0 /\ 1 + x2 = 0 /\ -1 + -x1 + x2 >= 0 /\ 1 + x1 + -x2 >= 0 \/ -x1 + -x2 >= 0 /\ x1 + x2 >= 0
X3(x1: int, x2: int) :=
  x2 = 0 /\ 2 * x1 + x2 >= 0 /\ -2 * x1 + -x2 >= 0 \/ x2 = 0 /\ 1 + x2 = 0 /\ -1 + x1 + x2 = 0 /\ -1 + -2 * x1 + x2 >= 0 /\ 2 * x1 + -x2 >= 0 \/ -x1 + -x2 >= 0 /\ x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 >= 0 /\ 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + -2 * x1 >= 0 /\ x1 >= 0
X92(x1: int, x2: int) :=
  -2 + -x1 + x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 2 * x2 >= 0 /\ 1 + -x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -2 * x1 >= 0 /\ -1 + -x1 >= 0 \/ x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ -1 + 2 * x2 >= 0
X94(x1: int, x2: int) :=
  -2 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -1 + 2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ -2 + x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ 2 + x1 + x2 >= 0

*** a genuine solution is found: 
X1(x1: int, x2: int) :=
  -x1 + x2 = 0
X2(x1: int, x2: int) :=
  -1 + x2 = 0 /\ 1 + x2 = 0 /\ -2 + x1 + x2 >= 0 /\ 2 + 2 * x1 >= 0 \/ x2 = 0 /\ 1 + x2 = 0 /\ -1 + -x1 + x2 >= 0 /\ 1 + x1 + -x2 >= 0 \/ -x1 + -x2 >= 0 /\ x1 + x2 >= 0
X3(x1: int, x2: int) :=
  x2 = 0 /\ 2 * x1 + x2 >= 0 /\ -2 * x1 + -x2 >= 0 \/ x2 = 0 /\ 1 + x2 = 0 /\ -1 + x1 + x2 = 0 /\ -1 + -2 * x1 + x2 >= 0 /\ 2 * x1 + -x2 >= 0 \/ -x1 + -x2 >= 0 /\ x1 + x2 >= 0
X90(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + x1 + -x2 >= 0
X91(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -1 + -x1 >= 0 /\ 2 * x1 >= 0 \/ x1 + -x2 = 0 /\ -2 + -2 * x1 >= 0 /\ x1 >= 0
X92(x1: int, x2: int) :=
  -2 + -x1 + x2 >= 0 /\ -2 + x1 + -x2 >= 0 \/ x1 + -x2 = 0 /\ 2 * x2 >= 0 /\ 1 + -x1 + -x2 >= 0
X93(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -2 * x1 >= 0 /\ -1 + -x1 >= 0 \/ x1 + -x2 = 0 /\ -x1 + x2 >= 0 /\ -1 + 2 * x2 >= 0
X94(x1: int, x2: int) :=
  -2 + -x1 + -x2 >= 0 /\ 1 + x1 + x2 >= 0
X95(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ -2 + -x1 + -x2 >= 0 /\ -1 + 2 * x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 >= 0 /\ -2 + x1 + -x2 >= 0
X96(x1: int, x2: int) :=
  x1 + -x2 = 0 /\ 1 + -2 * x1 >= 0 /\ -2 + -x1 + x2 >= 0 \/ x1 + -x2 = 0 /\ -2 + -x1 + x2 >= 0 /\ 2 + x1 + x2 >= 0
**** labeler
**** labeler
/tmp/fptprove_launch_script_para_aux.sh: line 1: kill: (-4242) - No such process
/tmp/fptprove_launch_script.sh: line 1: kill: (-4236) - No such process


Profiling:
  CHC Solver: 46.077487 sec
model was not produced
Verification Result:
  Valid
Profiling:
  total: 46.079605 sec

*/
