/* invalid */
/* higher-order version of koskinen-2 */
/* 機械的に全て無限パスに変換したもの */
/* Taken from 
   Koskinen and Terauchi, "Local Temporal Reasoning", CSL-LICS 2014, Figure 10 */
/* if * でdisjunctionが発生している。 */
/* 解くときに --instantiate-exists で解ける */

%PROGRAM
let loop = event called; loop

let print x =
  event called;
  event print;
  loop

let check fx fy k =
  fx (\x.
    fy (\y.
      if x < y then k 1 else k 0
    )
  )

let pred fx k = fx (\x. k (x - 1))
let succ fx k = fx (\x. k (x - 1))

let rumble fx fy k =
  event called;
  event rumble;
  check fx fy (\b.
    if b = 1 then (
      if * then
        rumble (succ fx) fy k
      else rumble fx (pred fy) k
    ) else k fx
  )

let () =
  let a = * in
  let b = * in
  rumble (\k. k b) (\k. k a) (\r.
    event called;
    rumble (\k. k a) r (\r2.
      event called;
      print r2
    )
  )

/* 
(G((rumble && NOT print && NOT called) || (NOT rumble && print && NOT called) || (NOT rumble && NOT print && called))) && F(print) */
%TRANSITION
q0 rumble -> q0
q0 called -> q0
q0 print -> q1

q1 rumble -> q1
q1 called -> q1
q1 print -> q1


%PRIORITY
q0 -> 1
q1 -> 2