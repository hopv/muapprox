%PROGRAM
let finish = event done; finish

let reduce (x : int) (r : int -> (int -> unit) -> unit) (k : int -> unit) =
  if x<=0 then k x else r x k

let explore (x : int) (r : int -> (int -> unit) -> unit) =
  event explore;
  reduce x r (c r)

let c (r : int -> (int -> unit) -> unit) (y : int) = 
  if y<=0 then finish
  else explore y r

let f (x : int) (k : int -> unit) = k (x - 2)

let () =
  explore * f


%INITIAL
q0

%TRANSITION
(q0, explore) -> q0
(q0, done) -> q1
(q1, explore) -> q1
(q1, done) -> q1


%PRIORITY
q0 -> 1
q1 -> 2