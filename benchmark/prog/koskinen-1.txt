/* 機械的に全て無限パスに変換したもの */
%PROGRAM
let loop = event called; loop

let finish =
  event called;
  event done;
  loop

let explore x r =
  event called;
  event explore;
  reduce x r (\y.
    event called;
    if y<=0 then finish
    else explore y r
  )
  
let reduce x r k =
  event called;
  if x<=0 then k x else r x k

let () =
  let x = * in
  explore x (\x k.
    event called;
    k (x - 2)
  )

%INITIAL
q0

/* (G((called && NOT done && NOT explore) || (NOT called && done && NOT explore) || (NOT called && NOT done && explore))) && F(done) */
%TRANSITION
(q0, called) -> q0
(q0, explore) -> q0
(q0, done) -> q1
(q1, called) -> q1
(q1, explore) -> q1
(q1, done) -> q1

%PRIORITY
q0 -> 1
q1 -> 2
