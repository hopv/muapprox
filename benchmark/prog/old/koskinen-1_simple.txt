/* 元の問題は有限パスがあるが、この問題は実質的には停止性の検証であるため、finishを再帰呼び出しすることで無限パスに変換できることがわかる。
   一般には、ESOP18 p.16のような変換が必要 */
/* transitionで非決定性があると、non-determinsitc branchが生成され、disproveを示すときにpCSPになる */
/* 変換時に --encode-nondet-with-forall, 解くときに --assign-values-for-exists-at-first-iteration で解ける */

/*
## オートマトンが表す性質
doneの後、done|exploreが無限に出現
## プログラムの性質
必ずdoneの無限再帰になる

Trace /\ L != \emptyset
<=> invalid
*/

%PROGRAM
let finish = event done; finish

let explore x r =
  event explore;
  reduce x r (\y.
    if y<=0 then finish
    else explore y r
  )

let reduce x r k =
  if x<=0 then k x else r x k

let () =
  let x = * in
  explore x (\x k. k (x - 2))

%TRANSITION
q0 explore -> q0
q0 done -> q0
q0 done -> q1
q1 explore -> q1
q1 done -> q1


%PRIORITY
q0 -> 1
q1 -> 2

/*
部分適用のみからなる無限簡約列はできるか
=> できない

部分適用のみからなる簡約列 => 全ての簡約列中の項のtopがlambdaかapplication
1. applicationのとき -> p1 p2 でp1のlambdaが1つ剥がれて、中のlambdaが現れる。それ以外の構文要素には簡約されない。
項の長さは有限だから、有限簡約列になる
*/
