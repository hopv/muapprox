%PROGRAM
let loop ar_x =
  event a;
  check ar_x (\b.
    if b = 0 then pred ar_x (\ar_x_. loop ar_x_) else ()
  )

let () =
  let x = <_forall> * in
  if x > 0 then (
    event a;
    make_array (\_ar.
      update _ar 0 x (\ar.
        loop ar
      )
    )
  ) else ()

let pred ar k =
  /* event called; */
  ar 0 (\x.
    update ar 0 (x - 1) k
  )

let make_array k =
  /* event called; */
  k (\i k_. k_ 0)

let update ar i x k =
  /* event called; */
  k (\j k_. if j = i then k_ x else ar j k_)

let check ar k =
  /* event called; */
  ar 0 (\x.
    if x = 0 then k 1 else k 0
  )


/* 不等号の向きが逆でinvalidになった */

%TRANSITION
qa a -> (1, qa).
qa nullary -> true.

%PRIORITY
qa -> 1.

/*
/* valid */
/* 2 +, additinao argumentの加算位置 */
%HES
Sentry =v
  ∀x. 
   x <= 0
   \/ (∀recLoop76__qa. 
        recLoop76__qa < 2 + 1 * x \/ recLoop76__qa < 2 + (-1) * x
        \/ recLoop76__qa < 1
        \/ Loop__qa recLoop76__qa x
            (\j. \k___qa. (j != 0 \/ k___qa x) /\ (j = 0 \/ k___qa 0))).

Loop76__qa recLoop76__qa _x ar_x__qa ar_x__qa2 b =v
  recLoop76__qa > 0
  /\ (b != 0
      \/ ar_x__qa 0
          (\x. 
            Loop__qa recLoop76__qa
              _x
             (\j. 
               \k___qa. 
                (j != 0 \/ k___qa (x - 1)) /\ (j = 0 \/ ar_x__qa2 j k___qa)))).

Loop__qa recLoop76__qa _x ar_x__qa =v
  ar_x__qa 0
   (\x. 
     (x != 0 \/ Loop76__qa (recLoop76__qa - 1) (_x - 1) ar_x__qa ar_x__qa 1)
     /\ (x = 0 \/ Loop76__qa (recLoop76__qa - 1) (_x - 1) ar_x__qa ar_x__qa 0)).
*/