%PROGRAM
let f ar =
  if<a> * then succ ar (\ar_. f ar_) else g ar

let g ar =
  check ar (\b.
    if b = 1 then (
      event c;
      make_array (\ar_. g ar_)
    ) else (
      event b;
      pred ar (\ar_.
        g ar_
      )
    )
  )

let () =
  make_array (\ar.
    f ar
  )

let succ ar k =
  ar 0 (\x.
    update ar 0 (x + 1) k
  )

let pred ar k =
  ar 0 (\x.
    update ar 0 (x - 1) k
  )

let make_array k =
  k (\i k_. k_ 0)

let update ar i x k =
  k (\j k_. if j = i then k_ x else ar j k_)

let check ar k =
  ar 0 (\x.
    if x = 0 then k 1 else k 0
  )

%TRANSITION
q0 a -> (1, q0) \/ (2, q0).
q1 a -> (1, q1) /\ (2, q1).
q2 a -> (1, q1) /\ (2, q1).
q0 b -> (1, q1).
q1 b -> (1, q1).
q2 b -> (1, q1).
q0 c -> (1, q0).
q1 c -> (1, q2).
q2 c -> (1, q2).

%PRIORITY
q0 -> 1.
q1 -> 1.
q2 -> 2.
