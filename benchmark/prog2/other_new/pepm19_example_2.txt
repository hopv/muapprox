/* valid */
%PROGRAM
let f x =
  if<a> * then f (x + 1) else g x

let g x =
  if x = 0 then (event c; g 0) else (event b; g (x - 1))

let () = f 0



%TRANSITION
q0 a -> (1, q0) \/ (2, q0).
q1 a -> (1, q1) /\ (2, q1).
q2 a -> (1, q1) /\ (2, q1).
q0 b -> (1, q1).
q1 b -> (1, q1).
q2 b -> (1, q1).
q0 c -> (1, q0).
q1 c -> (1, q2).
q2 c -> (1, q2).

%PRIORITY
q0 -> 1.
q1 -> 1.
q2 -> 2.

/*
/* prover valid (no variables are used for bound) */
%HES
Sentry =v F__q2 0.
G__q x =v
  (x != 0 \/ G__q 0)
  /\ (x = 0
      \/ (∀recG__q. recG__q < 2
           \/ G__q3 recG__q (x - 1))).
F__q recF__q x =v
  recF__q > 0
  /\ (F__q (recF__q - 1) (x + 1)
      \/ (∀recG__q. recG__q < 2
           \/ G__q2 recG__q x)).
G__q2 recG__q x =v
  recG__q > 0
  /\ (x != 0 \/ G__q2 (recG__q - 1) 0)
     /\ (x = 0
         \/ (∀recG__q2. recG__q2 < 2
              \/ G__q3 recG__q2 (x - 1))).
G__q3 recG__q x =v
  recG__q > 0 /\ (x != 0 \/ G__q 0) /\ (x = 0 \/ G__q3 (recG__q - 1) (x - 1)).
F__q2 x =v
  (∀recF__q. recF__q < 2
    \/ F__q recF__q (x + 1))
  \/ (∀recG__q. recG__q < 2
       \/ G__q2 recG__q x).
*/
