/* (should be) valid */

%PROGRAM
let loop = event called; loop

let app f x i kk =
  event called; 
  f x (\t k.
    k (t - i)
  ) kk

let ha1 x =
  event called;
  event ha1;
  loop

let ha2 x =
  event called;
  event ha2;
  loop

let walk x f k =
  event called;
  event walk;
  if x = 0 then k x
  else f x (\r.
    walk r f k
  )

let run x f k =
  event called;
  event run;
  if x = 0 then k x
  else f x (\r.
    f r (\r_.
      run r_ f k
    )
  )

let life x =
  event called;
  if <d> * then (
    event p;
    if x < 0 then app walk x 1 (\r. ha1 r)
    else app run x 1 (\r. ha2 r)
  ) else
    life x

let () =
  life (<_forall> *)

/* (G ( ( (p) && (NOT walk) && (NOT ha1) && (NOT run) && (NOT ha2) && (NOT called) ) || ( (NOT p) && (walk) && (NOT ha1) && (NOT run) && (NOT ha2) && (NOT called) ) || ( (NOT p) && (NOT walk) && (ha1) && (NOT run) && (NOT ha2) && (NOT called) ) || ( (NOT p) && (NOT walk) && (NOT ha1) && (run) && (NOT ha2) && (NOT called) ) || ( (NOT p) && (NOT walk) && (NOT ha1) && (NOT run) && (ha2) && (NOT called) ) || ( (NOT p) && (NOT walk) && (NOT ha1) && (NOT run) && (NOT ha2) && (called) ) )) && (G(p -> (     X(       (((walk || called) U ha1) || (G(walk || called))) ||       (((run  || called) U ha2) || (G(run  || called)))     )   ))) */
%TRANSITION
accept_init called -> (1, accept_init).
accept_init run -> (1, accept_init).
accept_init walk -> (1, accept_init).
accept_init ha1 -> (1, accept_init).
accept_init ha2 -> (1, accept_init).
accept_init d -> (1, accept_init) /\ (2, accept_init).
accept_init p -> (1, t0_s2) \/ (1, accept_S3) \/ (1, accept_S4) \/ (1, t1_s5).

t0_s2 called -> (1, t0_s2).
t0_s2 walk -> (1, t0_s2).
t0_s2 ha1 -> (1, accept_init).
t0_s2 d -> (1, t0_s2) /\ (2, t0_s2).
t0_s2 run -> false.
t0_s2 ha2 -> false.
t0_s2 p -> false.

accept_S3 called -> (1, accept_S3).
accept_S3 run -> (1, accept_S3).
accept_S3 d -> (1, accept_S3) /\ (2, accept_S3).
accept_S3 walk -> false.
accept_S3 ha1 -> false.
accept_S3 ha2 -> false.
accept_S3 p -> false.

accept_S4 called -> (1, accept_S4).
accept_S4 walk -> (1, accept_S4).
accept_S4 d -> (1, accept_S4) /\ (2, accept_S4).
accept_S4 run -> false.
accept_S4 ha1 -> false.
accept_S4 ha2 -> false.
accept_S4 p -> false.

t1_s5 called -> (1, t1_s5).
t1_s5 run -> (1, t1_s5).
t1_s5 ha2 -> (1, accept_init).
t1_s5 d -> (1, t1_s5) /\ (2, t1_s5).
t1_s5 walk -> false.
t1_s5 ha1 -> false.
t1_s5 p -> false.

%PRIORITY
accept_init -> 2.
t0_s2 -> 1.
accept_S3 -> 2.
accept_S4 -> 2.
t1_s5 -> 1.
