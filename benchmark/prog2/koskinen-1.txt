/* valid */
%PROGRAM
let loop = event called; loop

let finish =
  event called;
  event done;
  loop

let explore x r =
  event called;
  event explore;
  reduce x r (\y.
    if y<=0 then finish
    else explore y r
  )
  
let reduce x r k =
  event called;
  if x<=0 then k x else r x k

let () =
  let x = <_forall> * in
  explore x (\x k.
    k (x - 2)
  )

/* (G((called && NOT done && NOT explore) || (NOT called && done && NOT explore) || (NOT called && NOT done && explore))) && F(done) */
%TRANSITION
q0 called -> (1, q0).
q0 explore -> (1, q0).
q0 done -> (1, q1).

q1 called -> (1, q1).
q1 explore -> (1, q1).
q1 done -> (1, q1).

%PRIORITY
q0 -> 1.
q1 -> 2.
