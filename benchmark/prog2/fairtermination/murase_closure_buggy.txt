/* vaild */
%PROGRAM
let const x k = event called; k x

let finish k = event called; event a; finish k

let f g k =
  event called;
  g (\n.
    if n > 0 then
      f (const n) k /* /* POPL16: */ f (const (n-1)) k */
    else finish k
  )

let () =
  let n = <_exists> * in
  f (const n) (\. ())


%TRANSITION
q_0 called -> (1, q_0).
q_a called -> (1, q_0).
q_b called -> (1, q_0).

q_0 d -> (1, q_0) \/ (2, q_0).
q_a d -> (1, q_0) \/ (2, q_0).
q_b d -> (1, q_0) \/ (2, q_0).

q_0 a -> (1, q_a).
q_a a -> (1, q_a).
q_b a -> (1, q_a).

q_0 b -> (1, q_b).
q_a b -> (1, q_b).
q_b b -> (1, q_b).

q_0 nullary -> false.
q_a nullary -> false.
q_b nullary -> false.

%PRIORITY
/* {(a, b)} */
q_0 -> 0.
q_a -> 1.
q_b -> 2.
