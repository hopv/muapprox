/* invalid */
%PROGRAM
let rand k =
  event called;
  let r = <_forall> * in
  if 0 <= r then
    (event b; k (\k2. k2 r))
  else
    (event a; k (\k2. k2 r))

let ispositive fx k =
  fx (\x.
    if x > 0 then k 1 else k 0
  )

let randpos k =
  event called;
  rand (\fx.
    ispositive fx (\b.
      if b = 1 then
        k fx
      else
        randpos k
    )
  )

let () =
  randpos (\fr.
    ()
    /* fr (\r. assert (r > 0)) */
  )

%TRANSITION
qa a -> (1, qa).
qa b -> (1, qb).
qa called -> (1, q_called).
qa nullary -> true.

qb a -> (1, qa).
qb b -> (1, qb).
qb called -> (1, q_called).
qb nullary -> true.

q_called a -> (1, qa).
q_called b -> (1, qb).
q_called called -> (1, q_called).
q_called nullary -> true.

%PRIORITY
q_called -> 1.
qa -> 2.
qb -> 3.
