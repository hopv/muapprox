/* valid  40sec */
%PROGRAM
let fin = event fin; ()

let repeat f ar =
  check ar (\b.
    if b = 1 then fin
    else (
      if<d1> * then f ar (repeat f)
      else pred ar (\ar_. repeat f ar_)
    )
  )

let () =
  let y = <a1> * in
  make_array (\ar.
    update ar 0 (<_forall> *) (\ar_.
      repeat (\ar k. minus ar y k) ar_
    )
  )

let minus ar y k =
  ar 0 (\x.
    update ar 0 (x - (y+1)) k
  )

let pred ar k =
  ar 0 (\x.
    update ar 0 (x - 1) k
  )

let make_array k =
  k (\i k_. k_ 0)

let update ar i x k =
  k (\j k_. if j = i then k_ x else ar j k_)

let check ar k =
  ar 0 (\x.
    if x <= 0 then k 1 else k 0
  )

/*
   phi * *
-> Input 0 (\x. ここはそのままで、unit型.単にnondetintが変わっただけ phi * *)
*/

%TRANSITION
q0 d1 -> (1, q0) /\ (2, q0).
q0 a1 -> (1, q0) \/ (2, q1) \/ (3, q1).
q0 fin -> true.

q1 d1 -> false.
q1 a1 -> (1, q0) \/ (2, q1) \/ (3, q1).
q1 fin -> false.

%PRIORITY
q0 -> 1.
/* demonicのときは偶数、angelicのときは奇数の大きな値にする */
q1 -> 3.

/*

*/
