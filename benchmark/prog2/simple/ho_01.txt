/* valid */
%PROGRAM
let fin = event fin; ()

let check f k =
  f (\x.
    if x <= 0 then k 0 else k 1
  )

let neg1 fn k =
  fn (\n.
    k (1 - n)
  )

let pred fn k =
  fn (\n.
    k (n - 1)
  )
  
let outer fm =
  event e_outer;
  check fm (\b.
    if b = 0 then fin
    else (
      let n = <_forall> * in
      repeat (\k. k n)
    )
  )
  
let repeat fn =
  event e_repeat;
  check fn (\b.
    if b = 0 then outer (neg1 fn)
    else repeat (pred fn)
  )

let () =
  let n = <_forall> * in
  if n > 0 then
    outer (\k. k n)
  else fin

%TRANSITION
q0 d2 -> (1, q0) /\ (2, q1) /\ (3, q1).
q0 e_repeat -> (1, q0).
q0 e_outer -> (1, q2).
q0 fin -> true.

q1 d2 -> (1, q0) /\ (2, q1) /\ (3, q1).
q1 e_repeat -> false.
q1 e_outer -> false.
q1 fin -> false.

q2 d2 -> (1, q0) /\ (2, q1) /\ (3, q1).
q2 e_repeat -> (1, q0).
q2 e_outer -> false.
q2 fin -> false.

%PRIORITY
q0 -> 1.
/* demonicのときは偶数 = 無限に分岐する場合を受理、angelicのときは奇数の大きな値 = (ORで繋がる)無限に分岐する場合は受理しない にする */
q1 -> 2.
q2 -> 2.