## demonic / angelic non-determinismの表現方法
* pepm19_ex2.4_(a|b).txt が例

q d -> (1, q) /\ (2, q).
q d2 -> (1, q) /\ (2, qd).
qd d2 -> (1, q) /\ (2, qd).
qd * -> false. (他のイベントが入ることはない)

q a -> (1, q) \/ (2, q).
q a2 -> (1, q) \/ (2, qa).
qa a2 -> (1, q) \/ (2, qa).
qa * -> false. (他のイベントが入ることはない)

qd -> large (original max + 1 以上) even priority (これが無限に続く場合は受理するようにする)
qa -> large (original max + 1 以上) odd  priority (これが無限に続く場合は受理しないようにする（いずれかの分岐で受理する必要があるので）)



## HORS model checkingのresource usageの検証の例
* 各resourceをnewするときに、(下記のnew_roのように)非決定分岐でopenするものとしないものに分岐する
* automatonは、resourceをちょうど1回だけnewするパスのみを検査するようにする（0回や2回以上のnewがあるパスは、無条件で受理）
  * resource automatonはtrivialで足りる

let () = new_ro g
let g z1 = new_wo (f () z1)
let f k x y = if * then (acc_close x (acc_close y k)) else (acc_read x (acc_write y (f k x y)))
let new_ro k = if * then (event open; k (\f k. f k)) else (k (\f k. k))
let acc_close x k = x (\k2. event close; k2) k

二重のオープンや、1回もオープンしていない状態での資源の使用が無いことは、（単純型付け）プログラミング言語の性質から示せる
* 1回openしたファイルは、read*closeの順にアクセスされる
* close/read/writeの前には、openがある (無いと、そもそも型が付かない)
* 2重のopen: 「同じファイルに対して」とかはもちろん検査されない. immutableなので、同じ変数に上書きということはない。closeがあるということで検査される



## 述語の簡単化の案
下からinling可能なものを見ていけばいいはず

無駄な述語を統合
* いずれの再帰参照のループにも属さない あるいは 一つの述語からのみ参照される 述語Pは、inliningできる（「inline可能述語」と言う。一つの述語に関して元の実装にあった「より浅い」の条件は要らない（HES to HFLの変換式を見ればどちらにしても不動点を付けて展開することがわかるし、P自体は再帰参照しないので展開後に不動点は削除できる）。）

* inline可能述語であるなら、inline展開して、同じbodyで、下の1を満たす述語があったら、un-inline展開することで統合する。


## 再帰参照のループに属して、複数ヶ所からの参照がある（別にこの条件を満たしている必要は無い）述語を、1回inliningできる条件.
inlining対象X / inlining展開先phi_Yと言う

1. 対象が属する再帰参照のループに、展開先が属していない
理由:
* 1の条件によって、phi_Y中のXの出現は、必ず不動点演算子+bodyとなる（変数参照とはならない）。
* 1の条件によって、Yは再帰参照されていないので、Xの不動点を一度展開しても意味が変わらない
* Xの不動点をその場で一度展開するだけなので、phi_X中の述語および変数の参照は、展開前後で意味が変わらない
