/* TODO: validになってほしいが、invalidになる... */
/* forall encodingでも、複数ルールで\/を/\にしても同じ */
/*
Example 2 of Hofmann and Chen, "Buchi Types for Infinite Traces and Liveness", CSL-LICS 2014

Trace(P) \subset L(A)
<=> Trace(P) \cap L(A) != \emptyset
<=> invalid
*/

/*
## プログラムの性質
(a*cb)^{\omega}
aは無限回現れないかもしれない. cとbは無限回現れる

## オートマトンが表す性質
"infinitely many b OR finitely many c"

Trace /\ L != \emptyset
<=> invalid
*/

%PROGRAM
let f ii =
  /* event called; */
  g ii (\i.
    if i = 0 then
      (event b; f (i + 1))
    else f (i + 1)
  )

let g ii k =
  /* event called; */
  if <d> * then (
    event a;
    g ii k
  ) else (
    if ii = 0 then (
      event c;
      k ii
    ) else k ii
  )

let () =
  event a;
  f 0


/* -q2-> f8(lambda) -q2-> f -q2-> g */
%TRANSITION
q0 a -> (1, q2) \/ (1, q0).
q0 b -> (1, q2) \/ (1, q0) \/ (1, q1).
q0 c -> (1, q2) \/ (1, q0).

q1 a -> (1, q0).
q1 b -> (1, q0).
q1 c -> (1, q0).

/* expresses "finitely many c" */
q2 a -> (1, q2).
q2 b -> (1, q2).
q2 c -> false.

/*
qd a -> (1, qd).
qd b -> (1, qd).
qd c -> (1, qd).
*/

q0 d -> (1, q0) /\ (2, q0).
q1 d -> (1, q1) /\ (2, q1).
q2 d -> (1, q2) \/ (2, q2).

/* qd d -> (1, qd) /\ (2, qd). */

%PRIORITY
q0 -> 1.
q1 -> 2.
q2 -> 2.
