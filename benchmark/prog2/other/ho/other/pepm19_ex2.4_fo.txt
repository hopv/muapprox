/* valid  40sec */
%PROGRAM
let fin = event fin; ()

let repeat f x =
  if x <= 0 then fin
  else (
    if<d1> * then f x (repeat f)
    else repeat f (x - 1)
  )

let xx fy fz =
  event inf_called;
  if <d1> * then
    xx fy fz
  else
    repeat
      (\x k.
        k (x - (fy + 1))
      )
      fz

let () =
  let y = <a1> * in
  let z = <_forall> * in
  xx y z

/*
   phi * *
-> Input 0 (\x. ここはそのままで、unit型.単にnondetintが変わっただけ phi * *)
*/

%TRANSITION
q0 d1 -> (1, q0) /\ (2, q0).
q0 a1 -> (1, q0) \/ (2, q1) \/ (3, q1).
q0 fin -> true.
q0 inf_called -> (1, q_ic).

q1 d1 -> false.
q1 a1 -> (1, q0) \/ (2, q1) \/ (3, q1).
q1 fin -> false.
q1 inf_called -> (1, q_ic).

q_ic d1 -> (1, q_ic) /\ (2, q_ic).
q_ic a1 -> (1, q0) \/ (2, q1) \/ (3, q1).
q_ic fin -> true.
q_ic inf_called -> (1, q_ic).

%PRIORITY
q_ic -> 0.
q0 -> 1.
/* demonicのときは偶数、angelicのときは奇数の大きな値にする */
q1 -> 3.
