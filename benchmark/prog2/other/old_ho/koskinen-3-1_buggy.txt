%PROGRAM
let halt =
  event called;
  event halt;
  halt
  
let bar x k =
  event called;
  event bar;
  if x>0 then bar (x-1) k
  else k x

let foo x =
  event called;
  event foo;
  if x<0 then foo x
  else halt

let () =
  if <d> * then foo 0
  else bar (<_forall> *) (\r.
    foo r
  )

%TRANSITION
q_foo foo -> (1, q_foo).
q_foo bar -> (1, q_1).
q_foo d -> (1, q_foo) /\ (2, q_foo).
q_foo called -> (1, q_1).
q_foo halt -> (1, q_1). 

q_1 foo -> (1, q_foo).
q_1 bar -> (1, q_1).
q_1 d -> (1, q_1) /\ (2, q_1).
q_1 called -> (1, q_1).
q_1 halt -> (1, q_1).

%PRIORITY
q_1 -> 1.
q_foo -> 2.
