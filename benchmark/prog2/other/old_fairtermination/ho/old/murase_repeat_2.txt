/* valid */
%PROGRAM

let xx g fx k =
  event inf_called;
  if <d> * then
    g fx k
  else
    xx g fx k

let check fx k =
  event inf_called;
  if <d> * then
    if fx > 0 then k 1 else k 0
  else
    check fx k

let pred fx k =
  k (fx - 1)

let repeat g k =
  event called;
  let v = <_forall> * in
  xx g v (\.
    repeat g k
  )

let f fx k =
  event called;
  check fx (\b.
    if b = 1 then
      pred fx (\fx_. f fx_ k)
    else
      (event a; k)
  )
  
let () =
  repeat f (\. ())


%TRANSITION
qa a -> (1, qa).
qa called -> (1, q_called).
qa inf_called -> (1, q_ic).
qa nullary -> true.
qa d -> (1, qa) /\ (2, qa).

q_called a -> (1, qa).
q_called called -> (1, q_called).
q_called inf_called -> (1, q_ic).
q_called nullary -> true.
q_called d -> (1, q_called) /\ (2, q_called).

q_ic a -> (1, qa).
q_ic called -> (1, q_called).
q_ic inf_called -> (1, q_ic).
q_ic nullary -> true.
q_ic d -> (1, q_ic) /\ (2, q_ic).

%PRIORITY
q_ic -> 0.
q_called -> 1.
qa -> 2.