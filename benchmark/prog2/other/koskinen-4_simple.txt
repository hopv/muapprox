/* valid */
%PROGRAM
let loop = event called; loop

let ha1 x =
  event called;
  event ha1;
  loop

let ha2 x =
  event called;
  event ha2;
  loop

let walk x =
  event called;
  event walk;
  if x = 0 then ha1 x
  else (
    walk (x - 1)
  )

let run x =
  event called;
  event run;
  if x <= 0 then ha2 x
  else (
    run (x - 2)
  )

let life x =
  event called;
  if <d> * then (
    event p;
    if x < 0 then walk (-x)
    else run x
  ) else
    life x

let () =
  let x = <_forall> * in
  life x

/*
/* 解ける */
let loop = event called; loop

let ha1 x =
  event called;
  event ha1;
  loop

let ha2 x =
  event called;
  event ha2;
  loop

let walk x k =
  event called;
  event walk;
  if x <= 0 then k x
  else (
    walk (x - 1) k
  )

let run x k =
  event called;
  event run;
  if x <= 0 then k x
  else (
    run (x - 2) k
  )

let life x =
  event called;
  if <d> * then (
    event p;
    if x < 0 then walk x (\r. ha1 r)
    else run x (\r. ha2 r)
  ) else
    life x

let () =
  let x = <_forall> * in
  life x
*/

%TRANSITION
accept_init called  -> (1, accept_init).
accept_init d -> (1, accept_init) /\ (2, accept_init).
accept_init run  -> (1, accept_init).
accept_init walk  -> (1, accept_init).
accept_init ha1  -> (1, accept_init).
accept_init ha2  -> (1, accept_init).
accept_init p  -> (1, t0_s2) \/ (1, t1_s3).

t0_s2 walk  -> (1, t0_s2).
t0_s2 called  -> (1, t0_s2).
t0_s2 d -> (1, t0_s2) /\ (2, t0_s2).
t0_s2 ha1  -> (1, accept_init).
t0_s2 run  -> (1, qd).
t0_s2 ha2  -> (1, qd).
t0_s2 p  -> (1, qd).

t1_s3 run  -> (1, t1_s3).
t1_s3 d -> (1, t1_s3) /\ (2, t1_s3).
t1_s3 ha2  -> (1, accept_init).
t1_s3 called  -> (1, t1_s3).
t1_s3 walk  -> (1, qd).
t1_s3 ha1  -> (1, qd).
t1_s3 p  -> (1, qd).

qd run  -> (1, qd).
qd d -> (1, qd) /\ (2, qd).
qd ha2  -> (1, qd).
qd called  -> (1, qd).
qd walk  -> (1, qd).
qd ha1  -> (1, qd).
qd p  -> (1, qd).

%PRIORITY
accept_init -> 2.
t0_s2 -> 1.
t1_s3 -> 1.
qd -> 1.
