
%PROGRAM
let loop = event called; loop

let print x =
  event called;
  event print;
  loop

let rumble x y k =
  event called;
  event rumble;
  if x < y then (
    if <d> * then
      rumble (x+1) y k
    else rumble x (y-1) k
  ) else k x

let xx fa fb =
  event inf_called;
  if <d> * then
    rumble fb fa (\fr.
      rumble fa fr (\fr2.
        print fr2
      )
    )
  else
    xx fa fb

let () =
  let a = <_forall> * in
  let b = <_forall> * in
  xx a b

/* 
(G((rumble && NOT print && NOT called) || (NOT rumble && print && NOT called) || (NOT rumble && NOT print && called))) && F(print) */
%TRANSITION
q0 inf_called -> (1, q_ic).
q0 rumble -> (1, q0).
q0 called -> (1, q0).
q0 print -> (1, q1).
q0 d -> (1, q0) /\ (2, q0).

q1 inf_called -> (1, q_ic).
q1 rumble -> (1, q1).
q1 called -> (1, q1).
q1 print -> (1, q1).
q1 d -> (1, q1) /\ (2, q1).

q_ic inf_called -> (1, q_ic).
q_ic rumble -> (1, q0).
q_ic called -> (1, q0).
q_ic print -> (1, q1).
q_ic d -> (1, q_ic) /\ (2, q_ic).


%PRIORITY
q_ic -> 0.
q0 -> 1.
q1 -> 2.
