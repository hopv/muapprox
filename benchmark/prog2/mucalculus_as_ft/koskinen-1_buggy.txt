/* valid (dual) */
%PROGRAM
let finish =
  event called;
  event done;
  finish

let explore x r =
  event called;
  /* event explore; */
  reduce x r (\y.
    if y=0 then finish
    else explore y r
  )
  
let reduce x r k =
  event called;
  if x<=0 then k x else r x k

let () =
  let x = <_exists> * in
  explore x (\x k.
    k (x - 2)
  )

%TRANSITION
q_0 called -> (1, q_0).
q_done called -> (1, q_0).

q_0 d -> (1, q_0) \/ (2, q_0).
q_done d -> (1, q_0) \/ (2, q_0).

q_0 done -> (1, q_done).
q_done done -> (1, q_done).

%PRIORITY
/* {(done, never)} */
q_done -> 1.
q_0 -> 0.
