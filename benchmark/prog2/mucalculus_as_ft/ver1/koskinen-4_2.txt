%PROGRAM
let app f x i k =
  event called;
  f x (\x k2. k2 (x - i)) k

let ha1 x =
  event called;
  event ha;
  ha1 x

let ha2 x =
  event called;
  event ha;
  ha2 x

let walk x f k =
  event called;
  if x < 0 then k x
  else f x (\x_. walk x_ f k)

let run x f k =
  event called;
  if x < 0 then k x
  else f x (\x_. f x_ (\x__. run x__ f k))

let life x =
  event called;
  if <d> * then (
    event p;
    if x < 0 then app walk x 1 (\x_. ha1 x_)
    else app run x 1 (\x_. ha2 x_)
  ) else life x

let () =
  life (<_forall> *)

%TRANSITION
q0 p -> (1, qp).
q0 d -> (1, q0) /\ (2, q0).
q0 called -> (1, q0).
q0 ha -> (1, q0).

qp p -> (1, qp).
qp d -> (1, qp) /\ (2, qp).
qp called -> (1, qp).
qp ha -> (1, qha).

qha p -> (1, qha).
qha d -> (1, qha) /\ (2, qha).
qha called -> (1, qha).
qha ha -> (1, qha).

%PRIORITY
q0 -> 0.
qp -> 1.
qha -> 2.
