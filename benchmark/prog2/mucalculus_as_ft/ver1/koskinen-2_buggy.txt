/* valid */
%PROGRAM
let print x =
  event called;
  event print;
  print x

let rumble x y k =
  event called;
  event rumble;
  if x < y then (
    if <d> * then
      rumble (x+1) y k
    else rumble x y k
  ) else k x

let () =
  let a = <_forall> * in
  let b = <_forall> * in
  rumble a b (\r.
    rumble a r (\r2.
      print r2
    )
  )

%TRANSITION
q_0 called -> (1, q_0).
q_0 explore -> (1, q_0).
q_0 rumble -> (1, q_0).
q_0 print -> (1, q_print).
q_0 d -> (1, q_0) /\ (2, q_0).

q_print called -> (1, q_0).
q_print explore -> (1, q_0).
q_print rumble -> (1, q_0).
q_print print -> (1, q_print).
q_print d -> (1, q_print) /\ (2, q_print).

%PRIORITY
q_0 -> 1.
q_print -> 2.
