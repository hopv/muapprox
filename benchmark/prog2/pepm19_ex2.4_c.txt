/* intをdemonic non-determinismで、体系的なエンコーディングをしたもの */
%PROGRAM
let () = g 3 <d2> *

let repeat f x =
  if x <= 0 then fin
  else (
    if<d1> * then f x (repeat f)
    else repeat f (x - 1)
  )

let fin = event fin; fin

let sub x y k = k (y - x)

let g z x = repeat (sub x) z

/*
   phi * *
-> Input 0 (\x. ここはそのままで、unit型.単にnondetintが変わっただけ phi * *)
*/

/*
/* 3 should be an arbitary integer */
/* S -> Input 1 (G 3). /* valid */ */
S -> Input 0 (G 3). /* invalid */
Repeat f x -> if x <= 0 then Fin else
          d (f x (Repeat f)) (Repeat f (x - 1)).
Fin -> c Fin.
Sub x y k -> k (y - x).
G z x -> Repeat (Sub x) z.
Input x k -> d2 (k x) (Input (x + 1) k).
*/

%TRANSITION
q0 d1 -> (1, q0) /\ (2, q0).
q0 d2 -> (1, q0) /\ (2, q1).
q0 fin -> true.

q1 d1 -> false.
q1 d2 -> (1, q0) /\ (2, q1).
q1 fin -> false.

%PRIORITY
q0 -> 1.
q1 -> 2.
