/* valid */
%PROGRAM
let pred x k = event called; k (x - 1)

let compose f_ g x k = event called; g x (\r. f_ r k)

let f c k =
  event called;
  event a;
  if c = 0 then k
  else (event b; compose f pred c k)

let () =
  let r = <_exists> * in
  f r (\. ())

%TRANSITION
q_0 called -> (1, q_0).
q_a called -> (1, q_0).
q_b called -> (1, q_0).

q_0 d -> (1, q_0) \/ (2, q_0).
q_a d -> (1, q_0) \/ (2, q_0).
q_b d -> (1, q_0) \/ (2, q_0).

q_0 a -> (1, q_a).
q_a a -> (1, q_a).
q_b a -> (1, q_a).

q_0 b -> (1, q_b).
q_a b -> (1, q_b).
q_b b -> (1, q_b).

q_0 nullary -> false.
q_a nullary -> false.
q_b nullary -> false.

%PRIORITY
/* {(a, b)} */
q_0 -> 0.
q_a -> 1.
q_b -> 2.
